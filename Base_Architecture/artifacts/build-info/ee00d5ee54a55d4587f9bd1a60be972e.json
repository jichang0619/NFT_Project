{
	"id": "ee00d5ee54a55d4587f9bd1a60be972e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"Whitelist.sol": {
				"content": "//SPDX-License-Identifier: GPL-3.0\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Storage {\r\n    mapping(address => uint256) private whitelist_addr;\r\n\r\n    // whitelist 작성\r\n    constructor() {\r\n        address a = 0xb2f8c60b26a53Ae960536333311CB4a04f519084;\r\n        whitelist_addr[a] = 1;\r\n    }\r\n\r\n    function _is_whitelist(address addr) public view returns(bool){\r\n        if (whitelist_addr[addr] == 1)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function add_whitelist(address addr) public{\r\n        whitelist_addr[addr] = 1;\r\n    }\r\n\r\n    /* \r\n    function is_whitelist_2() public view returns(bool){\r\n        if (whitelist_addr[msg.sender] == 1)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    */\r\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Whitelist.sol": {
				"Storage": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "addr",
									"type": "address"
								}
							],
							"name": "_is_whitelist",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "addr",
									"type": "address"
								}
							],
							"name": "add_whitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Whitelist.sol\":174:968  contract Storage {\r... */\n  mstore(0x40, 0x80)\n    /* \"Whitelist.sol\":282:401  constructor() {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"Whitelist.sol\":307:316  address a */\n  0x00\n    /* \"Whitelist.sol\":319:361  0xb2f8c60b26a53Ae960536333311CB4a04f519084 */\n  0xb2f8c60b26a53ae960536333311cb4a04f519084\n    /* \"Whitelist.sol\":307:361  address a = 0xb2f8c60b26a53Ae960536333311CB4a04f519084 */\n  swap1\n  pop\n    /* \"Whitelist.sol\":392:393  1 */\n  0x01\n    /* \"Whitelist.sol\":372:386  whitelist_addr */\n  0x00\n    /* \"Whitelist.sol\":372:389  whitelist_addr[a] */\n  dup1\n    /* \"Whitelist.sol\":387:388  a */\n  dup4\n    /* \"Whitelist.sol\":372:389  whitelist_addr[a] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"Whitelist.sol\":372:393  whitelist_addr[a] = 1 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"Whitelist.sol\":296:401  {\r... */\n  pop\n    /* \"Whitelist.sol\":174:968  contract Storage {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Whitelist.sol\":174:968  contract Storage {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8c48deb5\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xe8c61e19\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Whitelist.sol\":409:630  function _is_whitelist(address addr) public view returns(bool){\r... */\n    tag_3:\n      tag_5\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_6\n      swap2\n      swap1\n      tag_7\n      jump\t// in\n    tag_6:\n      tag_8\n      jump\t// in\n    tag_5:\n      mload(0x40)\n      tag_9\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_9:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Whitelist.sol\":638:724  function add_whitelist(address addr) public{\r... */\n    tag_4:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_12\n      swap2\n      swap1\n      tag_7\n      jump\t// in\n    tag_12:\n      tag_13\n      jump\t// in\n    tag_11:\n      stop\n        /* \"Whitelist.sol\":409:630  function _is_whitelist(address addr) public view returns(bool){\r... */\n    tag_8:\n        /* \"Whitelist.sol\":466:470  bool */\n      0x00\n        /* \"Whitelist.sol\":510:511  1 */\n      0x01\n        /* \"Whitelist.sol\":486:500  whitelist_addr */\n      0x00\n        /* \"Whitelist.sol\":486:506  whitelist_addr[addr] */\n      dup1\n        /* \"Whitelist.sol\":501:505  addr */\n      dup5\n        /* \"Whitelist.sol\":486:506  whitelist_addr[addr] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"Whitelist.sol\":486:511  whitelist_addr[addr] == 1 */\n      eq\n        /* \"Whitelist.sol\":482:623  if (whitelist_addr[addr] == 1)\r... */\n      iszero\n      tag_15\n      jumpi\n        /* \"Whitelist.sol\":544:548  true */\n      0x01\n        /* \"Whitelist.sol\":537:548  return true */\n      swap1\n      pop\n      jump(tag_14)\n        /* \"Whitelist.sol\":482:623  if (whitelist_addr[addr] == 1)\r... */\n    tag_15:\n        /* \"Whitelist.sol\":606:611  false */\n      0x00\n        /* \"Whitelist.sol\":599:611  return false */\n      swap1\n      pop\n        /* \"Whitelist.sol\":409:630  function _is_whitelist(address addr) public view returns(bool){\r... */\n    tag_14:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"Whitelist.sol\":638:724  function add_whitelist(address addr) public{\r... */\n    tag_13:\n        /* \"Whitelist.sol\":715:716  1 */\n      0x01\n        /* \"Whitelist.sol\":692:706  whitelist_addr */\n      0x00\n        /* \"Whitelist.sol\":692:712  whitelist_addr[addr] */\n      dup1\n        /* \"Whitelist.sol\":707:711  addr */\n      dup4\n        /* \"Whitelist.sol\":692:712  whitelist_addr[addr] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Whitelist.sol\":692:716  whitelist_addr[addr] = 1 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Whitelist.sol\":638:724  function add_whitelist(address addr) public{\r... */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_19:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_21\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_22\n      jump\t// in\n    tag_21:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:481   */\n    tag_7:\n        /* \"#utility.yul\":211:217   */\n      0x00\n        /* \"#utility.yul\":260:262   */\n      0x20\n        /* \"#utility.yul\":248:257   */\n      dup3\n        /* \"#utility.yul\":239:246   */\n      dup5\n        /* \"#utility.yul\":235:258   */\n      sub\n        /* \"#utility.yul\":231:263   */\n      slt\n        /* \"#utility.yul\":228:347   */\n      iszero\n      tag_24\n      jumpi\n        /* \"#utility.yul\":266:345   */\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n        /* \"#utility.yul\":228:347   */\n    tag_24:\n        /* \"#utility.yul\":386:387   */\n      0x00\n        /* \"#utility.yul\":411:464   */\n      tag_27\n        /* \"#utility.yul\":456:463   */\n      dup5\n        /* \"#utility.yul\":447:453   */\n      dup3\n        /* \"#utility.yul\":436:445   */\n      dup6\n        /* \"#utility.yul\":432:454   */\n      add\n        /* \"#utility.yul\":411:464   */\n      tag_19\n      jump\t// in\n    tag_27:\n        /* \"#utility.yul\":401:464   */\n      swap2\n      pop\n        /* \"#utility.yul\":357:474   */\n      pop\n        /* \"#utility.yul\":152:481   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":487:596   */\n    tag_28:\n        /* \"#utility.yul\":568:589   */\n      tag_30\n        /* \"#utility.yul\":583:588   */\n      dup2\n        /* \"#utility.yul\":568:589   */\n      tag_31\n      jump\t// in\n    tag_30:\n        /* \"#utility.yul\":563:566   */\n      dup3\n        /* \"#utility.yul\":556:590   */\n      mstore\n        /* \"#utility.yul\":487:596   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":602:812   */\n    tag_10:\n        /* \"#utility.yul\":689:693   */\n      0x00\n        /* \"#utility.yul\":727:729   */\n      0x20\n        /* \"#utility.yul\":716:725   */\n      dup3\n        /* \"#utility.yul\":712:730   */\n      add\n        /* \"#utility.yul\":704:730   */\n      swap1\n      pop\n        /* \"#utility.yul\":740:805   */\n      tag_33\n        /* \"#utility.yul\":802:803   */\n      0x00\n        /* \"#utility.yul\":791:800   */\n      dup4\n        /* \"#utility.yul\":787:804   */\n      add\n        /* \"#utility.yul\":778:784   */\n      dup5\n        /* \"#utility.yul\":740:805   */\n      tag_28\n      jump\t// in\n    tag_33:\n        /* \"#utility.yul\":602:812   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":899:995   */\n    tag_36:\n        /* \"#utility.yul\":936:943   */\n      0x00\n        /* \"#utility.yul\":965:989   */\n      tag_38\n        /* \"#utility.yul\":983:988   */\n      dup3\n        /* \"#utility.yul\":965:989   */\n      tag_39\n      jump\t// in\n    tag_38:\n        /* \"#utility.yul\":954:989   */\n      swap1\n      pop\n        /* \"#utility.yul\":899:995   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1001:1091   */\n    tag_31:\n        /* \"#utility.yul\":1035:1042   */\n      0x00\n        /* \"#utility.yul\":1078:1083   */\n      dup2\n        /* \"#utility.yul\":1071:1084   */\n      iszero\n        /* \"#utility.yul\":1064:1085   */\n      iszero\n        /* \"#utility.yul\":1053:1085   */\n      swap1\n      pop\n        /* \"#utility.yul\":1001:1091   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1097:1223   */\n    tag_39:\n        /* \"#utility.yul\":1134:1141   */\n      0x00\n        /* \"#utility.yul\":1174:1216   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1167:1172   */\n      dup3\n        /* \"#utility.yul\":1163:1217   */\n      and\n        /* \"#utility.yul\":1152:1217   */\n      swap1\n      pop\n        /* \"#utility.yul\":1097:1223   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1352:1469   */\n    tag_26:\n        /* \"#utility.yul\":1461:1462   */\n      0x00\n        /* \"#utility.yul\":1458:1459   */\n      dup1\n        /* \"#utility.yul\":1451:1463   */\n      revert\n        /* \"#utility.yul\":1475:1597   */\n    tag_22:\n        /* \"#utility.yul\":1548:1572   */\n      tag_46\n        /* \"#utility.yul\":1566:1571   */\n      dup2\n        /* \"#utility.yul\":1548:1572   */\n      tag_36\n      jump\t// in\n    tag_46:\n        /* \"#utility.yul\":1541:1546   */\n      dup2\n        /* \"#utility.yul\":1538:1573   */\n      eq\n        /* \"#utility.yul\":1528:1591   */\n      tag_47\n      jumpi\n        /* \"#utility.yul\":1587:1588   */\n      0x00\n        /* \"#utility.yul\":1584:1585   */\n      dup1\n        /* \"#utility.yul\":1577:1589   */\n      revert\n        /* \"#utility.yul\":1528:1591   */\n    tag_47:\n        /* \"#utility.yul\":1475:1597   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e36e758eb5b30ecb98e7a90535c6c4fbef81d691d33b8cc5223e6b55f0e4b0fb64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_20": {
									"entryPoint": null,
									"id": 20,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600073b2f8c60b26a53ae960536333311cb4a04f519084905060016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506102268061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638c48deb51461003b578063e8c61e191461006b575b600080fd5b6100556004803603810190610050919061013f565b610087565b604051610062919061017b565b60405180910390f35b6100856004803603810190610080919061013f565b6100e3565b005b600060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156100d957600190506100de565b600090505b919050565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600081359050610139816101d9565b92915050565b600060208284031215610155576101546101d4565b5b60006101638482850161012a565b91505092915050565b610175816101a8565b82525050565b6000602082019050610190600083018461016c565b92915050565b60006101a1826101b4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6101e281610196565b81146101ed57600080fd5b5056fea2646970667358221220e36e758eb5b30ecb98e7a90535c6c4fbef81d691d33b8cc5223e6b55f0e4b0fb64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH20 0xB2F8C60B26A53AE960536333311CB4A04F519084 SWAP1 POP PUSH1 0x1 PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP PUSH2 0x226 DUP1 PUSH2 0x7E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C48DEB5 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xE8C61E19 EQ PUSH2 0x6B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x13F JUMP JUMPDEST PUSH2 0x87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x62 SWAP2 SWAP1 PUSH2 0x17B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x85 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x80 SWAP2 SWAP1 PUSH2 0x13F JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0xD9 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xDE JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x139 DUP2 PUSH2 0x1D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x155 JUMPI PUSH2 0x154 PUSH2 0x1D4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x163 DUP5 DUP3 DUP6 ADD PUSH2 0x12A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x175 DUP2 PUSH2 0x1A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x190 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x16C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A1 DUP3 PUSH2 0x1B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2 DUP2 PUSH2 0x196 JUMP JUMPDEST DUP2 EQ PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 PUSH15 0x758EB5B30ECB98E7A90535C6C4FBEF DUP2 0xD6 SWAP2 0xD3 EXTCODESIZE DUP13 0xC5 0x22 RETURNDATACOPY PUSH12 0x55F0E4B0FB64736F6C634300 ADDMOD SMOD STOP CALLER ",
							"sourceMap": "174:794:0:-:0;;;282:119;;;;;;;;;;307:9;319:42;307:54;;392:1;372:14;:17;387:1;372:17;;;;;;;;;;;;;;;:21;;;;296:105;174:794;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_is_whitelist_40": {
									"entryPoint": 135,
									"id": 40,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@add_whitelist_52": {
									"entryPoint": 227,
									"id": 52,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 298,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 319,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 364,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 379,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 406,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 424,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 436,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 468,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 473,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1600:3",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:3"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:3",
														"type": ""
													}
												],
												"src": "7:139:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "218:263:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "264:83:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "266:77:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "266:79:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "266:79:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "239:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "248:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "235:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "235:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "260:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "231:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "231:32:3"
															},
															"nodeType": "YulIf",
															"src": "228:119:3"
														},
														{
															"nodeType": "YulBlock",
															"src": "357:117:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "372:15:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "386:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "376:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "401:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "436:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "447:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "432:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "432:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "456:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "411:20:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "411:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "401:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "188:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "199:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "211:6:3",
														"type": ""
													}
												],
												"src": "152:329:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "546:50:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "563:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "583:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "568:14:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "568:21:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "556:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "556:34:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "556:34:3"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "534:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "541:3:3",
														"type": ""
													}
												],
												"src": "487:109:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "694:118:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "704:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "716:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "727:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "712:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "712:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "704:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "778:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "791:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "802:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "787:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "787:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "740:37:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "740:65:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "740:65:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "666:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "678:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "689:4:3",
														"type": ""
													}
												],
												"src": "602:210:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "858:35:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "868:19:3",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "884:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "878:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "878:9:3"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "868:6:3"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "851:6:3",
														"type": ""
													}
												],
												"src": "818:75:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "944:51:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "954:35:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "983:5:3"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "965:17:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "965:24:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "954:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "926:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "936:7:3",
														"type": ""
													}
												],
												"src": "899:96:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1043:48:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1053:32:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1078:5:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1071:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1071:13:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1064:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1064:21:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1053:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1025:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1035:7:3",
														"type": ""
													}
												],
												"src": "1001:90:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1142:81:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1152:65:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1167:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1174:42:3",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1163:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1163:54:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1152:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1124:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1134:7:3",
														"type": ""
													}
												],
												"src": "1097:126:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1318:28:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1335:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1338:1:3",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1328:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1328:12:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1328:12:3"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "1229:117:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1441:28:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1458:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1461:1:3",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1451:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1451:12:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1451:12:3"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "1352:117:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1518:79:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1575:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1584:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1587:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1577:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1577:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1577:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1541:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1566:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1548:17:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1548:24:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1538:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1538:35:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1531:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1531:43:3"
															},
															"nodeType": "YulIf",
															"src": "1528:63:3"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1511:5:3",
														"type": ""
													}
												],
												"src": "1475:122:3"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100365760003560e01c80638c48deb51461003b578063e8c61e191461006b575b600080fd5b6100556004803603810190610050919061013f565b610087565b604051610062919061017b565b60405180910390f35b6100856004803603810190610080919061013f565b6100e3565b005b600060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156100d957600190506100de565b600090505b919050565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600081359050610139816101d9565b92915050565b600060208284031215610155576101546101d4565b5b60006101638482850161012a565b91505092915050565b610175816101a8565b82525050565b6000602082019050610190600083018461016c565b92915050565b60006101a1826101b4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6101e281610196565b81146101ed57600080fd5b5056fea2646970667358221220e36e758eb5b30ecb98e7a90535c6c4fbef81d691d33b8cc5223e6b55f0e4b0fb64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C48DEB5 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xE8C61E19 EQ PUSH2 0x6B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x13F JUMP JUMPDEST PUSH2 0x87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x62 SWAP2 SWAP1 PUSH2 0x17B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x85 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x80 SWAP2 SWAP1 PUSH2 0x13F JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0xD9 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xDE JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x139 DUP2 PUSH2 0x1D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x155 JUMPI PUSH2 0x154 PUSH2 0x1D4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x163 DUP5 DUP3 DUP6 ADD PUSH2 0x12A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x175 DUP2 PUSH2 0x1A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x190 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x16C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A1 DUP3 PUSH2 0x1B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2 DUP2 PUSH2 0x196 JUMP JUMPDEST DUP2 EQ PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 PUSH15 0x758EB5B30ECB98E7A90535C6C4FBEF DUP2 0xD6 SWAP2 0xD3 EXTCODESIZE DUP13 0xC5 0x22 RETURNDATACOPY PUSH12 0x55F0E4B0FB64736F6C634300 ADDMOD SMOD STOP CALLER ",
							"sourceMap": "174:794:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;409:221;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;638:86;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;409:221;466:4;510:1;486:14;:20;501:4;486:20;;;;;;;;;;;;;;;;:25;482:141;;;544:4;537:11;;;;482:141;606:5;599:12;;409:221;;;;:::o;638:86::-;715:1;692:14;:20;707:4;692:20;;;;;;;;;;;;;;;:24;;;;638:86;:::o;7:139:3:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:329::-;211:6;260:2;248:9;239:7;235:23;231:32;228:119;;;266:79;;:::i;:::-;228:119;386:1;411:53;456:7;447:6;436:9;432:22;411:53;:::i;:::-;401:63;;357:117;152:329;;;;:::o;487:109::-;568:21;583:5;568:21;:::i;:::-;563:3;556:34;487:109;;:::o;602:210::-;689:4;727:2;716:9;712:18;704:26;;740:65;802:1;791:9;787:17;778:6;740:65;:::i;:::-;602:210;;;;:::o;899:96::-;936:7;965:24;983:5;965:24;:::i;:::-;954:35;;899:96;;;:::o;1001:90::-;1035:7;1078:5;1071:13;1064:21;1053:32;;1001:90;;;:::o;1097:126::-;1134:7;1174:42;1167:5;1163:54;1152:65;;1097:126;;;:::o;1352:117::-;1461:1;1458;1451:12;1475:122;1548:24;1566:5;1548:24;:::i;:::-;1541:5;1538:35;1528:63;;1587:1;1584;1577:12;1528:63;1475:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "110000",
								"executionCost": "22376",
								"totalCost": "132376"
							},
							"external": {
								"_is_whitelist(address)": "2862",
								"add_whitelist(address)": "22659"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 174,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 174,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 174,
									"end": 968,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 282,
									"end": 401,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 282,
									"end": 401,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 282,
									"end": 401,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 282,
									"end": 401,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 282,
									"end": 401,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 282,
									"end": 401,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 282,
									"end": 401,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 282,
									"end": 401,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 282,
									"end": 401,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 282,
									"end": 401,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 282,
									"end": 401,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 307,
									"end": 316,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 361,
									"name": "PUSH",
									"source": 0,
									"value": "B2F8C60B26A53AE960536333311CB4A04F519084"
								},
								{
									"begin": 307,
									"end": 361,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 307,
									"end": 361,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 392,
									"end": 393,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 372,
									"end": 386,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 372,
									"end": 389,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 387,
									"end": 388,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 372,
									"end": 389,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 372,
									"end": 389,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 372,
									"end": 389,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 372,
									"end": 389,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 372,
									"end": 389,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 372,
									"end": 389,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 372,
									"end": 393,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 372,
									"end": 393,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 372,
									"end": 393,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 372,
									"end": 393,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 296,
									"end": 401,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 174,
									"end": 968,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 174,
									"end": 968,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 174,
									"end": 968,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 174,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 174,
									"end": 968,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 174,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 174,
									"end": 968,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e36e758eb5b30ecb98e7a90535c6c4fbef81d691d33b8cc5223e6b55f0e4b0fb64736f6c63430008070033",
									".code": [
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "8C48DEB5"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "E8C61E19"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 968,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 174,
											"end": 968,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 466,
											"end": 470,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 511,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 486,
											"end": 500,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 486,
											"end": 506,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 505,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 486,
											"end": 506,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 486,
											"end": 506,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 486,
											"end": 506,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 486,
											"end": 506,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 486,
											"end": 506,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 486,
											"end": 506,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 482,
											"end": 623,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 482,
											"end": 623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 482,
											"end": 623,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 544,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 537,
											"end": 548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 537,
											"end": 548,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 537,
											"end": 548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 537,
											"end": 548,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 482,
											"end": 623,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 482,
											"end": 623,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 606,
											"end": 611,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 599,
											"end": 611,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 599,
											"end": 611,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 409,
											"end": 630,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 638,
											"end": 724,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 715,
											"end": 716,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 692,
											"end": 706,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 692,
											"end": 712,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 707,
											"end": 711,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 692,
											"end": 712,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 692,
											"end": 712,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 692,
											"end": 712,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 692,
											"end": 712,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 692,
											"end": 712,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 692,
											"end": 712,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 692,
											"end": 716,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 692,
											"end": 716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 692,
											"end": 716,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 692,
											"end": 716,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 638,
											"end": 724,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 481,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 152,
											"end": 481,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 211,
											"end": 217,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 260,
											"end": 262,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 248,
											"end": 257,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 239,
											"end": 246,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 235,
											"end": 258,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 231,
											"end": 263,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 228,
											"end": 347,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 228,
											"end": 347,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 228,
											"end": 347,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 266,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 266,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 266,
											"end": 345,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 266,
											"end": 345,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 266,
											"end": 345,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 228,
											"end": 347,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 228,
											"end": 347,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 386,
											"end": 387,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 464,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 456,
											"end": 463,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 447,
											"end": 453,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 436,
											"end": 445,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 432,
											"end": 454,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 411,
											"end": 464,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 411,
											"end": 464,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 411,
											"end": 464,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 411,
											"end": 464,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 401,
											"end": 464,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 401,
											"end": 464,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 357,
											"end": 474,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 152,
											"end": 481,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 152,
											"end": 481,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 152,
											"end": 481,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 152,
											"end": 481,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 152,
											"end": 481,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 487,
											"end": 596,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 487,
											"end": 596,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 568,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 583,
											"end": 588,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 568,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 568,
											"end": 589,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 568,
											"end": 589,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 568,
											"end": 589,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 563,
											"end": 566,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 556,
											"end": 590,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 487,
											"end": 596,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 487,
											"end": 596,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 487,
											"end": 596,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 602,
											"end": 812,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 602,
											"end": 812,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 689,
											"end": 693,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 729,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 716,
											"end": 725,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 712,
											"end": 730,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 704,
											"end": 730,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 704,
											"end": 730,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 740,
											"end": 805,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 802,
											"end": 803,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 791,
											"end": 800,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 787,
											"end": 804,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 778,
											"end": 784,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 740,
											"end": 805,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 740,
											"end": 805,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 740,
											"end": 805,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 740,
											"end": 805,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 602,
											"end": 812,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 602,
											"end": 812,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 602,
											"end": 812,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 602,
											"end": 812,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 602,
											"end": 812,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 899,
											"end": 995,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 899,
											"end": 995,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 936,
											"end": 943,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 983,
											"end": 988,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 965,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 965,
											"end": 989,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 965,
											"end": 989,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 965,
											"end": 989,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 954,
											"end": 989,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 954,
											"end": 989,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 899,
											"end": 995,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 899,
											"end": 995,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 899,
											"end": 995,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 899,
											"end": 995,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1001,
											"end": 1091,
											"name": "tag",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 1001,
											"end": 1091,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1035,
											"end": 1042,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1078,
											"end": 1083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1071,
											"end": 1084,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1064,
											"end": 1085,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1053,
											"end": 1085,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1053,
											"end": 1085,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1001,
											"end": 1091,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1001,
											"end": 1091,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1001,
											"end": 1091,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1001,
											"end": 1091,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1097,
											"end": 1223,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 1097,
											"end": 1223,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1134,
											"end": 1141,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1174,
											"end": 1216,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1167,
											"end": 1172,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1163,
											"end": 1217,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1152,
											"end": 1217,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1152,
											"end": 1217,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1097,
											"end": 1223,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1097,
											"end": 1223,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1097,
											"end": 1223,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1097,
											"end": 1223,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1352,
											"end": 1469,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1352,
											"end": 1469,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1461,
											"end": 1462,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1458,
											"end": 1459,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1463,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1475,
											"end": 1597,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1475,
											"end": 1597,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1548,
											"end": 1572,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1566,
											"end": 1571,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1548,
											"end": 1572,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 1548,
											"end": 1572,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1548,
											"end": 1572,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1548,
											"end": 1572,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1541,
											"end": 1546,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1538,
											"end": 1573,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1528,
											"end": 1591,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1528,
											"end": 1591,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1588,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1584,
											"end": 1585,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1577,
											"end": 1589,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1528,
											"end": 1591,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1528,
											"end": 1591,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1475,
											"end": 1597,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1475,
											"end": 1597,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_is_whitelist(address)": "8c48deb5",
							"add_whitelist(address)": "e8c61e19"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"_is_whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"add_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Whitelist.sol\":\"Storage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Whitelist.sol\":{\"keccak256\":\"0x65a6db96b4dc82bd705fb2be9b5e22ec24275ecc1db9da7b7039bde9fac3ba9e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://141cad3a63ca99d8e76834acb1878c312b19b8878671d791980656c21291dc6f\",\"dweb:/ipfs/QmcxaQDhFn17hfJFQFKL3vk5oUwSFzooNK74dTDR3cfgbH\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "Whitelist.sol:Storage",
								"label": "whitelist_addr",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 61,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"Whitelist.sol": {
				"ast": {
					"absolutePath": "Whitelist.sol",
					"exportedSymbols": {
						"Context": [
							188
						],
						"Ownable": [
							166
						],
						"Storage": [
							53
						]
					},
					"id": 54,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
							"id": 1,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 54,
							"sourceUnit": 167,
							"src": "38:105:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"id": 2,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "147:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 53,
							"linearizedBaseContracts": [
								53
							],
							"name": "Storage",
							"nameLocation": "183:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 6,
									"mutability": "mutable",
									"name": "whitelist_addr",
									"nameLocation": "234:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 53,
									"src": "198:50:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 5,
										"keyType": {
											"id": 3,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "206:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "198:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 4,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "217:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 19,
										"nodeType": "Block",
										"src": "296:105:0",
										"statements": [
											{
												"assignments": [
													10
												],
												"declarations": [
													{
														"constant": false,
														"id": 10,
														"mutability": "mutable",
														"name": "a",
														"nameLocation": "315:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 19,
														"src": "307:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 9,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "307:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 12,
												"initialValue": {
													"hexValue": "307862326638633630623236613533416539363035333633333333313143423461303466353139303834",
													"id": 11,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "319:42:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"value": "0xb2f8c60b26a53Ae960536333311CB4a04f519084"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "307:54:0"
											},
											{
												"expression": {
													"id": 17,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 13,
															"name": "whitelist_addr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 6,
															"src": "372:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 15,
														"indexExpression": {
															"id": 14,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 10,
															"src": "387:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "372:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "392:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "372:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 18,
												"nodeType": "ExpressionStatement",
												"src": "372:21:0"
											}
										]
									},
									"id": 20,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "293:2:0"
									},
									"returnParameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "296:0:0"
									},
									"scope": 53,
									"src": "282:119:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "471:159:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 31,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 27,
															"name": "whitelist_addr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 6,
															"src": "486:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 29,
														"indexExpression": {
															"id": 28,
															"name": "addr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 22,
															"src": "501:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "486:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 30,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "510:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "486:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 37,
													"nodeType": "Block",
													"src": "584:39:0",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 35,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "606:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 26,
															"id": 36,
															"nodeType": "Return",
															"src": "599:12:0"
														}
													]
												},
												"id": 38,
												"nodeType": "IfStatement",
												"src": "482:141:0",
												"trueBody": {
													"id": 34,
													"nodeType": "Block",
													"src": "522:38:0",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "544:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 26,
															"id": 33,
															"nodeType": "Return",
															"src": "537:11:0"
														}
													]
												}
											}
										]
									},
									"functionSelector": "8c48deb5",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_is_whitelist",
									"nameLocation": "418:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "440:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "432:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "432:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "431:14:0"
									},
									"returnParameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "466:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 24,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "466:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "465:6:0"
									},
									"scope": 53,
									"src": "409:221:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 51,
										"nodeType": "Block",
										"src": "681:43:0",
										"statements": [
											{
												"expression": {
													"id": 49,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 45,
															"name": "whitelist_addr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 6,
															"src": "692:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 47,
														"indexExpression": {
															"id": 46,
															"name": "addr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 42,
															"src": "707:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "692:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 48,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "715:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "692:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 50,
												"nodeType": "ExpressionStatement",
												"src": "692:24:0"
											}
										]
									},
									"functionSelector": "e8c61e19",
									"id": 52,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add_whitelist",
									"nameLocation": "647:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "669:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "661:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 41,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:14:0"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "681:0:0"
									},
									"scope": 53,
									"src": "638:86:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 54,
							"src": "174:794:0",
							"usedErrors": []
						}
					],
					"src": "38:930:0"
				},
				"id": 0
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							188
						],
						"Ownable": [
							166
						]
					},
					"id": 167,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 55,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:1"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 56,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 167,
							"sourceUnit": 189,
							"src": "127:30:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 58,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 188,
										"src": "683:7:1"
									},
									"id": 59,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 57,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:1",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 166,
							"linearizedBaseContracts": [
								166,
								188
							],
							"name": "Ownable",
							"nameLocation": "672:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 61,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "697:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 60,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 67,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "753:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "784:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:1"
									},
									"src": "726:84:1"
								},
								{
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "926:49:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 72,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "955:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 71,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "936:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 75,
												"nodeType": "ExpressionStatement",
												"src": "936:32:1"
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:1",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 77,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:1"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:1"
									},
									"scope": 166,
									"src": "912:63:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 84,
										"nodeType": "Block",
										"src": "1084:41:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 80,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 108,
														"src": "1094:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 81,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 82,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:1"
											},
											{
												"id": 83,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:1"
											}
										]
									},
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:1",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 85,
									"name": "onlyOwner",
									"nameLocation": "1072:9:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:1"
									},
									"src": "1063:62:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 93,
										"nodeType": "Block",
										"src": "1256:30:1",
										"statements": [
											{
												"expression": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 61,
													"src": "1273:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 90,
												"id": 92,
												"nodeType": "Return",
												"src": "1266:13:1"
											}
										]
									},
									"documentation": {
										"id": 86,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:1",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 94,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:1"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "1247:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:1"
									},
									"scope": 166,
									"src": "1201:85:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 107,
										"nodeType": "Block",
										"src": "1404:85:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 99,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 94,
																	"src": "1422:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 100,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 101,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 178,
																	"src": "1433:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 102,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 104,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 98,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 106,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:1"
											}
										]
									},
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:1",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 108,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:1"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:1"
									},
									"scope": 166,
									"src": "1359:130:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 121,
										"nodeType": "Block",
										"src": "1885:47:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 116,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 115,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 118,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 114,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "1895:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 120,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:1"
											}
										]
									},
									"documentation": {
										"id": 109,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:1",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 122,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 112,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 111,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 85,
												"src": "1875:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:1"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:1"
									},
									"returnParameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:1"
									},
									"scope": 166,
									"src": "1831:101:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 144,
										"nodeType": "Block",
										"src": "2151:128:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 131,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 125,
																"src": "2169:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 133,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 132,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 137,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 130,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 141,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 125,
															"src": "2263:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2244:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:1"
											}
										]
									},
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 145,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 128,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 127,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 85,
												"src": "2141:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:1"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "2108:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:1"
									},
									"returnParameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:1"
									},
									"scope": 166,
									"src": "2081:198:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "2496:124:1",
										"statements": [
											{
												"assignments": [
													152
												],
												"declarations": [
													{
														"constant": false,
														"id": 152,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 164,
														"src": "2506:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 151,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 154,
												"initialValue": {
													"id": 153,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 61,
													"src": "2525:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:1"
											},
											{
												"expression": {
													"id": 157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 155,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 61,
														"src": "2541:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 156,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 148,
														"src": "2550:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 158,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 160,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 152,
															"src": "2594:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 161,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 148,
															"src": "2604:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 159,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "2573:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 163,
												"nodeType": "EmitStatement",
												"src": "2568:45:1"
											}
										]
									},
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "2461:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:1"
									},
									"returnParameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:1"
									},
									"scope": 166,
									"src": "2433:187:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 167,
							"src": "654:1968:1",
							"usedErrors": []
						}
					],
					"src": "102:2521:1"
				},
				"id": 1
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							188
						]
					},
					"id": 189,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 168,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 169,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:2",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 188,
							"linearizedBaseContracts": [
								188
							],
							"name": "Context",
							"nameLocation": "626:7:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 177,
										"nodeType": "Block",
										"src": "702:34:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 174,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 173,
												"id": 176,
												"nodeType": "Return",
												"src": "712:17:2"
											}
										]
									},
									"id": 178,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:2"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "693:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:2"
									},
									"scope": 188,
									"src": "640:96:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 186,
										"nodeType": "Block",
										"src": "809:32:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 183,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 182,
												"id": 185,
												"nodeType": "Return",
												"src": "819:15:2"
											}
										]
									},
									"id": 187,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:2"
									},
									"returnParameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "793:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 180,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:2"
									},
									"scope": 188,
									"src": "742:99:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 189,
							"src": "608:235:2",
							"usedErrors": []
						}
					],
					"src": "86:758:2"
				},
				"id": 2
			}
		}
	}
}