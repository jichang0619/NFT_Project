{
	"id": "9cc8f0e553566cf2658f4c208dbb9718",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\n     * See {_beforeConsecutiveTokenTransfer}.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\n     * See {_afterConsecutiveTokenTransfer}.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called before \"consecutive token transfers\" as defined in ERC2309 and implemented in\n     * {ERC721Consecutive}.\n     * Calling conditions are similar to {_beforeTokenTransfer}.\n     */\n    function _beforeConsecutiveTokenTransfer(\n        address from,\n        address to,\n        uint256, /*first*/\n        uint96 size\n    ) internal virtual {\n        if (from != address(0)) {\n            _balances[from] -= size;\n        }\n        if (to != address(0)) {\n            _balances[to] += size;\n        }\n    }\n\n    /**\n     * @dev Hook that is called after \"consecutive token transfers\" as defined in ERC2309 and implemented in\n     * {ERC721Consecutive}.\n     * Calling conditions are similar to {_afterTokenTransfer}.\n     */\n    function _afterConsecutiveTokenTransfer(\n        address, /*from*/\n        address, /*to*/\n        uint256, /*first*/\n        uint96 /*size*/\n    ) internal virtual {}\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
				"ERC721": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":628:17166  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {... */\n  mstore(0x40, 0x80)\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1390:1503  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1464:1469  name_ */\n  dup2\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1456:1461  _name */\n  0x00\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1456:1469  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_6\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1489:1496  symbol_ */\n  dup1\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1479:1486  _symbol */\n  0x01\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1479:1496  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_8\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1390:1503  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":628:17166  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {... */\n  jump(tag_9)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_12)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_12)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_12\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\ntag_12:\n  pop\n  swap1\n  pop\n  tag_17\n  swap2\n  swap1\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_20\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_19)\ntag_20:\n  pop\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":7:428   */\ntag_22:\n    /* \"#utility.yul\":96:101   */\n  0x00\n    /* \"#utility.yul\":121:187   */\n  tag_24\n    /* \"#utility.yul\":137:186   */\n  tag_25\n    /* \"#utility.yul\":179:185   */\n  dup5\n    /* \"#utility.yul\":137:186   */\n  tag_26\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":121:187   */\n  tag_27\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":112:187   */\n  swap1\n  pop\n    /* \"#utility.yul\":210:216   */\n  dup3\n    /* \"#utility.yul\":203:208   */\n  dup2\n    /* \"#utility.yul\":196:217   */\n  mstore\n    /* \"#utility.yul\":248:252   */\n  0x20\n    /* \"#utility.yul\":241:246   */\n  dup2\n    /* \"#utility.yul\":237:253   */\n  add\n    /* \"#utility.yul\":286:289   */\n  dup5\n    /* \"#utility.yul\":277:283   */\n  dup5\n    /* \"#utility.yul\":272:275   */\n  dup5\n    /* \"#utility.yul\":268:284   */\n  add\n    /* \"#utility.yul\":265:290   */\n  gt\n    /* \"#utility.yul\":262:374   */\n  iszero\n  tag_28\n  jumpi\n    /* \"#utility.yul\":293:372   */\n  tag_29\n  tag_30\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":262:374   */\ntag_28:\n    /* \"#utility.yul\":383:422   */\n  tag_31\n    /* \"#utility.yul\":415:421   */\n  dup5\n    /* \"#utility.yul\":410:413   */\n  dup3\n    /* \"#utility.yul\":405:408   */\n  dup6\n    /* \"#utility.yul\":383:422   */\n  tag_32\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":102:428   */\n  pop\n    /* \"#utility.yul\":7:428   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":448:803   */\ntag_33:\n    /* \"#utility.yul\":515:520   */\n  0x00\n    /* \"#utility.yul\":564:567   */\n  dup3\n    /* \"#utility.yul\":557:561   */\n  0x1f\n    /* \"#utility.yul\":549:555   */\n  dup4\n    /* \"#utility.yul\":545:562   */\n  add\n    /* \"#utility.yul\":541:568   */\n  slt\n    /* \"#utility.yul\":531:653   */\n  tag_35\n  jumpi\n    /* \"#utility.yul\":572:651   */\n  tag_36\n  tag_37\n  jump\t// in\ntag_36:\n    /* \"#utility.yul\":531:653   */\ntag_35:\n    /* \"#utility.yul\":682:688   */\n  dup2\n    /* \"#utility.yul\":676:689   */\n  mload\n    /* \"#utility.yul\":707:797   */\n  tag_38\n    /* \"#utility.yul\":793:796   */\n  dup5\n    /* \"#utility.yul\":785:791   */\n  dup3\n    /* \"#utility.yul\":778:782   */\n  0x20\n    /* \"#utility.yul\":770:776   */\n  dup7\n    /* \"#utility.yul\":766:783   */\n  add\n    /* \"#utility.yul\":707:797   */\n  tag_22\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":698:797   */\n  swap2\n  pop\n    /* \"#utility.yul\":521:803   */\n  pop\n    /* \"#utility.yul\":448:803   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":809:1662   */\ntag_3:\n    /* \"#utility.yul\":908:914   */\n  0x00\n    /* \"#utility.yul\":916:922   */\n  dup1\n    /* \"#utility.yul\":965:967   */\n  0x40\n    /* \"#utility.yul\":953:962   */\n  dup4\n    /* \"#utility.yul\":944:951   */\n  dup6\n    /* \"#utility.yul\":940:963   */\n  sub\n    /* \"#utility.yul\":936:968   */\n  slt\n    /* \"#utility.yul\":933:1052   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":971:1050   */\n  tag_41\n  tag_42\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":933:1052   */\ntag_40:\n    /* \"#utility.yul\":1112:1113   */\n  0x00\n    /* \"#utility.yul\":1101:1110   */\n  dup4\n    /* \"#utility.yul\":1097:1114   */\n  add\n    /* \"#utility.yul\":1091:1115   */\n  mload\n    /* \"#utility.yul\":1142:1160   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1134:1140   */\n  dup2\n    /* \"#utility.yul\":1131:1161   */\n  gt\n    /* \"#utility.yul\":1128:1245   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1164:1243   */\n  tag_44\n  tag_45\n  jump\t// in\ntag_44:\n    /* \"#utility.yul\":1128:1245   */\ntag_43:\n    /* \"#utility.yul\":1269:1343   */\n  tag_46\n    /* \"#utility.yul\":1335:1342   */\n  dup6\n    /* \"#utility.yul\":1326:1332   */\n  dup3\n    /* \"#utility.yul\":1315:1324   */\n  dup7\n    /* \"#utility.yul\":1311:1333   */\n  add\n    /* \"#utility.yul\":1269:1343   */\n  tag_33\n  jump\t// in\ntag_46:\n    /* \"#utility.yul\":1259:1343   */\n  swap3\n  pop\n    /* \"#utility.yul\":1062:1353   */\n  pop\n    /* \"#utility.yul\":1413:1415   */\n  0x20\n    /* \"#utility.yul\":1402:1411   */\n  dup4\n    /* \"#utility.yul\":1398:1416   */\n  add\n    /* \"#utility.yul\":1392:1417   */\n  mload\n    /* \"#utility.yul\":1444:1462   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1436:1442   */\n  dup2\n    /* \"#utility.yul\":1433:1463   */\n  gt\n    /* \"#utility.yul\":1430:1547   */\n  iszero\n  tag_47\n  jumpi\n    /* \"#utility.yul\":1466:1545   */\n  tag_48\n  tag_45\n  jump\t// in\ntag_48:\n    /* \"#utility.yul\":1430:1547   */\ntag_47:\n    /* \"#utility.yul\":1571:1645   */\n  tag_49\n    /* \"#utility.yul\":1637:1644   */\n  dup6\n    /* \"#utility.yul\":1628:1634   */\n  dup3\n    /* \"#utility.yul\":1617:1626   */\n  dup7\n    /* \"#utility.yul\":1613:1635   */\n  add\n    /* \"#utility.yul\":1571:1645   */\n  tag_33\n  jump\t// in\ntag_49:\n    /* \"#utility.yul\":1561:1645   */\n  swap2\n  pop\n    /* \"#utility.yul\":1363:1655   */\n  pop\n    /* \"#utility.yul\":809:1662   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1668:1797   */\ntag_27:\n    /* \"#utility.yul\":1702:1708   */\n  0x00\n    /* \"#utility.yul\":1729:1749   */\n  tag_51\n  tag_52\n  jump\t// in\ntag_51:\n    /* \"#utility.yul\":1719:1749   */\n  swap1\n  pop\n    /* \"#utility.yul\":1758:1791   */\n  tag_53\n    /* \"#utility.yul\":1786:1790   */\n  dup3\n    /* \"#utility.yul\":1778:1784   */\n  dup3\n    /* \"#utility.yul\":1758:1791   */\n  tag_54\n  jump\t// in\ntag_53:\n    /* \"#utility.yul\":1668:1797   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1803:1878   */\ntag_52:\n    /* \"#utility.yul\":1836:1842   */\n  0x00\n    /* \"#utility.yul\":1869:1871   */\n  0x40\n    /* \"#utility.yul\":1863:1872   */\n  mload\n    /* \"#utility.yul\":1853:1872   */\n  swap1\n  pop\n    /* \"#utility.yul\":1803:1878   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":1884:2192   */\ntag_26:\n    /* \"#utility.yul\":1946:1950   */\n  0x00\n    /* \"#utility.yul\":2036:2054   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":2028:2034   */\n  dup3\n    /* \"#utility.yul\":2025:2055   */\n  gt\n    /* \"#utility.yul\":2022:2078   */\n  iszero\n  tag_57\n  jumpi\n    /* \"#utility.yul\":2058:2076   */\n  tag_58\n  tag_59\n  jump\t// in\ntag_58:\n    /* \"#utility.yul\":2022:2078   */\ntag_57:\n    /* \"#utility.yul\":2096:2125   */\n  tag_60\n    /* \"#utility.yul\":2118:2124   */\n  dup3\n    /* \"#utility.yul\":2096:2125   */\n  tag_61\n  jump\t// in\ntag_60:\n    /* \"#utility.yul\":2088:2125   */\n  swap1\n  pop\n    /* \"#utility.yul\":2180:2184   */\n  0x20\n    /* \"#utility.yul\":2174:2178   */\n  dup2\n    /* \"#utility.yul\":2170:2185   */\n  add\n    /* \"#utility.yul\":2162:2185   */\n  swap1\n  pop\n    /* \"#utility.yul\":1884:2192   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2198:2505   */\ntag_32:\n    /* \"#utility.yul\":2266:2267   */\n  0x00\n    /* \"#utility.yul\":2276:2389   */\ntag_63:\n    /* \"#utility.yul\":2290:2296   */\n  dup4\n    /* \"#utility.yul\":2287:2288   */\n  dup2\n    /* \"#utility.yul\":2284:2297   */\n  lt\n    /* \"#utility.yul\":2276:2389   */\n  iszero\n  tag_65\n  jumpi\n    /* \"#utility.yul\":2375:2376   */\n  dup1\n    /* \"#utility.yul\":2370:2373   */\n  dup3\n    /* \"#utility.yul\":2366:2377   */\n  add\n    /* \"#utility.yul\":2360:2378   */\n  mload\n    /* \"#utility.yul\":2356:2357   */\n  dup2\n    /* \"#utility.yul\":2351:2354   */\n  dup5\n    /* \"#utility.yul\":2347:2358   */\n  add\n    /* \"#utility.yul\":2340:2379   */\n  mstore\n    /* \"#utility.yul\":2312:2314   */\n  0x20\n    /* \"#utility.yul\":2309:2310   */\n  dup2\n    /* \"#utility.yul\":2305:2315   */\n  add\n    /* \"#utility.yul\":2300:2315   */\n  swap1\n  pop\n    /* \"#utility.yul\":2276:2389   */\n  jump(tag_63)\ntag_65:\n    /* \"#utility.yul\":2407:2413   */\n  dup4\n    /* \"#utility.yul\":2404:2405   */\n  dup2\n    /* \"#utility.yul\":2401:2414   */\n  gt\n    /* \"#utility.yul\":2398:2499   */\n  iszero\n  tag_66\n  jumpi\n    /* \"#utility.yul\":2487:2488   */\n  0x00\n    /* \"#utility.yul\":2478:2484   */\n  dup5\n    /* \"#utility.yul\":2473:2476   */\n  dup5\n    /* \"#utility.yul\":2469:2485   */\n  add\n    /* \"#utility.yul\":2462:2489   */\n  mstore\n    /* \"#utility.yul\":2398:2499   */\ntag_66:\n    /* \"#utility.yul\":2247:2505   */\n  pop\n    /* \"#utility.yul\":2198:2505   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2511:2831   */\ntag_11:\n    /* \"#utility.yul\":2555:2561   */\n  0x00\n    /* \"#utility.yul\":2592:2593   */\n  0x02\n    /* \"#utility.yul\":2586:2590   */\n  dup3\n    /* \"#utility.yul\":2582:2594   */\n  div\n    /* \"#utility.yul\":2572:2594   */\n  swap1\n  pop\n    /* \"#utility.yul\":2639:2640   */\n  0x01\n    /* \"#utility.yul\":2633:2637   */\n  dup3\n    /* \"#utility.yul\":2629:2641   */\n  and\n    /* \"#utility.yul\":2660:2678   */\n  dup1\n    /* \"#utility.yul\":2650:2731   */\n  tag_68\n  jumpi\n    /* \"#utility.yul\":2716:2720   */\n  0x7f\n    /* \"#utility.yul\":2708:2714   */\n  dup3\n    /* \"#utility.yul\":2704:2721   */\n  and\n    /* \"#utility.yul\":2694:2721   */\n  swap2\n  pop\n    /* \"#utility.yul\":2650:2731   */\ntag_68:\n    /* \"#utility.yul\":2778:2780   */\n  0x20\n    /* \"#utility.yul\":2770:2776   */\n  dup3\n    /* \"#utility.yul\":2767:2781   */\n  lt\n    /* \"#utility.yul\":2747:2765   */\n  dup2\n    /* \"#utility.yul\":2744:2782   */\n  eq\n    /* \"#utility.yul\":2741:2825   */\n  iszero\n  tag_69\n  jumpi\n    /* \"#utility.yul\":2797:2815   */\n  tag_70\n  tag_71\n  jump\t// in\ntag_70:\n    /* \"#utility.yul\":2741:2825   */\ntag_69:\n    /* \"#utility.yul\":2562:2831   */\n  pop\n    /* \"#utility.yul\":2511:2831   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2837:3118   */\ntag_54:\n    /* \"#utility.yul\":2920:2947   */\n  tag_73\n    /* \"#utility.yul\":2942:2946   */\n  dup3\n    /* \"#utility.yul\":2920:2947   */\n  tag_61\n  jump\t// in\ntag_73:\n    /* \"#utility.yul\":2912:2918   */\n  dup2\n    /* \"#utility.yul\":2908:2948   */\n  add\n    /* \"#utility.yul\":3050:3056   */\n  dup2\n    /* \"#utility.yul\":3038:3048   */\n  dup2\n    /* \"#utility.yul\":3035:3057   */\n  lt\n    /* \"#utility.yul\":3014:3032   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":3002:3012   */\n  dup3\n    /* \"#utility.yul\":2999:3033   */\n  gt\n    /* \"#utility.yul\":2996:3058   */\n  or\n    /* \"#utility.yul\":2993:3081   */\n  iszero\n  tag_74\n  jumpi\n    /* \"#utility.yul\":3061:3079   */\n  tag_75\n  tag_59\n  jump\t// in\ntag_75:\n    /* \"#utility.yul\":2993:3081   */\ntag_74:\n    /* \"#utility.yul\":3101:3111   */\n  dup1\n    /* \"#utility.yul\":3097:3099   */\n  0x40\n    /* \"#utility.yul\":3090:3112   */\n  mstore\n    /* \"#utility.yul\":2880:3118   */\n  pop\n    /* \"#utility.yul\":2837:3118   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3124:3304   */\ntag_71:\n    /* \"#utility.yul\":3172:3249   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":3169:3170   */\n  0x00\n    /* \"#utility.yul\":3162:3250   */\n  mstore\n    /* \"#utility.yul\":3269:3273   */\n  0x22\n    /* \"#utility.yul\":3266:3267   */\n  0x04\n    /* \"#utility.yul\":3259:3274   */\n  mstore\n    /* \"#utility.yul\":3293:3297   */\n  0x24\n    /* \"#utility.yul\":3290:3291   */\n  0x00\n    /* \"#utility.yul\":3283:3298   */\n  revert\n    /* \"#utility.yul\":3310:3490   */\ntag_59:\n    /* \"#utility.yul\":3358:3435   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":3355:3356   */\n  0x00\n    /* \"#utility.yul\":3348:3436   */\n  mstore\n    /* \"#utility.yul\":3455:3459   */\n  0x41\n    /* \"#utility.yul\":3452:3453   */\n  0x04\n    /* \"#utility.yul\":3445:3460   */\n  mstore\n    /* \"#utility.yul\":3479:3483   */\n  0x24\n    /* \"#utility.yul\":3476:3477   */\n  0x00\n    /* \"#utility.yul\":3469:3484   */\n  revert\n    /* \"#utility.yul\":3496:3613   */\ntag_37:\n    /* \"#utility.yul\":3605:3606   */\n  0x00\n    /* \"#utility.yul\":3602:3603   */\n  dup1\n    /* \"#utility.yul\":3595:3607   */\n  revert\n    /* \"#utility.yul\":3619:3736   */\ntag_30:\n    /* \"#utility.yul\":3728:3729   */\n  0x00\n    /* \"#utility.yul\":3725:3726   */\n  dup1\n    /* \"#utility.yul\":3718:3730   */\n  revert\n    /* \"#utility.yul\":3742:3859   */\ntag_45:\n    /* \"#utility.yul\":3851:3852   */\n  0x00\n    /* \"#utility.yul\":3848:3849   */\n  dup1\n    /* \"#utility.yul\":3841:3853   */\n  revert\n    /* \"#utility.yul\":3865:3982   */\ntag_42:\n    /* \"#utility.yul\":3974:3975   */\n  0x00\n    /* \"#utility.yul\":3971:3972   */\n  dup1\n    /* \"#utility.yul\":3964:3976   */\n  revert\n    /* \"#utility.yul\":3988:4090   */\ntag_61:\n    /* \"#utility.yul\":4029:4035   */\n  0x00\n    /* \"#utility.yul\":4080:4082   */\n  0x1f\n    /* \"#utility.yul\":4076:4083   */\n  not\n    /* \"#utility.yul\":4071:4073   */\n  0x1f\n    /* \"#utility.yul\":4064:4069   */\n  dup4\n    /* \"#utility.yul\":4060:4074   */\n  add\n    /* \"#utility.yul\":4056:4084   */\n  and\n    /* \"#utility.yul\":4046:4084   */\n  swap1\n  pop\n    /* \"#utility.yul\":3988:4090   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":628:17166  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {... */\ntag_9:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":628:17166  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6352211e\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xa22cb465\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x6352211e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1570:1870  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_18\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      tag_21\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2471:2569  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3935:4102  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_5:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3468:3874  function approve(address to, uint256 tokenId) public virtual override {... */\n    tag_6:\n      tag_34\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n      tag_37\n      jump\t// in\n    tag_34:\n      stop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4612:4938  function transferFrom(... */\n    tag_7:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n    tag_38:\n      stop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5004:5183  function safeTransferFrom(... */\n    tag_8:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_43:\n      tag_44\n      jump\t// in\n    tag_42:\n      stop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2190:2409  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_9:\n      tag_45\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_46\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_46:\n      tag_47\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1929:2133  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n    tag_10:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2633:2735  function symbol() public view virtual override returns (string memory) {... */\n    tag_11:\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_57\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4169:4322  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_12:\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_59\n      swap2\n      swap1\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n    tag_58:\n      stop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5249:5563  function safeTransferFrom(... */\n    tag_13:\n      tag_62\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_63\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n    tag_62:\n      stop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2801:3077  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_14:\n      tag_66\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_67\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_67:\n      tag_68\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      tag_69\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4388:4550  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_15:\n      tag_70\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_71\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_71:\n      tag_73\n      jump\t// in\n    tag_70:\n      mload(0x40)\n      tag_74\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_74:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1570:1870  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_21:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1672:1676  bool */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1722:1747  type(IERC721).interfaceId */\n      0x80ac58cd00000000000000000000000000000000000000000000000000000000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1707:1747  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1707:1718  interfaceId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1707:1747  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1707:1811  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_76\n      jumpi\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1778:1811  type(IERC721Metadata).interfaceId */\n      0x5b5e139f00000000000000000000000000000000000000000000000000000000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1763:1811  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1763:1774  interfaceId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1763:1811  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1707:1811  interfaceId == type(IERC721).interfaceId ||... */\n    tag_76:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1707:1863  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_77\n      jumpi\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1827:1863  super.supportsInterface(interfaceId) */\n      tag_78\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1851:1862  interfaceId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1827:1850  super.supportsInterface */\n      tag_79\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1827:1863  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_78:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1707:1863  interfaceId == type(IERC721).interfaceId ||... */\n    tag_77:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1688:1863  return... */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1570:1870  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2471:2569  function name() public view virtual override returns (string memory) {... */\n    tag_25:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2525:2538  string memory */\n      0x60\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2557:2562  _name */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2550:2562  return _name */\n      dup1\n      sload\n      tag_81\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_83\n      swap1\n      tag_82\n      jump\t// in\n    tag_83:\n      dup1\n      iszero\n      tag_84\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_85\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_84)\n    tag_85:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_86:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_86\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_84:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2471:2569  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3935:4102  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_31:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4011:4018  address */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4030:4053  _requireMinted(tokenId) */\n      tag_88\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4045:4052  tokenId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4030:4044  _requireMinted */\n      tag_89\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4030:4053  _requireMinted(tokenId) */\n      jump\t// in\n    tag_88:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4071:4086  _tokenApprovals */\n      0x04\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4071:4095  _tokenApprovals[tokenId] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4087:4094  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4071:4095  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4064:4095  return _tokenApprovals[tokenId] */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3935:4102  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3468:3874  function approve(address to, uint256 tokenId) public virtual override {... */\n    tag_37:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3548:3561  address owner */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3564:3587  ERC721.ownerOf(tokenId) */\n      tag_91\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3579:3586  tokenId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3564:3578  ERC721.ownerOf */\n      tag_47\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3564:3587  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_91:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3548:3587  address owner = ERC721.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3611:3616  owner */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3605:3616  to != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3605:3607  to */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3605:3616  to != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3597:3654  require(to != owner, \"ERC721: approval to current owner\") */\n      tag_92\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_93\n      swap1\n      tag_94\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_92:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3702:3707  owner */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3686:3707  _msgSender() == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3686:3698  _msgSender() */\n      tag_95\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3686:3696  _msgSender */\n      tag_96\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3686:3698  _msgSender() */\n      jump\t// in\n    tag_95:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3686:3707  _msgSender() == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3686:3748  _msgSender() == owner || isApprovedForAll(owner, _msgSender()) */\n      dup1\n      tag_97\n      jumpi\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3711:3748  isApprovedForAll(owner, _msgSender()) */\n      tag_98\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3728:3733  owner */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3735:3747  _msgSender() */\n      tag_99\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3735:3745  _msgSender */\n      tag_96\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3735:3747  _msgSender() */\n      jump\t// in\n    tag_99:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3711:3727  isApprovedForAll */\n      tag_73\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3711:3748  isApprovedForAll(owner, _msgSender()) */\n      jump\t// in\n    tag_98:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3686:3748  _msgSender() == owner || isApprovedForAll(owner, _msgSender()) */\n    tag_97:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3665:3835  require(... */\n      tag_100\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_101\n      swap1\n      tag_102\n      jump\t// in\n    tag_101:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_100:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3846:3867  _approve(to, tokenId) */\n      tag_103\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3855:3857  to */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3859:3866  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3846:3854  _approve */\n      tag_104\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3846:3867  _approve(to, tokenId) */\n      jump\t// in\n    tag_103:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3538:3874  {... */\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3468:3874  function approve(address to, uint256 tokenId) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4612:4938  function transferFrom(... */\n    tag_41:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4801:4842  _isApprovedOrOwner(_msgSender(), tokenId) */\n      tag_106\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4820:4832  _msgSender() */\n      tag_107\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4820:4830  _msgSender */\n      tag_96\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4820:4832  _msgSender() */\n      jump\t// in\n    tag_107:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4834:4841  tokenId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4801:4819  _isApprovedOrOwner */\n      tag_108\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4801:4842  _isApprovedOrOwner(_msgSender(), tokenId) */\n      jump\t// in\n    tag_106:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4793:4892  require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4903:4931  _transfer(from, to, tokenId) */\n      tag_112\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4913:4917  from */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4919:4921  to */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4923:4930  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4903:4912  _transfer */\n      tag_113\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4903:4931  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_112:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4612:4938  function transferFrom(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5004:5183  function safeTransferFrom(... */\n    tag_44:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5137:5176  safeTransferFrom(from, to, tokenId, \"\") */\n      tag_115\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5154:5158  from */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5160:5162  to */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5164:5171  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5137:5176  safeTransferFrom(from, to, tokenId, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5137:5153  safeTransferFrom */\n      tag_65\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5137:5176  safeTransferFrom(from, to, tokenId, \"\") */\n      jump\t// in\n    tag_115:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5004:5183  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2190:2409  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_47:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2262:2269  address */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2281:2294  address owner */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2297:2314  _ownerOf(tokenId) */\n      tag_117\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2306:2313  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2297:2305  _ownerOf */\n      tag_118\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2297:2314  _ownerOf(tokenId) */\n      jump\t// in\n    tag_117:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2281:2314  address owner = _ownerOf(tokenId) */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2349:2350  0 */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2332:2351  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2332:2337  owner */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2332:2351  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2324:2380  require(owner != address(0), \"ERC721: invalid token ID\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2397:2402  owner */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2390:2402  return owner */\n      swap2\n      pop\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2190:2409  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1929:2133  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n    tag_52:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2001:2008  uint256 */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2045:2046  0 */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2028:2047  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2028:2033  owner */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2028:2047  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2020:2093  require(owner != address(0), \"ERC721: address zero is not a valid owner\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_124:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_123:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2110:2119  _balances */\n      0x03\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2110:2126  _balances[owner] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2120:2125  owner */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2110:2126  _balances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2103:2126  return _balances[owner] */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1929:2133  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2633:2735  function symbol() public view virtual override returns (string memory) {... */\n    tag_56:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2689:2702  string memory */\n      0x60\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2721:2728  _symbol */\n      0x01\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2714:2728  return _symbol */\n      dup1\n      sload\n      tag_127\n      swap1\n      tag_82\n      jump\t// in\n    tag_127:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_128\n      swap1\n      tag_82\n      jump\t// in\n    tag_128:\n      dup1\n      iszero\n      tag_129\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_130\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_129)\n    tag_130:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_131:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_131\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_129:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2633:2735  function symbol() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4169:4322  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_61:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4263:4315  _setApprovalForAll(_msgSender(), operator, approved) */\n      tag_133\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4282:4294  _msgSender() */\n      tag_134\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4282:4292  _msgSender */\n      tag_96\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4282:4294  _msgSender() */\n      jump\t// in\n    tag_134:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4296:4304  operator */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4306:4314  approved */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4263:4281  _setApprovalForAll */\n      tag_135\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4263:4315  _setApprovalForAll(_msgSender(), operator, approved) */\n      jump\t// in\n    tag_133:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4169:4322  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5249:5563  function safeTransferFrom(... */\n    tag_65:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5417:5458  _isApprovedOrOwner(_msgSender(), tokenId) */\n      tag_137\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5436:5448  _msgSender() */\n      tag_138\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5436:5446  _msgSender */\n      tag_96\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5436:5448  _msgSender() */\n      jump\t// in\n    tag_138:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5450:5457  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5417:5435  _isApprovedOrOwner */\n      tag_108\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5417:5458  _isApprovedOrOwner(_msgSender(), tokenId) */\n      jump\t// in\n    tag_137:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5409:5508  require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\") */\n      tag_139\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_111\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_139:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5518:5556  _safeTransfer(from, to, tokenId, data) */\n      tag_141\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5532:5536  from */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5538:5540  to */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5542:5549  tokenId */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5551:5555  data */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5518:5531  _safeTransfer */\n      tag_142\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5518:5556  _safeTransfer(from, to, tokenId, data) */\n      jump\t// in\n    tag_141:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5249:5563  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2801:3077  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_68:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2874:2887  string memory */\n      0x60\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2899:2922  _requireMinted(tokenId) */\n      tag_144\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2914:2921  tokenId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2899:2913  _requireMinted */\n      tag_89\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2899:2922  _requireMinted(tokenId) */\n      jump\t// in\n    tag_144:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2933:2954  string memory baseURI */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2957:2967  _baseURI() */\n      tag_145\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2957:2965  _baseURI */\n      tag_146\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2957:2967  _baseURI() */\n      jump\t// in\n    tag_145:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2933:2967  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3008:3009  0 */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2990:2997  baseURI */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2984:3005  bytes(baseURI).length */\n      mload\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2984:3009  bytes(baseURI).length > 0 */\n      gt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2984:3070  bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n      tag_147\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_148)\n    tag_147:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3036:3043  baseURI */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3045:3063  tokenId.toString() */\n      tag_149\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3045:3052  tokenId */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3045:3061  tokenId.toString */\n      tag_150\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3045:3063  tokenId.toString() */\n      jump\t// in\n    tag_149:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3019:3064  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_151\n      swap3\n      swap2\n      swap1\n      tag_152\n      jump\t// in\n    tag_151:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2984:3070  bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n    tag_148:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2977:3070  return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n      swap2\n      pop\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2801:3077  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4388:4550  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_73:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4485:4489  bool */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4508:4526  _operatorApprovals */\n      0x05\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4508:4533  _operatorApprovals[owner] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4527:4532  owner */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4508:4533  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4508:4543  _operatorApprovals[owner][operator] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4534:4542  operator */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4508:4543  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4501:4543  return _operatorApprovals[owner][operator] */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4388:4550  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_79:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":914:918  bool */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":952:977  type(IERC165).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":937:948  interfaceId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":930:977  return interfaceId == type(IERC165).interfaceId */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13448:13581  function _requireMinted(uint256 tokenId) internal view virtual {... */\n    tag_89:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13529:13545  _exists(tokenId) */\n      tag_156\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13537:13544  tokenId */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13529:13536  _exists */\n      tag_157\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13529:13545  _exists(tokenId) */\n      jump\t// in\n    tag_156:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13521:13574  require(_exists(tokenId), \"ERC721: invalid token ID\") */\n      tag_158\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_159\n      swap1\n      tag_121\n      jump\t// in\n    tag_159:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_158:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13448:13581  function _requireMinted(uint256 tokenId) internal view virtual {... */\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_96:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12750:12921  function _approve(address to, uint256 tokenId) internal virtual {... */\n    tag_104:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12851:12853  to */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12824:12839  _tokenApprovals */\n      0x04\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12824:12848  _tokenApprovals[tokenId] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12840:12847  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12824:12848  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12824:12853  _tokenApprovals[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12906:12913  tokenId */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12902:12904  to */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12868:12914  Approval(ERC721.ownerOf(tokenId), to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12877:12900  ERC721.ownerOf(tokenId) */\n      tag_162\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12892:12899  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12877:12891  ERC721.ownerOf */\n      tag_47\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12877:12900  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_162:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12868:12914  Approval(ERC721.ownerOf(tokenId), to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12750:12921  function _approve(address to, uint256 tokenId) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7540:7801  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_108:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7633:7637  bool */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7649:7662  address owner */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7665:7688  ERC721.ownerOf(tokenId) */\n      tag_164\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7680:7687  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7665:7679  ERC721.ownerOf */\n      tag_47\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7665:7688  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_164:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7649:7688  address owner = ERC721.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7717:7722  owner */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7706:7722  spender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7706:7713  spender */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7706:7722  spender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7706:7758  spender == owner || isApprovedForAll(owner, spender) */\n      dup1\n      tag_165\n      jumpi\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7726:7758  isApprovedForAll(owner, spender) */\n      tag_166\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7743:7748  owner */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7750:7757  spender */\n      dup6\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7726:7742  isApprovedForAll */\n      tag_73\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7726:7758  isApprovedForAll(owner, spender) */\n      jump\t// in\n    tag_166:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7706:7758  spender == owner || isApprovedForAll(owner, spender) */\n    tag_165:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7706:7793  spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender */\n      dup1\n      tag_167\n      jumpi\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7786:7793  spender */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7762:7793  getApproved(tokenId) == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7762:7782  getApproved(tokenId) */\n      tag_168\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7774:7781  tokenId */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7762:7773  getApproved */\n      tag_31\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7762:7782  getApproved(tokenId) */\n      jump\t// in\n    tag_168:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7762:7793  getApproved(tokenId) == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7706:7793  spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender */\n    tag_167:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7698:7794  return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender) */\n      swap2\n      pop\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7540:7801  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11411:12638  function _transfer(... */\n    tag_113:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11565:11569  from */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11538:11569  ERC721.ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11538:11561  ERC721.ownerOf(tokenId) */\n      tag_170\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11553:11560  tokenId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11538:11552  ERC721.ownerOf */\n      tag_47\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11538:11561  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_170:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11538:11569  ERC721.ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11530:11611  require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\") */\n      tag_171\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_172\n      swap1\n      tag_173\n      jump\t// in\n    tag_172:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_171:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11643:11644  0 */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11629:11645  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11629:11631  to */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11629:11645  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11621:11686  require(to != address(0), \"ERC721: transfer to the zero address\") */\n      tag_174\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_175\n      swap1\n      tag_176\n      jump\t// in\n    tag_175:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_174:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11697:11736  _beforeTokenTransfer(from, to, tokenId) */\n      tag_177\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11718:11722  from */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11724:11726  to */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11728:11735  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11697:11717  _beforeTokenTransfer */\n      tag_178\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11697:11736  _beforeTokenTransfer(from, to, tokenId) */\n      jump\t// in\n    tag_177:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11863:11867  from */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11836:11867  ERC721.ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11836:11859  ERC721.ownerOf(tokenId) */\n      tag_179\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11851:11858  tokenId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11836:11850  ERC721.ownerOf */\n      tag_47\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11836:11859  ERC721.ownerOf(tokenId) */\n      jump\t// in\n    tag_179:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11836:11867  ERC721.ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11828:11909  require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\") */\n      tag_180\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_181\n      swap1\n      tag_173\n      jump\t// in\n    tag_181:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_180:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11978:11993  _tokenApprovals */\n      0x04\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11978:12002  _tokenApprovals[tokenId] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11994:12001  tokenId */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11978:12002  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11971:12002  delete _tokenApprovals[tokenId] */\n      0x0100\n      exp\n      dup2\n      sload\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      sstore\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12465:12466  1 */\n      0x01\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12446:12455  _balances */\n      0x03\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12446:12461  _balances[from] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12456:12460  from */\n      dup6\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12446:12461  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12446:12466  _balances[from] -= 1 */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12497:12498  1 */\n      0x01\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12480:12489  _balances */\n      0x03\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12480:12493  _balances[to] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12490:12492  to */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12480:12493  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12480:12498  _balances[to] += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12537:12539  to */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12518:12525  _owners */\n      0x02\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12518:12534  _owners[tokenId] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12526:12533  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12518:12534  _owners[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12518:12539  _owners[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12574:12581  tokenId */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12570:12572  to */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12555:12582  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12564:12568  from */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12555:12582  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12593:12631  _afterTokenTransfer(from, to, tokenId) */\n      tag_182\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12613:12617  from */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12619:12621  to */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12623:12630  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12593:12612  _afterTokenTransfer */\n      tag_183\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":12593:12631  _afterTokenTransfer(from, to, tokenId) */\n      jump\t// in\n    tag_182:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":11411:12638  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6838:6953  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n    tag_118:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6904:6911  address */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6930:6937  _owners */\n      0x02\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6930:6946  _owners[tokenId] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6938:6945  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6930:6946  _owners[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6923:6946  return _owners[tokenId] */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6838:6953  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13057:13364  function _setApprovalForAll(... */\n    tag_135:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13207:13215  operator */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13198:13215  owner != operator */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13198:13203  owner */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13198:13215  owner != operator */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13190:13245  require(owner != operator, \"ERC721: approve to caller\") */\n      tag_186\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_187\n      swap1\n      tag_188\n      jump\t// in\n    tag_187:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_186:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13293:13301  approved */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13255:13273  _operatorApprovals */\n      0x05\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13255:13280  _operatorApprovals[owner] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13274:13279  owner */\n      dup6\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13255:13280  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13255:13290  _operatorApprovals[owner][operator] */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13281:13289  operator */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13255:13290  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13255:13301  _operatorApprovals[owner][operator] = approved */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13338:13346  operator */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13316:13357  ApprovalForAll(owner, operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13331:13336  owner */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13316:13357  ApprovalForAll(owner, operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13348:13356  approved */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13316:13357  ApprovalForAll(owner, operator, approved) */\n      mload(0x40)\n      tag_189\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_189:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":13057:13364  function _setApprovalForAll(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6424:6729  function _safeTransfer(... */\n    tag_142:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6574:6602  _transfer(from, to, tokenId) */\n      tag_191\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6584:6588  from */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6590:6592  to */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6594:6601  tokenId */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6574:6583  _transfer */\n      tag_113\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6574:6602  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_191:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6620:6667  _checkOnERC721Received(from, to, tokenId, data) */\n      tag_192\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6643:6647  from */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6649:6651  to */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6653:6660  tokenId */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6662:6666  data */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6620:6642  _checkOnERC721Received */\n      tag_193\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6620:6667  _checkOnERC721Received(from, to, tokenId, data) */\n      jump\t// in\n    tag_192:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6612:6722  require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\") */\n      tag_194\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_195\n      swap1\n      tag_196\n      jump\t// in\n    tag_195:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_194:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6424:6729  function _safeTransfer(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3319:3411  function _baseURI() internal view virtual returns (string memory) {... */\n    tag_146:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3370:3383  string memory */\n      0x60\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3395:3404  return \"\" */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3319:3411  function _baseURI() internal view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":415:1111  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_150:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":471:484  string memory */\n      0x60\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":520:534  uint256 length */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":557:558  1 */\n      0x01\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":537:554  Math.log10(value) */\n      tag_199\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":548:553  value */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":537:547  Math.log10 */\n      tag_200\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":537:554  Math.log10(value) */\n      jump\t// in\n    tag_199:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":537:558  Math.log10(value) + 1 */\n      add\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":520:558  uint256 length = Math.log10(value) + 1 */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":572:592  string memory buffer */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":606:612  length */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":595:613  new string(length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_201\n      jumpi\n      tag_202\n      tag_203\n      jump\t// in\n    tag_202:\n    tag_201:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_204\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_204:\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":572:613  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":627:638  uint256 ptr */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":753:759  length */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":749:751  32 */\n      0x20\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":745:760  add(32, length) */\n      add\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":737:743  buffer */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":733:761  add(buffer, add(32, length)) */\n      add\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":726:761  ptr := add(buffer, add(32, length)) */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":788:1068  while (true) {... */\n    tag_205:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":795:799  true */\n      0x01\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":788:1068  while (true) {... */\n      iszero\n      tag_206\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":819:824  ptr-- */\n      dup1\n      dup1\n      0x01\n      swap1\n      sub\n      swap2\n      pop\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":958:966  _SYMBOLS */\n      0x3031323334353637383961626364656600000000000000000000000000000000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":946:951  value */\n      dup7\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":942:956  mod(value, 10) */\n      mod\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":937:967  byte(mod(value, 10), _SYMBOLS) */\n      byte\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":932:935  ptr */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":924:968  mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) */\n      mstore8\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1012:1014  10 */\n      0x0a\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1003:1014  value /= 10 */\n      dup6\n      dup2\n      tag_207\n      jumpi\n      tag_208\n      tag_209\n      jump\t// in\n    tag_208:\n    tag_207:\n      div\n      swap5\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1045:1046  0 */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1036:1041  value */\n      dup6\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1036:1046  value == 0 */\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1032:1053  if (value == 0) break */\n      iszero\n      tag_210\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1048:1053  break */\n      jump(tag_206)\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1032:1053  if (value == 0) break */\n    tag_210:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":788:1068  while (true) {... */\n      jump(tag_205)\n    tag_206:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1088:1094  buffer */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":1081:1094  return buffer */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":415:1111  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7256:7382  function _exists(uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_157:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7321:7325  bool */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7373:7374  0 */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7344:7375  _ownerOf(tokenId) != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7344:7361  _ownerOf(tokenId) */\n      tag_212\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7353:7360  tokenId */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7344:7352  _ownerOf */\n      tag_118\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7344:7361  _ownerOf(tokenId) */\n      jump\t// in\n    tag_212:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7344:7375  _ownerOf(tokenId) != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7337:7375  return _ownerOf(tokenId) != address(0) */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7256:7382  function _exists(uint256 tokenId) internal view virtual returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15568:15690  function _beforeTokenTransfer(... */\n    tag_178:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16109:16230  function _afterTokenTransfer(... */\n    tag_183:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14133:14964  function _checkOnERC721Received(... */\n    tag_193:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14282:14286  bool */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14302:14317  to.isContract() */\n      tag_216\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14302:14304  to */\n      dup5\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14302:14315  to.isContract */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_217\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14302:14317  to.isContract() */\n      jump\t// in\n    tag_216:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14298:14958  if (to.isContract()) {... */\n      iszero\n      tag_218\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14353:14355  to */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14337:14373  IERC721Receiver(to).onERC721Received */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x150b7a02\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14374:14386  _msgSender() */\n      tag_219\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14374:14384  _msgSender */\n      tag_96\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14374:14386  _msgSender() */\n      jump\t// in\n    tag_219:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14388:14392  from */\n      dup8\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14394:14401  tokenId */\n      dup7\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14403:14407  data */\n      dup7\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14337:14408  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      mload(0x40)\n      dup6\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_220\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_221\n      jump\t// in\n    tag_220:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_222\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_222:\n      pop\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_223\n      jumpi\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_224\n      swap2\n      swap1\n      tag_225\n      jump\t// in\n    tag_224:\n      0x01\n    tag_223:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14333:14906  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n      tag_226\n      jumpi\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_231\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_230)\n    tag_231:\n      0x60\n      swap2\n      pop\n    tag_230:\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14592:14593  0 */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14575:14581  reason */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14575:14588  reason.length */\n      mload\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14575:14593  reason.length == 0 */\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14571:14892  if (reason.length == 0) {... */\n      iszero\n      tag_232\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14617:14677  revert(\"ERC721: transfer to non ERC721Receiver implementer\") */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_233\n      swap1\n      tag_196\n      jump\t// in\n    tag_233:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14571:14892  if (reason.length == 0) {... */\n    tag_232:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14844:14850  reason */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14838:14851  mload(reason) */\n      mload\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14829:14835  reason */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14825:14827  32 */\n      0x20\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14821:14836  add(32, reason) */\n      add\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14814:14852  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14333:14906  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n    tag_226:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14468:14509  IERC721Receiver.onERC721Received.selector */\n      shl(0xe0, 0x150b7a02)\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14458:14509  retval == IERC721Receiver.onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14458:14464  retval */\n      dup2\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14458:14509  retval == IERC721Receiver.onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14451:14509  return retval == IERC721Receiver.onERC721Received.selector */\n      swap2\n      pop\n      pop\n      jump(tag_215)\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14298:14958  if (to.isContract()) {... */\n    tag_218:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14943:14947  true */\n      0x01\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14936:14947  return true */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14133:14964  function _checkOnERC721Received(... */\n    tag_215:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":9889:10779  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_200:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":9942:9949  uint256 */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":9961:9975  uint256 result */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":9978:9979  0 */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":9961:9979  uint256 result = 0 */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10026:10032  10**64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10017:10022  value */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10017:10032  value >= 10**64 */\n      lt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10013:10112  if (value >= 10**64) {... */\n      tag_238\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10061:10067  10**64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10052:10067  value /= 10**64 */\n      dup4\n      dup2\n      tag_239\n      jumpi\n      tag_240\n      tag_209\n      jump\t// in\n    tag_240:\n    tag_239:\n      div\n      swap3\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10095:10097  64 */\n      0x40\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10085:10097  result += 64 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10013:10112  if (value >= 10**64) {... */\n    tag_238:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10138:10144  10**32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10129:10134  value */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10129:10144  value >= 10**32 */\n      lt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10125:10224  if (value >= 10**32) {... */\n      tag_241\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10173:10179  10**32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10164:10179  value /= 10**32 */\n      dup4\n      dup2\n      tag_242\n      jumpi\n      tag_243\n      tag_209\n      jump\t// in\n    tag_243:\n    tag_242:\n      div\n      swap3\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10207:10209  32 */\n      0x20\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10197:10209  result += 32 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10125:10224  if (value >= 10**32) {... */\n    tag_241:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10250:10256  10**16 */\n      0x2386f26fc10000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10241:10246  value */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10241:10256  value >= 10**16 */\n      lt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10237:10336  if (value >= 10**16) {... */\n      tag_244\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10285:10291  10**16 */\n      0x2386f26fc10000\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10276:10291  value /= 10**16 */\n      dup4\n      dup2\n      tag_245\n      jumpi\n      tag_246\n      tag_209\n      jump\t// in\n    tag_246:\n    tag_245:\n      div\n      swap3\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10319:10321  16 */\n      0x10\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10309:10321  result += 16 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10237:10336  if (value >= 10**16) {... */\n    tag_244:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10362:10367  10**8 */\n      0x05f5e100\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10353:10358  value */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10353:10367  value >= 10**8 */\n      lt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10349:10445  if (value >= 10**8) {... */\n      tag_247\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10396:10401  10**8 */\n      0x05f5e100\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10387:10401  value /= 10**8 */\n      dup4\n      dup2\n      tag_248\n      jumpi\n      tag_249\n      tag_209\n      jump\t// in\n    tag_249:\n    tag_248:\n      div\n      swap3\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10429:10430  8 */\n      0x08\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10419:10430  result += 8 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10349:10445  if (value >= 10**8) {... */\n    tag_247:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10471:10476  10**4 */\n      0x2710\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10462:10467  value */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10462:10476  value >= 10**4 */\n      lt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10458:10554  if (value >= 10**4) {... */\n      tag_250\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10505:10510  10**4 */\n      0x2710\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10496:10510  value /= 10**4 */\n      dup4\n      dup2\n      tag_251\n      jumpi\n      tag_252\n      tag_209\n      jump\t// in\n    tag_252:\n    tag_251:\n      div\n      swap3\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10538:10539  4 */\n      0x04\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10528:10539  result += 4 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10458:10554  if (value >= 10**4) {... */\n    tag_250:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10580:10585  10**2 */\n      0x64\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10571:10576  value */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10571:10585  value >= 10**2 */\n      lt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10567:10663  if (value >= 10**2) {... */\n      tag_253\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10614:10619  10**2 */\n      0x64\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10605:10619  value /= 10**2 */\n      dup4\n      dup2\n      tag_254\n      jumpi\n      tag_255\n      tag_209\n      jump\t// in\n    tag_255:\n    tag_254:\n      div\n      swap3\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10647:10648  2 */\n      0x02\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10637:10648  result += 2 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10567:10663  if (value >= 10**2) {... */\n    tag_253:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10689:10694  10**1 */\n      0x0a\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10680:10685  value */\n      dup4\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10680:10694  value >= 10**1 */\n      lt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10676:10740  if (value >= 10**1) {... */\n      tag_256\n      jumpi\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10724:10725  1 */\n      0x01\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10714:10725  result += 1 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10676:10740  if (value >= 10**1) {... */\n    tag_256:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10766:10772  result */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":10759:10772  return result */\n      swap2\n      pop\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":9889:10779  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_217:\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":1235:1239  bool */\n      0x00\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":1487:1488  0 */\n      dup1\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":1465:1472  account */\n      dup3\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      gt\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":1458:1488  return account.code.length > 0 */\n      swap1\n      pop\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:417   */\n    tag_259:\n        /* \"#utility.yul\":84:89   */\n      0x00\n        /* \"#utility.yul\":109:174   */\n      tag_261\n        /* \"#utility.yul\":125:173   */\n      tag_262\n        /* \"#utility.yul\":166:172   */\n      dup5\n        /* \"#utility.yul\":125:173   */\n      tag_263\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":109:174   */\n      tag_264\n      jump\t// in\n    tag_261:\n        /* \"#utility.yul\":100:174   */\n      swap1\n      pop\n        /* \"#utility.yul\":197:203   */\n      dup3\n        /* \"#utility.yul\":190:195   */\n      dup2\n        /* \"#utility.yul\":183:204   */\n      mstore\n        /* \"#utility.yul\":235:239   */\n      0x20\n        /* \"#utility.yul\":228:233   */\n      dup2\n        /* \"#utility.yul\":224:240   */\n      add\n        /* \"#utility.yul\":273:276   */\n      dup5\n        /* \"#utility.yul\":264:270   */\n      dup5\n        /* \"#utility.yul\":259:262   */\n      dup5\n        /* \"#utility.yul\":255:271   */\n      add\n        /* \"#utility.yul\":252:277   */\n      gt\n        /* \"#utility.yul\":249:361   */\n      iszero\n      tag_265\n      jumpi\n        /* \"#utility.yul\":280:359   */\n      tag_266\n      tag_267\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":249:361   */\n    tag_265:\n        /* \"#utility.yul\":370:411   */\n      tag_268\n        /* \"#utility.yul\":404:410   */\n      dup5\n        /* \"#utility.yul\":399:402   */\n      dup3\n        /* \"#utility.yul\":394:397   */\n      dup6\n        /* \"#utility.yul\":370:411   */\n      tag_269\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":90:417   */\n      pop\n        /* \"#utility.yul\":7:417   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":423:562   */\n    tag_270:\n        /* \"#utility.yul\":469:474   */\n      0x00\n        /* \"#utility.yul\":507:513   */\n      dup2\n        /* \"#utility.yul\":494:514   */\n      calldataload\n        /* \"#utility.yul\":485:514   */\n      swap1\n      pop\n        /* \"#utility.yul\":523:556   */\n      tag_272\n        /* \"#utility.yul\":550:555   */\n      dup2\n        /* \"#utility.yul\":523:556   */\n      tag_273\n      jump\t// in\n    tag_272:\n        /* \"#utility.yul\":423:562   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:701   */\n    tag_274:\n        /* \"#utility.yul\":611:616   */\n      0x00\n        /* \"#utility.yul\":649:655   */\n      dup2\n        /* \"#utility.yul\":636:656   */\n      calldataload\n        /* \"#utility.yul\":627:656   */\n      swap1\n      pop\n        /* \"#utility.yul\":665:695   */\n      tag_276\n        /* \"#utility.yul\":689:694   */\n      dup2\n        /* \"#utility.yul\":665:695   */\n      tag_277\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":568:701   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":707:844   */\n    tag_278:\n        /* \"#utility.yul\":752:757   */\n      0x00\n        /* \"#utility.yul\":790:796   */\n      dup2\n        /* \"#utility.yul\":777:797   */\n      calldataload\n        /* \"#utility.yul\":768:797   */\n      swap1\n      pop\n        /* \"#utility.yul\":806:838   */\n      tag_280\n        /* \"#utility.yul\":832:837   */\n      dup2\n        /* \"#utility.yul\":806:838   */\n      tag_281\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":707:844   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":850:991   */\n    tag_282:\n        /* \"#utility.yul\":906:911   */\n      0x00\n        /* \"#utility.yul\":937:943   */\n      dup2\n        /* \"#utility.yul\":931:944   */\n      mload\n        /* \"#utility.yul\":922:944   */\n      swap1\n      pop\n        /* \"#utility.yul\":953:985   */\n      tag_284\n        /* \"#utility.yul\":979:984   */\n      dup2\n        /* \"#utility.yul\":953:985   */\n      tag_281\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":850:991   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1010:1348   */\n    tag_285:\n        /* \"#utility.yul\":1065:1070   */\n      0x00\n        /* \"#utility.yul\":1114:1117   */\n      dup3\n        /* \"#utility.yul\":1107:1111   */\n      0x1f\n        /* \"#utility.yul\":1099:1105   */\n      dup4\n        /* \"#utility.yul\":1095:1112   */\n      add\n        /* \"#utility.yul\":1091:1118   */\n      slt\n        /* \"#utility.yul\":1081:1203   */\n      tag_287\n      jumpi\n        /* \"#utility.yul\":1122:1201   */\n      tag_288\n      tag_289\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":1081:1203   */\n    tag_287:\n        /* \"#utility.yul\":1239:1245   */\n      dup2\n        /* \"#utility.yul\":1226:1246   */\n      calldataload\n        /* \"#utility.yul\":1264:1342   */\n      tag_290\n        /* \"#utility.yul\":1338:1341   */\n      dup5\n        /* \"#utility.yul\":1330:1336   */\n      dup3\n        /* \"#utility.yul\":1323:1327   */\n      0x20\n        /* \"#utility.yul\":1315:1321   */\n      dup7\n        /* \"#utility.yul\":1311:1328   */\n      add\n        /* \"#utility.yul\":1264:1342   */\n      tag_259\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":1255:1342   */\n      swap2\n      pop\n        /* \"#utility.yul\":1071:1348   */\n      pop\n        /* \"#utility.yul\":1010:1348   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1354:1493   */\n    tag_291:\n        /* \"#utility.yul\":1400:1405   */\n      0x00\n        /* \"#utility.yul\":1438:1444   */\n      dup2\n        /* \"#utility.yul\":1425:1445   */\n      calldataload\n        /* \"#utility.yul\":1416:1445   */\n      swap1\n      pop\n        /* \"#utility.yul\":1454:1487   */\n      tag_293\n        /* \"#utility.yul\":1481:1486   */\n      dup2\n        /* \"#utility.yul\":1454:1487   */\n      tag_294\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":1354:1493   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1499:1828   */\n    tag_51:\n        /* \"#utility.yul\":1558:1564   */\n      0x00\n        /* \"#utility.yul\":1607:1609   */\n      0x20\n        /* \"#utility.yul\":1595:1604   */\n      dup3\n        /* \"#utility.yul\":1586:1593   */\n      dup5\n        /* \"#utility.yul\":1582:1605   */\n      sub\n        /* \"#utility.yul\":1578:1610   */\n      slt\n        /* \"#utility.yul\":1575:1694   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":1613:1692   */\n      tag_297\n      tag_298\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":1575:1694   */\n    tag_296:\n        /* \"#utility.yul\":1733:1734   */\n      0x00\n        /* \"#utility.yul\":1758:1811   */\n      tag_299\n        /* \"#utility.yul\":1803:1810   */\n      dup5\n        /* \"#utility.yul\":1794:1800   */\n      dup3\n        /* \"#utility.yul\":1783:1792   */\n      dup6\n        /* \"#utility.yul\":1779:1801   */\n      add\n        /* \"#utility.yul\":1758:1811   */\n      tag_270\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":1748:1811   */\n      swap2\n      pop\n        /* \"#utility.yul\":1704:1821   */\n      pop\n        /* \"#utility.yul\":1499:1828   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1834:2308   */\n    tag_72:\n        /* \"#utility.yul\":1902:1908   */\n      0x00\n        /* \"#utility.yul\":1910:1916   */\n      dup1\n        /* \"#utility.yul\":1959:1961   */\n      0x40\n        /* \"#utility.yul\":1947:1956   */\n      dup4\n        /* \"#utility.yul\":1938:1945   */\n      dup6\n        /* \"#utility.yul\":1934:1957   */\n      sub\n        /* \"#utility.yul\":1930:1962   */\n      slt\n        /* \"#utility.yul\":1927:2046   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":1965:2044   */\n      tag_302\n      tag_298\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":1927:2046   */\n    tag_301:\n        /* \"#utility.yul\":2085:2086   */\n      0x00\n        /* \"#utility.yul\":2110:2163   */\n      tag_303\n        /* \"#utility.yul\":2155:2162   */\n      dup6\n        /* \"#utility.yul\":2146:2152   */\n      dup3\n        /* \"#utility.yul\":2135:2144   */\n      dup7\n        /* \"#utility.yul\":2131:2153   */\n      add\n        /* \"#utility.yul\":2110:2163   */\n      tag_270\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":2100:2163   */\n      swap3\n      pop\n        /* \"#utility.yul\":2056:2173   */\n      pop\n        /* \"#utility.yul\":2212:2214   */\n      0x20\n        /* \"#utility.yul\":2238:2291   */\n      tag_304\n        /* \"#utility.yul\":2283:2290   */\n      dup6\n        /* \"#utility.yul\":2274:2280   */\n      dup3\n        /* \"#utility.yul\":2263:2272   */\n      dup7\n        /* \"#utility.yul\":2259:2281   */\n      add\n        /* \"#utility.yul\":2238:2291   */\n      tag_270\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":2228:2291   */\n      swap2\n      pop\n        /* \"#utility.yul\":2183:2301   */\n      pop\n        /* \"#utility.yul\":1834:2308   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2314:2933   */\n    tag_40:\n        /* \"#utility.yul\":2391:2397   */\n      0x00\n        /* \"#utility.yul\":2399:2405   */\n      dup1\n        /* \"#utility.yul\":2407:2413   */\n      0x00\n        /* \"#utility.yul\":2456:2458   */\n      0x60\n        /* \"#utility.yul\":2444:2453   */\n      dup5\n        /* \"#utility.yul\":2435:2442   */\n      dup7\n        /* \"#utility.yul\":2431:2454   */\n      sub\n        /* \"#utility.yul\":2427:2459   */\n      slt\n        /* \"#utility.yul\":2424:2543   */\n      iszero\n      tag_306\n      jumpi\n        /* \"#utility.yul\":2462:2541   */\n      tag_307\n      tag_298\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":2424:2543   */\n    tag_306:\n        /* \"#utility.yul\":2582:2583   */\n      0x00\n        /* \"#utility.yul\":2607:2660   */\n      tag_308\n        /* \"#utility.yul\":2652:2659   */\n      dup7\n        /* \"#utility.yul\":2643:2649   */\n      dup3\n        /* \"#utility.yul\":2632:2641   */\n      dup8\n        /* \"#utility.yul\":2628:2650   */\n      add\n        /* \"#utility.yul\":2607:2660   */\n      tag_270\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":2597:2660   */\n      swap4\n      pop\n        /* \"#utility.yul\":2553:2670   */\n      pop\n        /* \"#utility.yul\":2709:2711   */\n      0x20\n        /* \"#utility.yul\":2735:2788   */\n      tag_309\n        /* \"#utility.yul\":2780:2787   */\n      dup7\n        /* \"#utility.yul\":2771:2777   */\n      dup3\n        /* \"#utility.yul\":2760:2769   */\n      dup8\n        /* \"#utility.yul\":2756:2778   */\n      add\n        /* \"#utility.yul\":2735:2788   */\n      tag_270\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":2725:2788   */\n      swap3\n      pop\n        /* \"#utility.yul\":2680:2798   */\n      pop\n        /* \"#utility.yul\":2837:2839   */\n      0x40\n        /* \"#utility.yul\":2863:2916   */\n      tag_310\n        /* \"#utility.yul\":2908:2915   */\n      dup7\n        /* \"#utility.yul\":2899:2905   */\n      dup3\n        /* \"#utility.yul\":2888:2897   */\n      dup8\n        /* \"#utility.yul\":2884:2906   */\n      add\n        /* \"#utility.yul\":2863:2916   */\n      tag_291\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":2853:2916   */\n      swap2\n      pop\n        /* \"#utility.yul\":2808:2926   */\n      pop\n        /* \"#utility.yul\":2314:2933   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2939:3882   */\n    tag_64:\n        /* \"#utility.yul\":3034:3040   */\n      0x00\n        /* \"#utility.yul\":3042:3048   */\n      dup1\n        /* \"#utility.yul\":3050:3056   */\n      0x00\n        /* \"#utility.yul\":3058:3064   */\n      dup1\n        /* \"#utility.yul\":3107:3110   */\n      0x80\n        /* \"#utility.yul\":3095:3104   */\n      dup6\n        /* \"#utility.yul\":3086:3093   */\n      dup8\n        /* \"#utility.yul\":3082:3105   */\n      sub\n        /* \"#utility.yul\":3078:3111   */\n      slt\n        /* \"#utility.yul\":3075:3195   */\n      iszero\n      tag_312\n      jumpi\n        /* \"#utility.yul\":3114:3193   */\n      tag_313\n      tag_298\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":3075:3195   */\n    tag_312:\n        /* \"#utility.yul\":3234:3235   */\n      0x00\n        /* \"#utility.yul\":3259:3312   */\n      tag_314\n        /* \"#utility.yul\":3304:3311   */\n      dup8\n        /* \"#utility.yul\":3295:3301   */\n      dup3\n        /* \"#utility.yul\":3284:3293   */\n      dup9\n        /* \"#utility.yul\":3280:3302   */\n      add\n        /* \"#utility.yul\":3259:3312   */\n      tag_270\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":3249:3312   */\n      swap5\n      pop\n        /* \"#utility.yul\":3205:3322   */\n      pop\n        /* \"#utility.yul\":3361:3363   */\n      0x20\n        /* \"#utility.yul\":3387:3440   */\n      tag_315\n        /* \"#utility.yul\":3432:3439   */\n      dup8\n        /* \"#utility.yul\":3423:3429   */\n      dup3\n        /* \"#utility.yul\":3412:3421   */\n      dup9\n        /* \"#utility.yul\":3408:3430   */\n      add\n        /* \"#utility.yul\":3387:3440   */\n      tag_270\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":3377:3440   */\n      swap4\n      pop\n        /* \"#utility.yul\":3332:3450   */\n      pop\n        /* \"#utility.yul\":3489:3491   */\n      0x40\n        /* \"#utility.yul\":3515:3568   */\n      tag_316\n        /* \"#utility.yul\":3560:3567   */\n      dup8\n        /* \"#utility.yul\":3551:3557   */\n      dup3\n        /* \"#utility.yul\":3540:3549   */\n      dup9\n        /* \"#utility.yul\":3536:3558   */\n      add\n        /* \"#utility.yul\":3515:3568   */\n      tag_291\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":3505:3568   */\n      swap3\n      pop\n        /* \"#utility.yul\":3460:3578   */\n      pop\n        /* \"#utility.yul\":3645:3647   */\n      0x60\n        /* \"#utility.yul\":3634:3643   */\n      dup6\n        /* \"#utility.yul\":3630:3648   */\n      add\n        /* \"#utility.yul\":3617:3649   */\n      calldataload\n        /* \"#utility.yul\":3676:3694   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3668:3674   */\n      dup2\n        /* \"#utility.yul\":3665:3695   */\n      gt\n        /* \"#utility.yul\":3662:3779   */\n      iszero\n      tag_317\n      jumpi\n        /* \"#utility.yul\":3698:3777   */\n      tag_318\n      tag_319\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":3662:3779   */\n    tag_317:\n        /* \"#utility.yul\":3803:3865   */\n      tag_320\n        /* \"#utility.yul\":3857:3864   */\n      dup8\n        /* \"#utility.yul\":3848:3854   */\n      dup3\n        /* \"#utility.yul\":3837:3846   */\n      dup9\n        /* \"#utility.yul\":3833:3855   */\n      add\n        /* \"#utility.yul\":3803:3865   */\n      tag_285\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":3793:3865   */\n      swap2\n      pop\n        /* \"#utility.yul\":3588:3875   */\n      pop\n        /* \"#utility.yul\":2939:3882   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3888:4356   */\n    tag_60:\n        /* \"#utility.yul\":3953:3959   */\n      0x00\n        /* \"#utility.yul\":3961:3967   */\n      dup1\n        /* \"#utility.yul\":4010:4012   */\n      0x40\n        /* \"#utility.yul\":3998:4007   */\n      dup4\n        /* \"#utility.yul\":3989:3996   */\n      dup6\n        /* \"#utility.yul\":3985:4008   */\n      sub\n        /* \"#utility.yul\":3981:4013   */\n      slt\n        /* \"#utility.yul\":3978:4097   */\n      iszero\n      tag_322\n      jumpi\n        /* \"#utility.yul\":4016:4095   */\n      tag_323\n      tag_298\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":3978:4097   */\n    tag_322:\n        /* \"#utility.yul\":4136:4137   */\n      0x00\n        /* \"#utility.yul\":4161:4214   */\n      tag_324\n        /* \"#utility.yul\":4206:4213   */\n      dup6\n        /* \"#utility.yul\":4197:4203   */\n      dup3\n        /* \"#utility.yul\":4186:4195   */\n      dup7\n        /* \"#utility.yul\":4182:4204   */\n      add\n        /* \"#utility.yul\":4161:4214   */\n      tag_270\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":4151:4214   */\n      swap3\n      pop\n        /* \"#utility.yul\":4107:4224   */\n      pop\n        /* \"#utility.yul\":4263:4265   */\n      0x20\n        /* \"#utility.yul\":4289:4339   */\n      tag_325\n        /* \"#utility.yul\":4331:4338   */\n      dup6\n        /* \"#utility.yul\":4322:4328   */\n      dup3\n        /* \"#utility.yul\":4311:4320   */\n      dup7\n        /* \"#utility.yul\":4307:4329   */\n      add\n        /* \"#utility.yul\":4289:4339   */\n      tag_274\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":4279:4339   */\n      swap2\n      pop\n        /* \"#utility.yul\":4234:4349   */\n      pop\n        /* \"#utility.yul\":3888:4356   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4362:4836   */\n    tag_36:\n        /* \"#utility.yul\":4430:4436   */\n      0x00\n        /* \"#utility.yul\":4438:4444   */\n      dup1\n        /* \"#utility.yul\":4487:4489   */\n      0x40\n        /* \"#utility.yul\":4475:4484   */\n      dup4\n        /* \"#utility.yul\":4466:4473   */\n      dup6\n        /* \"#utility.yul\":4462:4485   */\n      sub\n        /* \"#utility.yul\":4458:4490   */\n      slt\n        /* \"#utility.yul\":4455:4574   */\n      iszero\n      tag_327\n      jumpi\n        /* \"#utility.yul\":4493:4572   */\n      tag_328\n      tag_298\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":4455:4574   */\n    tag_327:\n        /* \"#utility.yul\":4613:4614   */\n      0x00\n        /* \"#utility.yul\":4638:4691   */\n      tag_329\n        /* \"#utility.yul\":4683:4690   */\n      dup6\n        /* \"#utility.yul\":4674:4680   */\n      dup3\n        /* \"#utility.yul\":4663:4672   */\n      dup7\n        /* \"#utility.yul\":4659:4681   */\n      add\n        /* \"#utility.yul\":4638:4691   */\n      tag_270\n      jump\t// in\n    tag_329:\n        /* \"#utility.yul\":4628:4691   */\n      swap3\n      pop\n        /* \"#utility.yul\":4584:4701   */\n      pop\n        /* \"#utility.yul\":4740:4742   */\n      0x20\n        /* \"#utility.yul\":4766:4819   */\n      tag_330\n        /* \"#utility.yul\":4811:4818   */\n      dup6\n        /* \"#utility.yul\":4802:4808   */\n      dup3\n        /* \"#utility.yul\":4791:4800   */\n      dup7\n        /* \"#utility.yul\":4787:4809   */\n      add\n        /* \"#utility.yul\":4766:4819   */\n      tag_291\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":4756:4819   */\n      swap2\n      pop\n        /* \"#utility.yul\":4711:4829   */\n      pop\n        /* \"#utility.yul\":4362:4836   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4842:5169   */\n    tag_20:\n        /* \"#utility.yul\":4900:4906   */\n      0x00\n        /* \"#utility.yul\":4949:4951   */\n      0x20\n        /* \"#utility.yul\":4937:4946   */\n      dup3\n        /* \"#utility.yul\":4928:4935   */\n      dup5\n        /* \"#utility.yul\":4924:4947   */\n      sub\n        /* \"#utility.yul\":4920:4952   */\n      slt\n        /* \"#utility.yul\":4917:5036   */\n      iszero\n      tag_332\n      jumpi\n        /* \"#utility.yul\":4955:5034   */\n      tag_333\n      tag_298\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":4917:5036   */\n    tag_332:\n        /* \"#utility.yul\":5075:5076   */\n      0x00\n        /* \"#utility.yul\":5100:5152   */\n      tag_334\n        /* \"#utility.yul\":5144:5151   */\n      dup5\n        /* \"#utility.yul\":5135:5141   */\n      dup3\n        /* \"#utility.yul\":5124:5133   */\n      dup6\n        /* \"#utility.yul\":5120:5142   */\n      add\n        /* \"#utility.yul\":5100:5152   */\n      tag_278\n      jump\t// in\n    tag_334:\n        /* \"#utility.yul\":5090:5152   */\n      swap2\n      pop\n        /* \"#utility.yul\":5046:5162   */\n      pop\n        /* \"#utility.yul\":4842:5169   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5175:5524   */\n    tag_225:\n        /* \"#utility.yul\":5244:5250   */\n      0x00\n        /* \"#utility.yul\":5293:5295   */\n      0x20\n        /* \"#utility.yul\":5281:5290   */\n      dup3\n        /* \"#utility.yul\":5272:5279   */\n      dup5\n        /* \"#utility.yul\":5268:5291   */\n      sub\n        /* \"#utility.yul\":5264:5296   */\n      slt\n        /* \"#utility.yul\":5261:5380   */\n      iszero\n      tag_336\n      jumpi\n        /* \"#utility.yul\":5299:5378   */\n      tag_337\n      tag_298\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":5261:5380   */\n    tag_336:\n        /* \"#utility.yul\":5419:5420   */\n      0x00\n        /* \"#utility.yul\":5444:5507   */\n      tag_338\n        /* \"#utility.yul\":5499:5506   */\n      dup5\n        /* \"#utility.yul\":5490:5496   */\n      dup3\n        /* \"#utility.yul\":5479:5488   */\n      dup6\n        /* \"#utility.yul\":5475:5497   */\n      add\n        /* \"#utility.yul\":5444:5507   */\n      tag_282\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":5434:5507   */\n      swap2\n      pop\n        /* \"#utility.yul\":5390:5517   */\n      pop\n        /* \"#utility.yul\":5175:5524   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5530:5859   */\n    tag_30:\n        /* \"#utility.yul\":5589:5595   */\n      0x00\n        /* \"#utility.yul\":5638:5640   */\n      0x20\n        /* \"#utility.yul\":5626:5635   */\n      dup3\n        /* \"#utility.yul\":5617:5624   */\n      dup5\n        /* \"#utility.yul\":5613:5636   */\n      sub\n        /* \"#utility.yul\":5609:5641   */\n      slt\n        /* \"#utility.yul\":5606:5725   */\n      iszero\n      tag_340\n      jumpi\n        /* \"#utility.yul\":5644:5723   */\n      tag_341\n      tag_298\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":5606:5725   */\n    tag_340:\n        /* \"#utility.yul\":5764:5765   */\n      0x00\n        /* \"#utility.yul\":5789:5842   */\n      tag_342\n        /* \"#utility.yul\":5834:5841   */\n      dup5\n        /* \"#utility.yul\":5825:5831   */\n      dup3\n        /* \"#utility.yul\":5814:5823   */\n      dup6\n        /* \"#utility.yul\":5810:5832   */\n      add\n        /* \"#utility.yul\":5789:5842   */\n      tag_291\n      jump\t// in\n    tag_342:\n        /* \"#utility.yul\":5779:5842   */\n      swap2\n      pop\n        /* \"#utility.yul\":5735:5852   */\n      pop\n        /* \"#utility.yul\":5530:5859   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5865:5983   */\n    tag_343:\n        /* \"#utility.yul\":5952:5976   */\n      tag_345\n        /* \"#utility.yul\":5970:5975   */\n      dup2\n        /* \"#utility.yul\":5952:5976   */\n      tag_346\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":5947:5950   */\n      dup3\n        /* \"#utility.yul\":5940:5977   */\n      mstore\n        /* \"#utility.yul\":5865:5983   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5989:6098   */\n    tag_347:\n        /* \"#utility.yul\":6070:6091   */\n      tag_349\n        /* \"#utility.yul\":6085:6090   */\n      dup2\n        /* \"#utility.yul\":6070:6091   */\n      tag_350\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":6065:6068   */\n      dup3\n        /* \"#utility.yul\":6058:6092   */\n      mstore\n        /* \"#utility.yul\":5989:6098   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6104:6464   */\n    tag_351:\n        /* \"#utility.yul\":6190:6193   */\n      0x00\n        /* \"#utility.yul\":6218:6256   */\n      tag_353\n        /* \"#utility.yul\":6250:6255   */\n      dup3\n        /* \"#utility.yul\":6218:6256   */\n      tag_354\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":6272:6342   */\n      tag_355\n        /* \"#utility.yul\":6335:6341   */\n      dup2\n        /* \"#utility.yul\":6330:6333   */\n      dup6\n        /* \"#utility.yul\":6272:6342   */\n      tag_356\n      jump\t// in\n    tag_355:\n        /* \"#utility.yul\":6265:6342   */\n      swap4\n      pop\n        /* \"#utility.yul\":6351:6403   */\n      tag_357\n        /* \"#utility.yul\":6396:6402   */\n      dup2\n        /* \"#utility.yul\":6391:6394   */\n      dup6\n        /* \"#utility.yul\":6384:6388   */\n      0x20\n        /* \"#utility.yul\":6377:6382   */\n      dup7\n        /* \"#utility.yul\":6373:6389   */\n      add\n        /* \"#utility.yul\":6351:6403   */\n      tag_358\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":6428:6457   */\n      tag_359\n        /* \"#utility.yul\":6450:6456   */\n      dup2\n        /* \"#utility.yul\":6428:6457   */\n      tag_360\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":6423:6426   */\n      dup5\n        /* \"#utility.yul\":6419:6458   */\n      add\n        /* \"#utility.yul\":6412:6458   */\n      swap2\n      pop\n        /* \"#utility.yul\":6194:6464   */\n      pop\n        /* \"#utility.yul\":6104:6464   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6470:6834   */\n    tag_361:\n        /* \"#utility.yul\":6558:6561   */\n      0x00\n        /* \"#utility.yul\":6586:6625   */\n      tag_363\n        /* \"#utility.yul\":6619:6624   */\n      dup3\n        /* \"#utility.yul\":6586:6625   */\n      tag_364\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":6641:6712   */\n      tag_365\n        /* \"#utility.yul\":6705:6711   */\n      dup2\n        /* \"#utility.yul\":6700:6703   */\n      dup6\n        /* \"#utility.yul\":6641:6712   */\n      tag_366\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":6634:6712   */\n      swap4\n      pop\n        /* \"#utility.yul\":6721:6773   */\n      tag_367\n        /* \"#utility.yul\":6766:6772   */\n      dup2\n        /* \"#utility.yul\":6761:6764   */\n      dup6\n        /* \"#utility.yul\":6754:6758   */\n      0x20\n        /* \"#utility.yul\":6747:6752   */\n      dup7\n        /* \"#utility.yul\":6743:6759   */\n      add\n        /* \"#utility.yul\":6721:6773   */\n      tag_358\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":6798:6827   */\n      tag_368\n        /* \"#utility.yul\":6820:6826   */\n      dup2\n        /* \"#utility.yul\":6798:6827   */\n      tag_360\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":6793:6796   */\n      dup5\n        /* \"#utility.yul\":6789:6828   */\n      add\n        /* \"#utility.yul\":6782:6828   */\n      swap2\n      pop\n        /* \"#utility.yul\":6562:6834   */\n      pop\n        /* \"#utility.yul\":6470:6834   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6840:7217   */\n    tag_369:\n        /* \"#utility.yul\":6946:6949   */\n      0x00\n        /* \"#utility.yul\":6974:7013   */\n      tag_371\n        /* \"#utility.yul\":7007:7012   */\n      dup3\n        /* \"#utility.yul\":6974:7013   */\n      tag_364\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":7029:7118   */\n      tag_372\n        /* \"#utility.yul\":7111:7117   */\n      dup2\n        /* \"#utility.yul\":7106:7109   */\n      dup6\n        /* \"#utility.yul\":7029:7118   */\n      tag_373\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":7022:7118   */\n      swap4\n      pop\n        /* \"#utility.yul\":7127:7179   */\n      tag_374\n        /* \"#utility.yul\":7172:7178   */\n      dup2\n        /* \"#utility.yul\":7167:7170   */\n      dup6\n        /* \"#utility.yul\":7160:7164   */\n      0x20\n        /* \"#utility.yul\":7153:7158   */\n      dup7\n        /* \"#utility.yul\":7149:7165   */\n      add\n        /* \"#utility.yul\":7127:7179   */\n      tag_358\n      jump\t// in\n    tag_374:\n        /* \"#utility.yul\":7204:7210   */\n      dup1\n        /* \"#utility.yul\":7199:7202   */\n      dup5\n        /* \"#utility.yul\":7195:7211   */\n      add\n        /* \"#utility.yul\":7188:7211   */\n      swap2\n      pop\n        /* \"#utility.yul\":6950:7217   */\n      pop\n        /* \"#utility.yul\":6840:7217   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7223:7589   */\n    tag_375:\n        /* \"#utility.yul\":7365:7368   */\n      0x00\n        /* \"#utility.yul\":7386:7453   */\n      tag_377\n        /* \"#utility.yul\":7450:7452   */\n      0x2d\n        /* \"#utility.yul\":7445:7448   */\n      dup4\n        /* \"#utility.yul\":7386:7453   */\n      tag_366\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":7379:7453   */\n      swap2\n      pop\n        /* \"#utility.yul\":7462:7555   */\n      tag_378\n        /* \"#utility.yul\":7551:7554   */\n      dup3\n        /* \"#utility.yul\":7462:7555   */\n      tag_379\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":7580:7582   */\n      0x40\n        /* \"#utility.yul\":7575:7578   */\n      dup3\n        /* \"#utility.yul\":7571:7583   */\n      add\n        /* \"#utility.yul\":7564:7583   */\n      swap1\n      pop\n        /* \"#utility.yul\":7223:7589   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7595:7961   */\n    tag_380:\n        /* \"#utility.yul\":7737:7740   */\n      0x00\n        /* \"#utility.yul\":7758:7825   */\n      tag_382\n        /* \"#utility.yul\":7822:7824   */\n      0x32\n        /* \"#utility.yul\":7817:7820   */\n      dup4\n        /* \"#utility.yul\":7758:7825   */\n      tag_366\n      jump\t// in\n    tag_382:\n        /* \"#utility.yul\":7751:7825   */\n      swap2\n      pop\n        /* \"#utility.yul\":7834:7927   */\n      tag_383\n        /* \"#utility.yul\":7923:7926   */\n      dup3\n        /* \"#utility.yul\":7834:7927   */\n      tag_384\n      jump\t// in\n    tag_383:\n        /* \"#utility.yul\":7952:7954   */\n      0x40\n        /* \"#utility.yul\":7947:7950   */\n      dup3\n        /* \"#utility.yul\":7943:7955   */\n      add\n        /* \"#utility.yul\":7936:7955   */\n      swap1\n      pop\n        /* \"#utility.yul\":7595:7961   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7967:8333   */\n    tag_385:\n        /* \"#utility.yul\":8109:8112   */\n      0x00\n        /* \"#utility.yul\":8130:8197   */\n      tag_387\n        /* \"#utility.yul\":8194:8196   */\n      0x25\n        /* \"#utility.yul\":8189:8192   */\n      dup4\n        /* \"#utility.yul\":8130:8197   */\n      tag_366\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":8123:8197   */\n      swap2\n      pop\n        /* \"#utility.yul\":8206:8299   */\n      tag_388\n        /* \"#utility.yul\":8295:8298   */\n      dup3\n        /* \"#utility.yul\":8206:8299   */\n      tag_389\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":8324:8326   */\n      0x40\n        /* \"#utility.yul\":8319:8322   */\n      dup3\n        /* \"#utility.yul\":8315:8327   */\n      add\n        /* \"#utility.yul\":8308:8327   */\n      swap1\n      pop\n        /* \"#utility.yul\":7967:8333   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8339:8705   */\n    tag_390:\n        /* \"#utility.yul\":8481:8484   */\n      0x00\n        /* \"#utility.yul\":8502:8569   */\n      tag_392\n        /* \"#utility.yul\":8566:8568   */\n      0x24\n        /* \"#utility.yul\":8561:8564   */\n      dup4\n        /* \"#utility.yul\":8502:8569   */\n      tag_366\n      jump\t// in\n    tag_392:\n        /* \"#utility.yul\":8495:8569   */\n      swap2\n      pop\n        /* \"#utility.yul\":8578:8671   */\n      tag_393\n        /* \"#utility.yul\":8667:8670   */\n      dup3\n        /* \"#utility.yul\":8578:8671   */\n      tag_394\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":8696:8698   */\n      0x40\n        /* \"#utility.yul\":8691:8694   */\n      dup3\n        /* \"#utility.yul\":8687:8699   */\n      add\n        /* \"#utility.yul\":8680:8699   */\n      swap1\n      pop\n        /* \"#utility.yul\":8339:8705   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8711:9077   */\n    tag_395:\n        /* \"#utility.yul\":8853:8856   */\n      0x00\n        /* \"#utility.yul\":8874:8941   */\n      tag_397\n        /* \"#utility.yul\":8938:8940   */\n      0x19\n        /* \"#utility.yul\":8933:8936   */\n      dup4\n        /* \"#utility.yul\":8874:8941   */\n      tag_366\n      jump\t// in\n    tag_397:\n        /* \"#utility.yul\":8867:8941   */\n      swap2\n      pop\n        /* \"#utility.yul\":8950:9043   */\n      tag_398\n        /* \"#utility.yul\":9039:9042   */\n      dup3\n        /* \"#utility.yul\":8950:9043   */\n      tag_399\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":9068:9070   */\n      0x20\n        /* \"#utility.yul\":9063:9066   */\n      dup3\n        /* \"#utility.yul\":9059:9071   */\n      add\n        /* \"#utility.yul\":9052:9071   */\n      swap1\n      pop\n        /* \"#utility.yul\":8711:9077   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9083:9449   */\n    tag_400:\n        /* \"#utility.yul\":9225:9228   */\n      0x00\n        /* \"#utility.yul\":9246:9313   */\n      tag_402\n        /* \"#utility.yul\":9310:9312   */\n      0x29\n        /* \"#utility.yul\":9305:9308   */\n      dup4\n        /* \"#utility.yul\":9246:9313   */\n      tag_366\n      jump\t// in\n    tag_402:\n        /* \"#utility.yul\":9239:9313   */\n      swap2\n      pop\n        /* \"#utility.yul\":9322:9415   */\n      tag_403\n        /* \"#utility.yul\":9411:9414   */\n      dup3\n        /* \"#utility.yul\":9322:9415   */\n      tag_404\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":9440:9442   */\n      0x40\n        /* \"#utility.yul\":9435:9438   */\n      dup3\n        /* \"#utility.yul\":9431:9443   */\n      add\n        /* \"#utility.yul\":9424:9443   */\n      swap1\n      pop\n        /* \"#utility.yul\":9083:9449   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9455:9821   */\n    tag_405:\n        /* \"#utility.yul\":9597:9600   */\n      0x00\n        /* \"#utility.yul\":9618:9685   */\n      tag_407\n        /* \"#utility.yul\":9682:9684   */\n      0x18\n        /* \"#utility.yul\":9677:9680   */\n      dup4\n        /* \"#utility.yul\":9618:9685   */\n      tag_366\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":9611:9685   */\n      swap2\n      pop\n        /* \"#utility.yul\":9694:9787   */\n      tag_408\n        /* \"#utility.yul\":9783:9786   */\n      dup3\n        /* \"#utility.yul\":9694:9787   */\n      tag_409\n      jump\t// in\n    tag_408:\n        /* \"#utility.yul\":9812:9814   */\n      0x20\n        /* \"#utility.yul\":9807:9810   */\n      dup3\n        /* \"#utility.yul\":9803:9815   */\n      add\n        /* \"#utility.yul\":9796:9815   */\n      swap1\n      pop\n        /* \"#utility.yul\":9455:9821   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9827:10193   */\n    tag_410:\n        /* \"#utility.yul\":9969:9972   */\n      0x00\n        /* \"#utility.yul\":9990:10057   */\n      tag_412\n        /* \"#utility.yul\":10054:10056   */\n      0x21\n        /* \"#utility.yul\":10049:10052   */\n      dup4\n        /* \"#utility.yul\":9990:10057   */\n      tag_366\n      jump\t// in\n    tag_412:\n        /* \"#utility.yul\":9983:10057   */\n      swap2\n      pop\n        /* \"#utility.yul\":10066:10159   */\n      tag_413\n        /* \"#utility.yul\":10155:10158   */\n      dup3\n        /* \"#utility.yul\":10066:10159   */\n      tag_414\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":10184:10186   */\n      0x40\n        /* \"#utility.yul\":10179:10182   */\n      dup3\n        /* \"#utility.yul\":10175:10187   */\n      add\n        /* \"#utility.yul\":10168:10187   */\n      swap1\n      pop\n        /* \"#utility.yul\":9827:10193   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10199:10565   */\n    tag_415:\n        /* \"#utility.yul\":10341:10344   */\n      0x00\n        /* \"#utility.yul\":10362:10429   */\n      tag_417\n        /* \"#utility.yul\":10426:10428   */\n      0x3d\n        /* \"#utility.yul\":10421:10424   */\n      dup4\n        /* \"#utility.yul\":10362:10429   */\n      tag_366\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":10355:10429   */\n      swap2\n      pop\n        /* \"#utility.yul\":10438:10531   */\n      tag_418\n        /* \"#utility.yul\":10527:10530   */\n      dup3\n        /* \"#utility.yul\":10438:10531   */\n      tag_419\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":10556:10558   */\n      0x40\n        /* \"#utility.yul\":10551:10554   */\n      dup3\n        /* \"#utility.yul\":10547:10559   */\n      add\n        /* \"#utility.yul\":10540:10559   */\n      swap1\n      pop\n        /* \"#utility.yul\":10199:10565   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10571:10689   */\n    tag_420:\n        /* \"#utility.yul\":10658:10682   */\n      tag_422\n        /* \"#utility.yul\":10676:10681   */\n      dup2\n        /* \"#utility.yul\":10658:10682   */\n      tag_423\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":10653:10656   */\n      dup3\n        /* \"#utility.yul\":10646:10683   */\n      mstore\n        /* \"#utility.yul\":10571:10689   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10695:11130   */\n    tag_152:\n        /* \"#utility.yul\":10875:10878   */\n      0x00\n        /* \"#utility.yul\":10897:10992   */\n      tag_425\n        /* \"#utility.yul\":10988:10991   */\n      dup3\n        /* \"#utility.yul\":10979:10985   */\n      dup6\n        /* \"#utility.yul\":10897:10992   */\n      tag_369\n      jump\t// in\n    tag_425:\n        /* \"#utility.yul\":10890:10992   */\n      swap2\n      pop\n        /* \"#utility.yul\":11009:11104   */\n      tag_426\n        /* \"#utility.yul\":11100:11103   */\n      dup3\n        /* \"#utility.yul\":11091:11097   */\n      dup5\n        /* \"#utility.yul\":11009:11104   */\n      tag_369\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":11002:11104   */\n      swap2\n      pop\n        /* \"#utility.yul\":11121:11124   */\n      dup2\n        /* \"#utility.yul\":11114:11124   */\n      swap1\n      pop\n        /* \"#utility.yul\":10695:11130   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11136:11358   */\n    tag_33:\n        /* \"#utility.yul\":11229:11233   */\n      0x00\n        /* \"#utility.yul\":11267:11269   */\n      0x20\n        /* \"#utility.yul\":11256:11265   */\n      dup3\n        /* \"#utility.yul\":11252:11270   */\n      add\n        /* \"#utility.yul\":11244:11270   */\n      swap1\n      pop\n        /* \"#utility.yul\":11280:11351   */\n      tag_428\n        /* \"#utility.yul\":11348:11349   */\n      0x00\n        /* \"#utility.yul\":11337:11346   */\n      dup4\n        /* \"#utility.yul\":11333:11350   */\n      add\n        /* \"#utility.yul\":11324:11330   */\n      dup5\n        /* \"#utility.yul\":11280:11351   */\n      tag_343\n      jump\t// in\n    tag_428:\n        /* \"#utility.yul\":11136:11358   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11364:12004   */\n    tag_221:\n        /* \"#utility.yul\":11559:11563   */\n      0x00\n        /* \"#utility.yul\":11597:11600   */\n      0x80\n        /* \"#utility.yul\":11586:11595   */\n      dup3\n        /* \"#utility.yul\":11582:11601   */\n      add\n        /* \"#utility.yul\":11574:11601   */\n      swap1\n      pop\n        /* \"#utility.yul\":11611:11682   */\n      tag_430\n        /* \"#utility.yul\":11679:11680   */\n      0x00\n        /* \"#utility.yul\":11668:11677   */\n      dup4\n        /* \"#utility.yul\":11664:11681   */\n      add\n        /* \"#utility.yul\":11655:11661   */\n      dup8\n        /* \"#utility.yul\":11611:11682   */\n      tag_343\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":11692:11764   */\n      tag_431\n        /* \"#utility.yul\":11760:11762   */\n      0x20\n        /* \"#utility.yul\":11749:11758   */\n      dup4\n        /* \"#utility.yul\":11745:11763   */\n      add\n        /* \"#utility.yul\":11736:11742   */\n      dup7\n        /* \"#utility.yul\":11692:11764   */\n      tag_343\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":11774:11846   */\n      tag_432\n        /* \"#utility.yul\":11842:11844   */\n      0x40\n        /* \"#utility.yul\":11831:11840   */\n      dup4\n        /* \"#utility.yul\":11827:11845   */\n      add\n        /* \"#utility.yul\":11818:11824   */\n      dup6\n        /* \"#utility.yul\":11774:11846   */\n      tag_420\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":11893:11902   */\n      dup2\n        /* \"#utility.yul\":11887:11891   */\n      dup2\n        /* \"#utility.yul\":11883:11903   */\n      sub\n        /* \"#utility.yul\":11878:11880   */\n      0x60\n        /* \"#utility.yul\":11867:11876   */\n      dup4\n        /* \"#utility.yul\":11863:11881   */\n      add\n        /* \"#utility.yul\":11856:11904   */\n      mstore\n        /* \"#utility.yul\":11921:11997   */\n      tag_433\n        /* \"#utility.yul\":11992:11996   */\n      dup2\n        /* \"#utility.yul\":11983:11989   */\n      dup5\n        /* \"#utility.yul\":11921:11997   */\n      tag_351\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":11913:11997   */\n      swap1\n      pop\n        /* \"#utility.yul\":11364:12004   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12010:12220   */\n    tag_23:\n        /* \"#utility.yul\":12097:12101   */\n      0x00\n        /* \"#utility.yul\":12135:12137   */\n      0x20\n        /* \"#utility.yul\":12124:12133   */\n      dup3\n        /* \"#utility.yul\":12120:12138   */\n      add\n        /* \"#utility.yul\":12112:12138   */\n      swap1\n      pop\n        /* \"#utility.yul\":12148:12213   */\n      tag_435\n        /* \"#utility.yul\":12210:12211   */\n      0x00\n        /* \"#utility.yul\":12199:12208   */\n      dup4\n        /* \"#utility.yul\":12195:12212   */\n      add\n        /* \"#utility.yul\":12186:12192   */\n      dup5\n        /* \"#utility.yul\":12148:12213   */\n      tag_347\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":12010:12220   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12226:12539   */\n    tag_27:\n        /* \"#utility.yul\":12339:12343   */\n      0x00\n        /* \"#utility.yul\":12377:12379   */\n      0x20\n        /* \"#utility.yul\":12366:12375   */\n      dup3\n        /* \"#utility.yul\":12362:12380   */\n      add\n        /* \"#utility.yul\":12354:12380   */\n      swap1\n      pop\n        /* \"#utility.yul\":12426:12435   */\n      dup2\n        /* \"#utility.yul\":12420:12424   */\n      dup2\n        /* \"#utility.yul\":12416:12436   */\n      sub\n        /* \"#utility.yul\":12412:12413   */\n      0x00\n        /* \"#utility.yul\":12401:12410   */\n      dup4\n        /* \"#utility.yul\":12397:12414   */\n      add\n        /* \"#utility.yul\":12390:12437   */\n      mstore\n        /* \"#utility.yul\":12454:12532   */\n      tag_437\n        /* \"#utility.yul\":12527:12531   */\n      dup2\n        /* \"#utility.yul\":12518:12524   */\n      dup5\n        /* \"#utility.yul\":12454:12532   */\n      tag_361\n      jump\t// in\n    tag_437:\n        /* \"#utility.yul\":12446:12532   */\n      swap1\n      pop\n        /* \"#utility.yul\":12226:12539   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12545:12964   */\n    tag_111:\n        /* \"#utility.yul\":12711:12715   */\n      0x00\n        /* \"#utility.yul\":12749:12751   */\n      0x20\n        /* \"#utility.yul\":12738:12747   */\n      dup3\n        /* \"#utility.yul\":12734:12752   */\n      add\n        /* \"#utility.yul\":12726:12752   */\n      swap1\n      pop\n        /* \"#utility.yul\":12798:12807   */\n      dup2\n        /* \"#utility.yul\":12792:12796   */\n      dup2\n        /* \"#utility.yul\":12788:12808   */\n      sub\n        /* \"#utility.yul\":12784:12785   */\n      0x00\n        /* \"#utility.yul\":12773:12782   */\n      dup4\n        /* \"#utility.yul\":12769:12786   */\n      add\n        /* \"#utility.yul\":12762:12809   */\n      mstore\n        /* \"#utility.yul\":12826:12957   */\n      tag_439\n        /* \"#utility.yul\":12952:12956   */\n      dup2\n        /* \"#utility.yul\":12826:12957   */\n      tag_375\n      jump\t// in\n    tag_439:\n        /* \"#utility.yul\":12818:12957   */\n      swap1\n      pop\n        /* \"#utility.yul\":12545:12964   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12970:13389   */\n    tag_196:\n        /* \"#utility.yul\":13136:13140   */\n      0x00\n        /* \"#utility.yul\":13174:13176   */\n      0x20\n        /* \"#utility.yul\":13163:13172   */\n      dup3\n        /* \"#utility.yul\":13159:13177   */\n      add\n        /* \"#utility.yul\":13151:13177   */\n      swap1\n      pop\n        /* \"#utility.yul\":13223:13232   */\n      dup2\n        /* \"#utility.yul\":13217:13221   */\n      dup2\n        /* \"#utility.yul\":13213:13233   */\n      sub\n        /* \"#utility.yul\":13209:13210   */\n      0x00\n        /* \"#utility.yul\":13198:13207   */\n      dup4\n        /* \"#utility.yul\":13194:13211   */\n      add\n        /* \"#utility.yul\":13187:13234   */\n      mstore\n        /* \"#utility.yul\":13251:13382   */\n      tag_441\n        /* \"#utility.yul\":13377:13381   */\n      dup2\n        /* \"#utility.yul\":13251:13382   */\n      tag_380\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":13243:13382   */\n      swap1\n      pop\n        /* \"#utility.yul\":12970:13389   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13395:13814   */\n    tag_173:\n        /* \"#utility.yul\":13561:13565   */\n      0x00\n        /* \"#utility.yul\":13599:13601   */\n      0x20\n        /* \"#utility.yul\":13588:13597   */\n      dup3\n        /* \"#utility.yul\":13584:13602   */\n      add\n        /* \"#utility.yul\":13576:13602   */\n      swap1\n      pop\n        /* \"#utility.yul\":13648:13657   */\n      dup2\n        /* \"#utility.yul\":13642:13646   */\n      dup2\n        /* \"#utility.yul\":13638:13658   */\n      sub\n        /* \"#utility.yul\":13634:13635   */\n      0x00\n        /* \"#utility.yul\":13623:13632   */\n      dup4\n        /* \"#utility.yul\":13619:13636   */\n      add\n        /* \"#utility.yul\":13612:13659   */\n      mstore\n        /* \"#utility.yul\":13676:13807   */\n      tag_443\n        /* \"#utility.yul\":13802:13806   */\n      dup2\n        /* \"#utility.yul\":13676:13807   */\n      tag_385\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":13668:13807   */\n      swap1\n      pop\n        /* \"#utility.yul\":13395:13814   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13820:14239   */\n    tag_176:\n        /* \"#utility.yul\":13986:13990   */\n      0x00\n        /* \"#utility.yul\":14024:14026   */\n      0x20\n        /* \"#utility.yul\":14013:14022   */\n      dup3\n        /* \"#utility.yul\":14009:14027   */\n      add\n        /* \"#utility.yul\":14001:14027   */\n      swap1\n      pop\n        /* \"#utility.yul\":14073:14082   */\n      dup2\n        /* \"#utility.yul\":14067:14071   */\n      dup2\n        /* \"#utility.yul\":14063:14083   */\n      sub\n        /* \"#utility.yul\":14059:14060   */\n      0x00\n        /* \"#utility.yul\":14048:14057   */\n      dup4\n        /* \"#utility.yul\":14044:14061   */\n      add\n        /* \"#utility.yul\":14037:14084   */\n      mstore\n        /* \"#utility.yul\":14101:14232   */\n      tag_445\n        /* \"#utility.yul\":14227:14231   */\n      dup2\n        /* \"#utility.yul\":14101:14232   */\n      tag_390\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":14093:14232   */\n      swap1\n      pop\n        /* \"#utility.yul\":13820:14239   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14245:14664   */\n    tag_188:\n        /* \"#utility.yul\":14411:14415   */\n      0x00\n        /* \"#utility.yul\":14449:14451   */\n      0x20\n        /* \"#utility.yul\":14438:14447   */\n      dup3\n        /* \"#utility.yul\":14434:14452   */\n      add\n        /* \"#utility.yul\":14426:14452   */\n      swap1\n      pop\n        /* \"#utility.yul\":14498:14507   */\n      dup2\n        /* \"#utility.yul\":14492:14496   */\n      dup2\n        /* \"#utility.yul\":14488:14508   */\n      sub\n        /* \"#utility.yul\":14484:14485   */\n      0x00\n        /* \"#utility.yul\":14473:14482   */\n      dup4\n        /* \"#utility.yul\":14469:14486   */\n      add\n        /* \"#utility.yul\":14462:14509   */\n      mstore\n        /* \"#utility.yul\":14526:14657   */\n      tag_447\n        /* \"#utility.yul\":14652:14656   */\n      dup2\n        /* \"#utility.yul\":14526:14657   */\n      tag_395\n      jump\t// in\n    tag_447:\n        /* \"#utility.yul\":14518:14657   */\n      swap1\n      pop\n        /* \"#utility.yul\":14245:14664   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14670:15089   */\n    tag_125:\n        /* \"#utility.yul\":14836:14840   */\n      0x00\n        /* \"#utility.yul\":14874:14876   */\n      0x20\n        /* \"#utility.yul\":14863:14872   */\n      dup3\n        /* \"#utility.yul\":14859:14877   */\n      add\n        /* \"#utility.yul\":14851:14877   */\n      swap1\n      pop\n        /* \"#utility.yul\":14923:14932   */\n      dup2\n        /* \"#utility.yul\":14917:14921   */\n      dup2\n        /* \"#utility.yul\":14913:14933   */\n      sub\n        /* \"#utility.yul\":14909:14910   */\n      0x00\n        /* \"#utility.yul\":14898:14907   */\n      dup4\n        /* \"#utility.yul\":14894:14911   */\n      add\n        /* \"#utility.yul\":14887:14934   */\n      mstore\n        /* \"#utility.yul\":14951:15082   */\n      tag_449\n        /* \"#utility.yul\":15077:15081   */\n      dup2\n        /* \"#utility.yul\":14951:15082   */\n      tag_400\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":14943:15082   */\n      swap1\n      pop\n        /* \"#utility.yul\":14670:15089   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15095:15514   */\n    tag_121:\n        /* \"#utility.yul\":15261:15265   */\n      0x00\n        /* \"#utility.yul\":15299:15301   */\n      0x20\n        /* \"#utility.yul\":15288:15297   */\n      dup3\n        /* \"#utility.yul\":15284:15302   */\n      add\n        /* \"#utility.yul\":15276:15302   */\n      swap1\n      pop\n        /* \"#utility.yul\":15348:15357   */\n      dup2\n        /* \"#utility.yul\":15342:15346   */\n      dup2\n        /* \"#utility.yul\":15338:15358   */\n      sub\n        /* \"#utility.yul\":15334:15335   */\n      0x00\n        /* \"#utility.yul\":15323:15332   */\n      dup4\n        /* \"#utility.yul\":15319:15336   */\n      add\n        /* \"#utility.yul\":15312:15359   */\n      mstore\n        /* \"#utility.yul\":15376:15507   */\n      tag_451\n        /* \"#utility.yul\":15502:15506   */\n      dup2\n        /* \"#utility.yul\":15376:15507   */\n      tag_405\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":15368:15507   */\n      swap1\n      pop\n        /* \"#utility.yul\":15095:15514   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15520:15939   */\n    tag_94:\n        /* \"#utility.yul\":15686:15690   */\n      0x00\n        /* \"#utility.yul\":15724:15726   */\n      0x20\n        /* \"#utility.yul\":15713:15722   */\n      dup3\n        /* \"#utility.yul\":15709:15727   */\n      add\n        /* \"#utility.yul\":15701:15727   */\n      swap1\n      pop\n        /* \"#utility.yul\":15773:15782   */\n      dup2\n        /* \"#utility.yul\":15767:15771   */\n      dup2\n        /* \"#utility.yul\":15763:15783   */\n      sub\n        /* \"#utility.yul\":15759:15760   */\n      0x00\n        /* \"#utility.yul\":15748:15757   */\n      dup4\n        /* \"#utility.yul\":15744:15761   */\n      add\n        /* \"#utility.yul\":15737:15784   */\n      mstore\n        /* \"#utility.yul\":15801:15932   */\n      tag_453\n        /* \"#utility.yul\":15927:15931   */\n      dup2\n        /* \"#utility.yul\":15801:15932   */\n      tag_410\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":15793:15932   */\n      swap1\n      pop\n        /* \"#utility.yul\":15520:15939   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15945:16364   */\n    tag_102:\n        /* \"#utility.yul\":16111:16115   */\n      0x00\n        /* \"#utility.yul\":16149:16151   */\n      0x20\n        /* \"#utility.yul\":16138:16147   */\n      dup3\n        /* \"#utility.yul\":16134:16152   */\n      add\n        /* \"#utility.yul\":16126:16152   */\n      swap1\n      pop\n        /* \"#utility.yul\":16198:16207   */\n      dup2\n        /* \"#utility.yul\":16192:16196   */\n      dup2\n        /* \"#utility.yul\":16188:16208   */\n      sub\n        /* \"#utility.yul\":16184:16185   */\n      0x00\n        /* \"#utility.yul\":16173:16182   */\n      dup4\n        /* \"#utility.yul\":16169:16186   */\n      add\n        /* \"#utility.yul\":16162:16209   */\n      mstore\n        /* \"#utility.yul\":16226:16357   */\n      tag_455\n        /* \"#utility.yul\":16352:16356   */\n      dup2\n        /* \"#utility.yul\":16226:16357   */\n      tag_415\n      jump\t// in\n    tag_455:\n        /* \"#utility.yul\":16218:16357   */\n      swap1\n      pop\n        /* \"#utility.yul\":15945:16364   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16370:16592   */\n    tag_54:\n        /* \"#utility.yul\":16463:16467   */\n      0x00\n        /* \"#utility.yul\":16501:16503   */\n      0x20\n        /* \"#utility.yul\":16490:16499   */\n      dup3\n        /* \"#utility.yul\":16486:16504   */\n      add\n        /* \"#utility.yul\":16478:16504   */\n      swap1\n      pop\n        /* \"#utility.yul\":16514:16585   */\n      tag_457\n        /* \"#utility.yul\":16582:16583   */\n      0x00\n        /* \"#utility.yul\":16571:16580   */\n      dup4\n        /* \"#utility.yul\":16567:16584   */\n      add\n        /* \"#utility.yul\":16558:16564   */\n      dup5\n        /* \"#utility.yul\":16514:16585   */\n      tag_420\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":16370:16592   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16598:16727   */\n    tag_264:\n        /* \"#utility.yul\":16632:16638   */\n      0x00\n        /* \"#utility.yul\":16659:16679   */\n      tag_459\n      tag_460\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":16649:16679   */\n      swap1\n      pop\n        /* \"#utility.yul\":16688:16721   */\n      tag_461\n        /* \"#utility.yul\":16716:16720   */\n      dup3\n        /* \"#utility.yul\":16708:16714   */\n      dup3\n        /* \"#utility.yul\":16688:16721   */\n      tag_462\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":16598:16727   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16733:16808   */\n    tag_460:\n        /* \"#utility.yul\":16766:16772   */\n      0x00\n        /* \"#utility.yul\":16799:16801   */\n      0x40\n        /* \"#utility.yul\":16793:16802   */\n      mload\n        /* \"#utility.yul\":16783:16802   */\n      swap1\n      pop\n        /* \"#utility.yul\":16733:16808   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":16814:17121   */\n    tag_263:\n        /* \"#utility.yul\":16875:16879   */\n      0x00\n        /* \"#utility.yul\":16965:16983   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":16957:16963   */\n      dup3\n        /* \"#utility.yul\":16954:16984   */\n      gt\n        /* \"#utility.yul\":16951:17007   */\n      iszero\n      tag_465\n      jumpi\n        /* \"#utility.yul\":16987:17005   */\n      tag_466\n      tag_203\n      jump\t// in\n    tag_466:\n        /* \"#utility.yul\":16951:17007   */\n    tag_465:\n        /* \"#utility.yul\":17025:17054   */\n      tag_467\n        /* \"#utility.yul\":17047:17053   */\n      dup3\n        /* \"#utility.yul\":17025:17054   */\n      tag_360\n      jump\t// in\n    tag_467:\n        /* \"#utility.yul\":17017:17054   */\n      swap1\n      pop\n        /* \"#utility.yul\":17109:17113   */\n      0x20\n        /* \"#utility.yul\":17103:17107   */\n      dup2\n        /* \"#utility.yul\":17099:17114   */\n      add\n        /* \"#utility.yul\":17091:17114   */\n      swap1\n      pop\n        /* \"#utility.yul\":16814:17121   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17127:17225   */\n    tag_354:\n        /* \"#utility.yul\":17178:17184   */\n      0x00\n        /* \"#utility.yul\":17212:17217   */\n      dup2\n        /* \"#utility.yul\":17206:17218   */\n      mload\n        /* \"#utility.yul\":17196:17218   */\n      swap1\n      pop\n        /* \"#utility.yul\":17127:17225   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17231:17330   */\n    tag_364:\n        /* \"#utility.yul\":17283:17289   */\n      0x00\n        /* \"#utility.yul\":17317:17322   */\n      dup2\n        /* \"#utility.yul\":17311:17323   */\n      mload\n        /* \"#utility.yul\":17301:17323   */\n      swap1\n      pop\n        /* \"#utility.yul\":17231:17330   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17336:17504   */\n    tag_356:\n        /* \"#utility.yul\":17419:17430   */\n      0x00\n        /* \"#utility.yul\":17453:17459   */\n      dup3\n        /* \"#utility.yul\":17448:17451   */\n      dup3\n        /* \"#utility.yul\":17441:17460   */\n      mstore\n        /* \"#utility.yul\":17493:17497   */\n      0x20\n        /* \"#utility.yul\":17488:17491   */\n      dup3\n        /* \"#utility.yul\":17484:17498   */\n      add\n        /* \"#utility.yul\":17469:17498   */\n      swap1\n      pop\n        /* \"#utility.yul\":17336:17504   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17510:17679   */\n    tag_366:\n        /* \"#utility.yul\":17594:17605   */\n      0x00\n        /* \"#utility.yul\":17628:17634   */\n      dup3\n        /* \"#utility.yul\":17623:17626   */\n      dup3\n        /* \"#utility.yul\":17616:17635   */\n      mstore\n        /* \"#utility.yul\":17668:17672   */\n      0x20\n        /* \"#utility.yul\":17663:17666   */\n      dup3\n        /* \"#utility.yul\":17659:17673   */\n      add\n        /* \"#utility.yul\":17644:17673   */\n      swap1\n      pop\n        /* \"#utility.yul\":17510:17679   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17685:17833   */\n    tag_373:\n        /* \"#utility.yul\":17787:17798   */\n      0x00\n        /* \"#utility.yul\":17824:17827   */\n      dup2\n        /* \"#utility.yul\":17809:17827   */\n      swap1\n      pop\n        /* \"#utility.yul\":17685:17833   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17839:17935   */\n    tag_346:\n        /* \"#utility.yul\":17876:17883   */\n      0x00\n        /* \"#utility.yul\":17905:17929   */\n      tag_474\n        /* \"#utility.yul\":17923:17928   */\n      dup3\n        /* \"#utility.yul\":17905:17929   */\n      tag_475\n      jump\t// in\n    tag_474:\n        /* \"#utility.yul\":17894:17929   */\n      swap1\n      pop\n        /* \"#utility.yul\":17839:17935   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17941:18031   */\n    tag_350:\n        /* \"#utility.yul\":17975:17982   */\n      0x00\n        /* \"#utility.yul\":18018:18023   */\n      dup2\n        /* \"#utility.yul\":18011:18024   */\n      iszero\n        /* \"#utility.yul\":18004:18025   */\n      iszero\n        /* \"#utility.yul\":17993:18025   */\n      swap1\n      pop\n        /* \"#utility.yul\":17941:18031   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18037:18186   */\n    tag_477:\n        /* \"#utility.yul\":18073:18080   */\n      0x00\n        /* \"#utility.yul\":18113:18179   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":18106:18111   */\n      dup3\n        /* \"#utility.yul\":18102:18180   */\n      and\n        /* \"#utility.yul\":18091:18180   */\n      swap1\n      pop\n        /* \"#utility.yul\":18037:18186   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18192:18318   */\n    tag_475:\n        /* \"#utility.yul\":18229:18236   */\n      0x00\n        /* \"#utility.yul\":18269:18311   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":18262:18267   */\n      dup3\n        /* \"#utility.yul\":18258:18312   */\n      and\n        /* \"#utility.yul\":18247:18312   */\n      swap1\n      pop\n        /* \"#utility.yul\":18192:18318   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18324:18401   */\n    tag_423:\n        /* \"#utility.yul\":18361:18368   */\n      0x00\n        /* \"#utility.yul\":18390:18395   */\n      dup2\n        /* \"#utility.yul\":18379:18395   */\n      swap1\n      pop\n        /* \"#utility.yul\":18324:18401   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18407:18561   */\n    tag_269:\n        /* \"#utility.yul\":18491:18497   */\n      dup3\n        /* \"#utility.yul\":18486:18489   */\n      dup2\n        /* \"#utility.yul\":18481:18484   */\n      dup4\n        /* \"#utility.yul\":18468:18498   */\n      calldatacopy\n        /* \"#utility.yul\":18553:18554   */\n      0x00\n        /* \"#utility.yul\":18544:18550   */\n      dup4\n        /* \"#utility.yul\":18539:18542   */\n      dup4\n        /* \"#utility.yul\":18535:18551   */\n      add\n        /* \"#utility.yul\":18528:18555   */\n      mstore\n        /* \"#utility.yul\":18407:18561   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18567:18874   */\n    tag_358:\n        /* \"#utility.yul\":18635:18636   */\n      0x00\n        /* \"#utility.yul\":18645:18758   */\n    tag_483:\n        /* \"#utility.yul\":18659:18665   */\n      dup4\n        /* \"#utility.yul\":18656:18657   */\n      dup2\n        /* \"#utility.yul\":18653:18666   */\n      lt\n        /* \"#utility.yul\":18645:18758   */\n      iszero\n      tag_485\n      jumpi\n        /* \"#utility.yul\":18744:18745   */\n      dup1\n        /* \"#utility.yul\":18739:18742   */\n      dup3\n        /* \"#utility.yul\":18735:18746   */\n      add\n        /* \"#utility.yul\":18729:18747   */\n      mload\n        /* \"#utility.yul\":18725:18726   */\n      dup2\n        /* \"#utility.yul\":18720:18723   */\n      dup5\n        /* \"#utility.yul\":18716:18727   */\n      add\n        /* \"#utility.yul\":18709:18748   */\n      mstore\n        /* \"#utility.yul\":18681:18683   */\n      0x20\n        /* \"#utility.yul\":18678:18679   */\n      dup2\n        /* \"#utility.yul\":18674:18684   */\n      add\n        /* \"#utility.yul\":18669:18684   */\n      swap1\n      pop\n        /* \"#utility.yul\":18645:18758   */\n      jump(tag_483)\n    tag_485:\n        /* \"#utility.yul\":18776:18782   */\n      dup4\n        /* \"#utility.yul\":18773:18774   */\n      dup2\n        /* \"#utility.yul\":18770:18783   */\n      gt\n        /* \"#utility.yul\":18767:18868   */\n      iszero\n      tag_486\n      jumpi\n        /* \"#utility.yul\":18856:18857   */\n      0x00\n        /* \"#utility.yul\":18847:18853   */\n      dup5\n        /* \"#utility.yul\":18842:18845   */\n      dup5\n        /* \"#utility.yul\":18838:18854   */\n      add\n        /* \"#utility.yul\":18831:18858   */\n      mstore\n        /* \"#utility.yul\":18767:18868   */\n    tag_486:\n        /* \"#utility.yul\":18616:18874   */\n      pop\n        /* \"#utility.yul\":18567:18874   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18880:19200   */\n    tag_82:\n        /* \"#utility.yul\":18924:18930   */\n      0x00\n        /* \"#utility.yul\":18961:18962   */\n      0x02\n        /* \"#utility.yul\":18955:18959   */\n      dup3\n        /* \"#utility.yul\":18951:18963   */\n      div\n        /* \"#utility.yul\":18941:18963   */\n      swap1\n      pop\n        /* \"#utility.yul\":19008:19009   */\n      0x01\n        /* \"#utility.yul\":19002:19006   */\n      dup3\n        /* \"#utility.yul\":18998:19010   */\n      and\n        /* \"#utility.yul\":19029:19047   */\n      dup1\n        /* \"#utility.yul\":19019:19100   */\n      tag_488\n      jumpi\n        /* \"#utility.yul\":19085:19089   */\n      0x7f\n        /* \"#utility.yul\":19077:19083   */\n      dup3\n        /* \"#utility.yul\":19073:19090   */\n      and\n        /* \"#utility.yul\":19063:19090   */\n      swap2\n      pop\n        /* \"#utility.yul\":19019:19100   */\n    tag_488:\n        /* \"#utility.yul\":19147:19149   */\n      0x20\n        /* \"#utility.yul\":19139:19145   */\n      dup3\n        /* \"#utility.yul\":19136:19150   */\n      lt\n        /* \"#utility.yul\":19116:19134   */\n      dup2\n        /* \"#utility.yul\":19113:19151   */\n      eq\n        /* \"#utility.yul\":19110:19194   */\n      iszero\n      tag_489\n      jumpi\n        /* \"#utility.yul\":19166:19184   */\n      tag_490\n      tag_491\n      jump\t// in\n    tag_490:\n        /* \"#utility.yul\":19110:19194   */\n    tag_489:\n        /* \"#utility.yul\":18931:19200   */\n      pop\n        /* \"#utility.yul\":18880:19200   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19206:19487   */\n    tag_462:\n        /* \"#utility.yul\":19289:19316   */\n      tag_493\n        /* \"#utility.yul\":19311:19315   */\n      dup3\n        /* \"#utility.yul\":19289:19316   */\n      tag_360\n      jump\t// in\n    tag_493:\n        /* \"#utility.yul\":19281:19287   */\n      dup2\n        /* \"#utility.yul\":19277:19317   */\n      add\n        /* \"#utility.yul\":19419:19425   */\n      dup2\n        /* \"#utility.yul\":19407:19417   */\n      dup2\n        /* \"#utility.yul\":19404:19426   */\n      lt\n        /* \"#utility.yul\":19383:19401   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":19371:19381   */\n      dup3\n        /* \"#utility.yul\":19368:19402   */\n      gt\n        /* \"#utility.yul\":19365:19427   */\n      or\n        /* \"#utility.yul\":19362:19450   */\n      iszero\n      tag_494\n      jumpi\n        /* \"#utility.yul\":19430:19448   */\n      tag_495\n      tag_203\n      jump\t// in\n    tag_495:\n        /* \"#utility.yul\":19362:19450   */\n    tag_494:\n        /* \"#utility.yul\":19470:19480   */\n      dup1\n        /* \"#utility.yul\":19466:19468   */\n      0x40\n        /* \"#utility.yul\":19459:19481   */\n      mstore\n        /* \"#utility.yul\":19249:19487   */\n      pop\n        /* \"#utility.yul\":19206:19487   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19493:19673   */\n    tag_209:\n        /* \"#utility.yul\":19541:19618   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":19538:19539   */\n      0x00\n        /* \"#utility.yul\":19531:19619   */\n      mstore\n        /* \"#utility.yul\":19638:19642   */\n      0x12\n        /* \"#utility.yul\":19635:19636   */\n      0x04\n        /* \"#utility.yul\":19628:19643   */\n      mstore\n        /* \"#utility.yul\":19662:19666   */\n      0x24\n        /* \"#utility.yul\":19659:19660   */\n      0x00\n        /* \"#utility.yul\":19652:19667   */\n      revert\n        /* \"#utility.yul\":19679:19859   */\n    tag_491:\n        /* \"#utility.yul\":19727:19804   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":19724:19725   */\n      0x00\n        /* \"#utility.yul\":19717:19805   */\n      mstore\n        /* \"#utility.yul\":19824:19828   */\n      0x22\n        /* \"#utility.yul\":19821:19822   */\n      0x04\n        /* \"#utility.yul\":19814:19829   */\n      mstore\n        /* \"#utility.yul\":19848:19852   */\n      0x24\n        /* \"#utility.yul\":19845:19846   */\n      0x00\n        /* \"#utility.yul\":19838:19853   */\n      revert\n        /* \"#utility.yul\":19865:20045   */\n    tag_203:\n        /* \"#utility.yul\":19913:19990   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":19910:19911   */\n      0x00\n        /* \"#utility.yul\":19903:19991   */\n      mstore\n        /* \"#utility.yul\":20010:20014   */\n      0x41\n        /* \"#utility.yul\":20007:20008   */\n      0x04\n        /* \"#utility.yul\":20000:20015   */\n      mstore\n        /* \"#utility.yul\":20034:20038   */\n      0x24\n        /* \"#utility.yul\":20031:20032   */\n      0x00\n        /* \"#utility.yul\":20024:20039   */\n      revert\n        /* \"#utility.yul\":20051:20168   */\n    tag_289:\n        /* \"#utility.yul\":20160:20161   */\n      0x00\n        /* \"#utility.yul\":20157:20158   */\n      dup1\n        /* \"#utility.yul\":20150:20162   */\n      revert\n        /* \"#utility.yul\":20174:20291   */\n    tag_267:\n        /* \"#utility.yul\":20283:20284   */\n      0x00\n        /* \"#utility.yul\":20280:20281   */\n      dup1\n        /* \"#utility.yul\":20273:20285   */\n      revert\n        /* \"#utility.yul\":20297:20414   */\n    tag_319:\n        /* \"#utility.yul\":20406:20407   */\n      0x00\n        /* \"#utility.yul\":20403:20404   */\n      dup1\n        /* \"#utility.yul\":20396:20408   */\n      revert\n        /* \"#utility.yul\":20420:20537   */\n    tag_298:\n        /* \"#utility.yul\":20529:20530   */\n      0x00\n        /* \"#utility.yul\":20526:20527   */\n      dup1\n        /* \"#utility.yul\":20519:20531   */\n      revert\n        /* \"#utility.yul\":20543:20645   */\n    tag_360:\n        /* \"#utility.yul\":20584:20590   */\n      0x00\n        /* \"#utility.yul\":20635:20637   */\n      0x1f\n        /* \"#utility.yul\":20631:20638   */\n      not\n        /* \"#utility.yul\":20626:20628   */\n      0x1f\n        /* \"#utility.yul\":20619:20624   */\n      dup4\n        /* \"#utility.yul\":20615:20629   */\n      add\n        /* \"#utility.yul\":20611:20639   */\n      and\n        /* \"#utility.yul\":20601:20639   */\n      swap1\n      pop\n        /* \"#utility.yul\":20543:20645   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20651:20883   */\n    tag_379:\n        /* \"#utility.yul\":20791:20825   */\n      0x4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65\n        /* \"#utility.yul\":20787:20788   */\n      0x00\n        /* \"#utility.yul\":20779:20785   */\n      dup3\n        /* \"#utility.yul\":20775:20789   */\n      add\n        /* \"#utility.yul\":20768:20826   */\n      mstore\n        /* \"#utility.yul\":20860:20875   */\n      0x72206f7220617070726f76656400000000000000000000000000000000000000\n        /* \"#utility.yul\":20855:20857   */\n      0x20\n        /* \"#utility.yul\":20847:20853   */\n      dup3\n        /* \"#utility.yul\":20843:20858   */\n      add\n        /* \"#utility.yul\":20836:20876   */\n      mstore\n        /* \"#utility.yul\":20651:20883   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20889:21126   */\n    tag_384:\n        /* \"#utility.yul\":21029:21063   */\n      0x4552433732313a207472616e7366657220746f206e6f6e204552433732315265\n        /* \"#utility.yul\":21025:21026   */\n      0x00\n        /* \"#utility.yul\":21017:21023   */\n      dup3\n        /* \"#utility.yul\":21013:21027   */\n      add\n        /* \"#utility.yul\":21006:21064   */\n      mstore\n        /* \"#utility.yul\":21098:21118   */\n      0x63656976657220696d706c656d656e7465720000000000000000000000000000\n        /* \"#utility.yul\":21093:21095   */\n      0x20\n        /* \"#utility.yul\":21085:21091   */\n      dup3\n        /* \"#utility.yul\":21081:21096   */\n      add\n        /* \"#utility.yul\":21074:21119   */\n      mstore\n        /* \"#utility.yul\":20889:21126   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21132:21356   */\n    tag_389:\n        /* \"#utility.yul\":21272:21306   */\n      0x4552433732313a207472616e736665722066726f6d20696e636f727265637420\n        /* \"#utility.yul\":21268:21269   */\n      0x00\n        /* \"#utility.yul\":21260:21266   */\n      dup3\n        /* \"#utility.yul\":21256:21270   */\n      add\n        /* \"#utility.yul\":21249:21307   */\n      mstore\n        /* \"#utility.yul\":21341:21348   */\n      0x6f776e6572000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21336:21338   */\n      0x20\n        /* \"#utility.yul\":21328:21334   */\n      dup3\n        /* \"#utility.yul\":21324:21339   */\n      add\n        /* \"#utility.yul\":21317:21349   */\n      mstore\n        /* \"#utility.yul\":21132:21356   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21362:21585   */\n    tag_394:\n        /* \"#utility.yul\":21502:21536   */\n      0x4552433732313a207472616e7366657220746f20746865207a65726f20616464\n        /* \"#utility.yul\":21498:21499   */\n      0x00\n        /* \"#utility.yul\":21490:21496   */\n      dup3\n        /* \"#utility.yul\":21486:21500   */\n      add\n        /* \"#utility.yul\":21479:21537   */\n      mstore\n        /* \"#utility.yul\":21571:21577   */\n      0x7265737300000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21566:21568   */\n      0x20\n        /* \"#utility.yul\":21558:21564   */\n      dup3\n        /* \"#utility.yul\":21554:21569   */\n      add\n        /* \"#utility.yul\":21547:21578   */\n      mstore\n        /* \"#utility.yul\":21362:21585   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21591:21766   */\n    tag_399:\n        /* \"#utility.yul\":21731:21758   */\n      0x4552433732313a20617070726f766520746f2063616c6c657200000000000000\n        /* \"#utility.yul\":21727:21728   */\n      0x00\n        /* \"#utility.yul\":21719:21725   */\n      dup3\n        /* \"#utility.yul\":21715:21729   */\n      add\n        /* \"#utility.yul\":21708:21759   */\n      mstore\n        /* \"#utility.yul\":21591:21766   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21772:22000   */\n    tag_404:\n        /* \"#utility.yul\":21912:21946   */\n      0x4552433732313a2061646472657373207a65726f206973206e6f742061207661\n        /* \"#utility.yul\":21908:21909   */\n      0x00\n        /* \"#utility.yul\":21900:21906   */\n      dup3\n        /* \"#utility.yul\":21896:21910   */\n      add\n        /* \"#utility.yul\":21889:21947   */\n      mstore\n        /* \"#utility.yul\":21981:21992   */\n      0x6c6964206f776e65720000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21976:21978   */\n      0x20\n        /* \"#utility.yul\":21968:21974   */\n      dup3\n        /* \"#utility.yul\":21964:21979   */\n      add\n        /* \"#utility.yul\":21957:21993   */\n      mstore\n        /* \"#utility.yul\":21772:22000   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22006:22180   */\n    tag_409:\n        /* \"#utility.yul\":22146:22172   */\n      0x4552433732313a20696e76616c696420746f6b656e2049440000000000000000\n        /* \"#utility.yul\":22142:22143   */\n      0x00\n        /* \"#utility.yul\":22134:22140   */\n      dup3\n        /* \"#utility.yul\":22130:22144   */\n      add\n        /* \"#utility.yul\":22123:22173   */\n      mstore\n        /* \"#utility.yul\":22006:22180   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22186:22406   */\n    tag_414:\n        /* \"#utility.yul\":22326:22360   */\n      0x4552433732313a20617070726f76616c20746f2063757272656e74206f776e65\n        /* \"#utility.yul\":22322:22323   */\n      0x00\n        /* \"#utility.yul\":22314:22320   */\n      dup3\n        /* \"#utility.yul\":22310:22324   */\n      add\n        /* \"#utility.yul\":22303:22361   */\n      mstore\n        /* \"#utility.yul\":22395:22398   */\n      0x7200000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":22390:22392   */\n      0x20\n        /* \"#utility.yul\":22382:22388   */\n      dup3\n        /* \"#utility.yul\":22378:22393   */\n      add\n        /* \"#utility.yul\":22371:22399   */\n      mstore\n        /* \"#utility.yul\":22186:22406   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22412:22660   */\n    tag_419:\n        /* \"#utility.yul\":22552:22586   */\n      0x4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f\n        /* \"#utility.yul\":22548:22549   */\n      0x00\n        /* \"#utility.yul\":22540:22546   */\n      dup3\n        /* \"#utility.yul\":22536:22550   */\n      add\n        /* \"#utility.yul\":22529:22587   */\n      mstore\n        /* \"#utility.yul\":22621:22652   */\n      0x6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000\n        /* \"#utility.yul\":22616:22618   */\n      0x20\n        /* \"#utility.yul\":22608:22614   */\n      dup3\n        /* \"#utility.yul\":22604:22619   */\n      add\n        /* \"#utility.yul\":22597:22653   */\n      mstore\n        /* \"#utility.yul\":22412:22660   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22666:22788   */\n    tag_273:\n        /* \"#utility.yul\":22739:22763   */\n      tag_514\n        /* \"#utility.yul\":22757:22762   */\n      dup2\n        /* \"#utility.yul\":22739:22763   */\n      tag_346\n      jump\t// in\n    tag_514:\n        /* \"#utility.yul\":22732:22737   */\n      dup2\n        /* \"#utility.yul\":22729:22764   */\n      eq\n        /* \"#utility.yul\":22719:22782   */\n      tag_515\n      jumpi\n        /* \"#utility.yul\":22778:22779   */\n      0x00\n        /* \"#utility.yul\":22775:22776   */\n      dup1\n        /* \"#utility.yul\":22768:22780   */\n      revert\n        /* \"#utility.yul\":22719:22782   */\n    tag_515:\n        /* \"#utility.yul\":22666:22788   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22794:22910   */\n    tag_277:\n        /* \"#utility.yul\":22864:22885   */\n      tag_517\n        /* \"#utility.yul\":22879:22884   */\n      dup2\n        /* \"#utility.yul\":22864:22885   */\n      tag_350\n      jump\t// in\n    tag_517:\n        /* \"#utility.yul\":22857:22862   */\n      dup2\n        /* \"#utility.yul\":22854:22886   */\n      eq\n        /* \"#utility.yul\":22844:22904   */\n      tag_518\n      jumpi\n        /* \"#utility.yul\":22900:22901   */\n      0x00\n        /* \"#utility.yul\":22897:22898   */\n      dup1\n        /* \"#utility.yul\":22890:22902   */\n      revert\n        /* \"#utility.yul\":22844:22904   */\n    tag_518:\n        /* \"#utility.yul\":22794:22910   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22916:23036   */\n    tag_281:\n        /* \"#utility.yul\":22988:23011   */\n      tag_520\n        /* \"#utility.yul\":23005:23010   */\n      dup2\n        /* \"#utility.yul\":22988:23011   */\n      tag_477\n      jump\t// in\n    tag_520:\n        /* \"#utility.yul\":22981:22986   */\n      dup2\n        /* \"#utility.yul\":22978:23012   */\n      eq\n        /* \"#utility.yul\":22968:23030   */\n      tag_521\n      jumpi\n        /* \"#utility.yul\":23026:23027   */\n      0x00\n        /* \"#utility.yul\":23023:23024   */\n      dup1\n        /* \"#utility.yul\":23016:23028   */\n      revert\n        /* \"#utility.yul\":22968:23030   */\n    tag_521:\n        /* \"#utility.yul\":22916:23036   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23042:23164   */\n    tag_294:\n        /* \"#utility.yul\":23115:23139   */\n      tag_523\n        /* \"#utility.yul\":23133:23138   */\n      dup2\n        /* \"#utility.yul\":23115:23139   */\n      tag_423\n      jump\t// in\n    tag_523:\n        /* \"#utility.yul\":23108:23113   */\n      dup2\n        /* \"#utility.yul\":23105:23140   */\n      eq\n        /* \"#utility.yul\":23095:23158   */\n      tag_524\n      jumpi\n        /* \"#utility.yul\":23154:23155   */\n      0x00\n        /* \"#utility.yul\":23151:23152   */\n      dup1\n        /* \"#utility.yul\":23144:23156   */\n      revert\n        /* \"#utility.yul\":23095:23158   */\n    tag_524:\n        /* \"#utility.yul\":23042:23164   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220639bf997794e95899aedc434283166317868d2eda58b67d712c4444cc7c27eaa64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_62": {
									"entryPoint": null,
									"id": 62,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_string_memory_ptr_fromMemory": {
									"entryPoint": 289,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_string_memory_ptr_fromMemory": {
									"entryPoint": 364,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 415,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_memory": {
									"entryPoint": 548,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 579,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_string_memory_ptr": {
									"entryPoint": 589,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 643,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 697,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 751,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 805,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 852,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 899,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 904,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 909,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 914,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 919,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4093:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "102:326:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "112:75:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "179:6:10"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "137:41:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "137:49:10"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "121:15:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "121:66:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "112:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "203:5:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "210:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "196:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "196:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "196:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "226:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "241:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "248:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "237:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "237:16:10"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "230:3:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "291:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "293:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "293:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "293:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "272:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "277:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "268:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "268:16:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "286:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "265:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "265:25:10"
															},
															"nodeType": "YulIf",
															"src": "262:112:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "405:3:10"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "410:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "415:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "383:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "383:39:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "383:39:10"
														}
													]
												},
												"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "75:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "80:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "88:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "96:5:10",
														"type": ""
													}
												],
												"src": "7:421:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "521:282:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "570:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "572:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "572:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "572:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "549:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "557:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "545:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "545:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "564:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "541:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "541:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "534:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "534:35:10"
															},
															"nodeType": "YulIf",
															"src": "531:122:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "662:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "682:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "676:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "676:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "666:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "698:99:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "770:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "778:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "766:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "766:17:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "785:6:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "793:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "707:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "707:90:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "698:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "499:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "507:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "515:5:10",
														"type": ""
													}
												],
												"src": "448:355:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "923:739:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "969:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "971:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "971:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "971:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "944:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "953:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "940:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "940:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "965:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "936:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "936:32:10"
															},
															"nodeType": "YulIf",
															"src": "933:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "1062:291:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1077:38:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1101:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1112:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1097:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1097:17:10"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1091:5:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1091:24:10"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1081:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1162:83:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "1164:77:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1164:79:10"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1164:79:10"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1134:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1142:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1131:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1131:30:10"
																	},
																	"nodeType": "YulIf",
																	"src": "1128:117:10"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1259:84:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1315:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1326:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1311:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1311:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1335:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1269:41:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1269:74:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1259:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1363:292:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1378:39:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1402:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1413:2:10",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1398:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1398:18:10"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1392:5:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1392:25:10"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1382:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1464:83:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "1466:77:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1466:79:10"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1466:79:10"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1436:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1444:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1433:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1433:30:10"
																	},
																	"nodeType": "YulIf",
																	"src": "1430:117:10"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1561:84:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1617:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1628:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1613:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1613:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1637:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1571:41:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1571:74:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1561:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "885:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "896:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "908:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "916:6:10",
														"type": ""
													}
												],
												"src": "809:853:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1709:88:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1719:30:10",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "1729:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1729:20:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1719:6:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1778:6:10"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1786:4:10"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "1758:19:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1758:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1758:33:10"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1693:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1702:6:10",
														"type": ""
													}
												],
												"src": "1668:129:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1843:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1853:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1869:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1863:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1863:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1853:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1836:6:10",
														"type": ""
													}
												],
												"src": "1803:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1951:241:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2056:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2058:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2058:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2058:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2028:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2036:18:10",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2025:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2025:30:10"
															},
															"nodeType": "YulIf",
															"src": "2022:56:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2088:37:10",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2118:6:10"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "2096:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2096:29:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "2088:4:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2162:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "2174:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2180:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2170:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2170:15:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "2162:4:10"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1935:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1946:4:10",
														"type": ""
													}
												],
												"src": "1884:308:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2247:258:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2257:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2266:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2261:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2326:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2351:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "2356:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2347:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2347:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "2370:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "2375:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2366:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2366:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2360:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2360:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2340:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2340:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2340:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2287:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2290:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2284:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2284:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2298:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2300:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2309:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2312:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2305:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2305:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2300:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2280:3:10",
																"statements": []
															},
															"src": "2276:113:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2423:76:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2473:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "2478:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2469:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2469:16:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2487:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2462:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2462:27:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2462:27:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2404:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2407:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2401:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2401:13:10"
															},
															"nodeType": "YulIf",
															"src": "2398:101:10"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2229:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "2234:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2239:6:10",
														"type": ""
													}
												],
												"src": "2198:307:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2562:269:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2572:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2586:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2592:1:10",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2582:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2582:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2572:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2603:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2633:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2639:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2629:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2629:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2607:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2680:51:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2694:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2708:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2716:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2704:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2704:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2694:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2660:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2653:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2653:26:10"
															},
															"nodeType": "YulIf",
															"src": "2650:81:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2783:42:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "2797:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2797:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2797:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2747:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2770:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2778:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2767:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2767:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2744:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2744:38:10"
															},
															"nodeType": "YulIf",
															"src": "2741:84:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2546:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2555:6:10",
														"type": ""
													}
												],
												"src": "2511:320:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2880:238:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2890:58:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2912:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "2942:4:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2920:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2920:27:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2908:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2908:40:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "2894:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3059:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3061:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3061:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3061:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3002:10:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3014:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2999:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2999:34:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3038:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3050:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "3035:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3035:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2996:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2996:62:10"
															},
															"nodeType": "YulIf",
															"src": "2993:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3097:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "3101:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3090:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3090:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3090:22:10"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2866:6:10",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "2874:4:10",
														"type": ""
													}
												],
												"src": "2837:281:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3152:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3169:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3172:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3162:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3162:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3162:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3266:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3269:4:10",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3259:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3259:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3259:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3290:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3293:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3283:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3283:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3283:15:10"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "3124:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3338:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3355:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3358:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3348:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3348:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3348:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3452:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3455:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3445:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3445:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3445:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3476:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3479:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3469:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3469:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3469:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3310:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3585:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3602:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3605:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3595:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3595:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3595:12:10"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "3496:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3708:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3725:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3728:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3718:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3718:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3718:12:10"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "3619:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3831:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3848:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3851:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3841:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3841:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3841:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "3742:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3954:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3971:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3974:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3964:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3964:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3964:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "3865:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4036:54:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4046:38:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4064:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4071:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4060:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4060:14:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4080:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "4076:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4076:7:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4056:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4056:28:10"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "4046:6:10"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4019:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "4029:6:10",
														"type": ""
													}
												],
												"src": "3988:102:10"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604051620024fb380380620024fb83398181016040528101906200003791906200019f565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b505050620003a8565b8280546200007f90620002b9565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b60006200013862000132846200024d565b62000224565b90508281526020810184848401111562000157576200015662000388565b5b6200016484828562000283565b509392505050565b600082601f83011262000184576200018362000383565b5b81516200019684826020860162000121565b91505092915050565b60008060408385031215620001b957620001b862000392565b5b600083015167ffffffffffffffff811115620001da57620001d96200038d565b5b620001e8858286016200016c565b925050602083015167ffffffffffffffff8111156200020c576200020b6200038d565b5b6200021a858286016200016c565b9150509250929050565b60006200023062000243565b90506200023e8282620002ef565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026b576200026a62000354565b5b620002768262000397565b9050602081019050919050565b60005b83811015620002a357808201518184015260208101905062000286565b83811115620002b3576000848401525b50505050565b60006002820490506001821680620002d257607f821691505b60208210811415620002e957620002e862000325565b5b50919050565b620002fa8262000397565b810181811067ffffffffffffffff821117156200031c576200031b62000354565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61214380620003b86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e9919061173d565b6102bc565b6040516100fb9190611a5a565b60405180910390f35b61010c61039e565b6040516101199190611a75565b60405180910390f35b61013c60048036038101906101379190611797565b610430565b60405161014991906119f3565b60405180910390f35b61016c600480360381019061016791906116fd565b610476565b005b610188600480360381019061018391906115e7565b61058e565b005b6101a4600480360381019061019f91906115e7565b6105ee565b005b6101c060048036038101906101bb9190611797565b61060e565b6040516101cd91906119f3565b60405180910390f35b6101f060048036038101906101eb919061157a565b610695565b6040516101fd9190611bb7565b60405180910390f35b61020e61074d565b60405161021b9190611a75565b60405180910390f35b61023e600480360381019061023991906116bd565b6107df565b005b61025a6004803603810190610255919061163a565b6107f5565b005b61027660048036038101906102719190611797565b610857565b6040516102839190611a75565b60405180910390f35b6102a660048036038101906102a191906115a7565b6108bf565b6040516102b39190611a5a565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611d21565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611d21565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611b77565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611b97565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611a97565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611b57565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611b37565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611d21565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611d21565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e91565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611a97565b60405180910390fd5b61085184848484610ffe565b50505050565b6060610862826109bd565b600061086c61105a565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611071565b6040516020016108a79291906119cf565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c681611149565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611b57565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611ad7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611af7565b60405180910390fd5b610c4f83838361118a565b8273ffffffffffffffffffffffffffffffffffffffff16610c6f8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbc90611ad7565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f83838361118f565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef790611b17565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff19190611a5a565b60405180910390a3505050565b611009848484610b5e565b61101584848484611194565b611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b90611ab7565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016110808461132b565b01905060008167ffffffffffffffff81111561109f5761109e611de2565b5b6040519080825280601f01601f1916602001820160405280156110d15781602001600182028036833780820191505090505b509050600082602001820190505b60011561113e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112857611127611d84565b5b04945060008514156111395761113e565b6110df565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116b83610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006111b58473ffffffffffffffffffffffffffffffffffffffff1661147e565b1561131e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111de610a08565b8786866040518563ffffffff1660e01b81526004016112009493929190611a0e565b602060405180830381600087803b15801561121a57600080fd5b505af192505050801561124b57506040513d601f19601f82011682018060405250810190611248919061176a565b60015b6112ce573d806000811461127b576040519150601f19603f3d011682016040523d82523d6000602084013e611280565b606091505b506000815114156112c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bd90611ab7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611323565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611389577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161137f5761137e611d84565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106113c6576d04ee2d6d415b85acef810000000083816113bc576113bb611d84565b5b0492506020810190505b662386f26fc1000083106113f557662386f26fc1000083816113eb576113ea611d84565b5b0492506010810190505b6305f5e100831061141e576305f5e100838161141457611413611d84565b5b0492506008810190505b612710831061144357612710838161143957611438611d84565b5b0492506004810190505b60648310611466576064838161145c5761145b611d84565b5b0492506002810190505b600a8310611475576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006114b46114af84611bf7565b611bd2565b9050828152602081018484840111156114d0576114cf611e16565b5b6114db848285611cdf565b509392505050565b6000813590506114f2816120b1565b92915050565b600081359050611507816120c8565b92915050565b60008135905061151c816120df565b92915050565b600081519050611531816120df565b92915050565b600082601f83011261154c5761154b611e11565b5b813561155c8482602086016114a1565b91505092915050565b600081359050611574816120f6565b92915050565b6000602082840312156115905761158f611e20565b5b600061159e848285016114e3565b91505092915050565b600080604083850312156115be576115bd611e20565b5b60006115cc858286016114e3565b92505060206115dd858286016114e3565b9150509250929050565b600080600060608486031215611600576115ff611e20565b5b600061160e868287016114e3565b935050602061161f868287016114e3565b925050604061163086828701611565565b9150509250925092565b6000806000806080858703121561165457611653611e20565b5b6000611662878288016114e3565b9450506020611673878288016114e3565b935050604061168487828801611565565b925050606085013567ffffffffffffffff8111156116a5576116a4611e1b565b5b6116b187828801611537565b91505092959194509250565b600080604083850312156116d4576116d3611e20565b5b60006116e2858286016114e3565b92505060206116f3858286016114f8565b9150509250929050565b6000806040838503121561171457611713611e20565b5b6000611722858286016114e3565b925050602061173385828601611565565b9150509250929050565b60006020828403121561175357611752611e20565b5b60006117618482850161150d565b91505092915050565b6000602082840312156117805761177f611e20565b5b600061178e84828501611522565b91505092915050565b6000602082840312156117ad576117ac611e20565b5b60006117bb84828501611565565b91505092915050565b6117cd81611c6b565b82525050565b6117dc81611c7d565b82525050565b60006117ed82611c28565b6117f78185611c3e565b9350611807818560208601611cee565b61181081611e25565b840191505092915050565b600061182682611c33565b6118308185611c4f565b9350611840818560208601611cee565b61184981611e25565b840191505092915050565b600061185f82611c33565b6118698185611c60565b9350611879818560208601611cee565b80840191505092915050565b6000611892602d83611c4f565b915061189d82611e36565b604082019050919050565b60006118b5603283611c4f565b91506118c082611e85565b604082019050919050565b60006118d8602583611c4f565b91506118e382611ed4565b604082019050919050565b60006118fb602483611c4f565b915061190682611f23565b604082019050919050565b600061191e601983611c4f565b915061192982611f72565b602082019050919050565b6000611941602983611c4f565b915061194c82611f9b565b604082019050919050565b6000611964601883611c4f565b915061196f82611fea565b602082019050919050565b6000611987602183611c4f565b915061199282612013565b604082019050919050565b60006119aa603d83611c4f565b91506119b582612062565b604082019050919050565b6119c981611cd5565b82525050565b60006119db8285611854565b91506119e78284611854565b91508190509392505050565b6000602082019050611a0860008301846117c4565b92915050565b6000608082019050611a2360008301876117c4565b611a3060208301866117c4565b611a3d60408301856119c0565b8181036060830152611a4f81846117e2565b905095945050505050565b6000602082019050611a6f60008301846117d3565b92915050565b60006020820190508181036000830152611a8f818461181b565b905092915050565b60006020820190508181036000830152611ab081611885565b9050919050565b60006020820190508181036000830152611ad0816118a8565b9050919050565b60006020820190508181036000830152611af0816118cb565b9050919050565b60006020820190508181036000830152611b10816118ee565b9050919050565b60006020820190508181036000830152611b3081611911565b9050919050565b60006020820190508181036000830152611b5081611934565b9050919050565b60006020820190508181036000830152611b7081611957565b9050919050565b60006020820190508181036000830152611b908161197a565b9050919050565b60006020820190508181036000830152611bb08161199d565b9050919050565b6000602082019050611bcc60008301846119c0565b92915050565b6000611bdc611bed565b9050611be88282611d53565b919050565b6000604051905090565b600067ffffffffffffffff821115611c1257611c11611de2565b5b611c1b82611e25565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611c7682611cb5565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611d0c578082015181840152602081019050611cf1565b83811115611d1b576000848401525b50505050565b60006002820490506001821680611d3957607f821691505b60208210811415611d4d57611d4c611db3565b5b50919050565b611d5c82611e25565b810181811067ffffffffffffffff82111715611d7b57611d7a611de2565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6120ba81611c6b565b81146120c557600080fd5b50565b6120d181611c7d565b81146120dc57600080fd5b50565b6120e881611c89565b81146120f357600080fd5b50565b6120ff81611cd5565b811461210a57600080fd5b5056fea2646970667358221220639bf997794e95899aedc434283166317868d2eda58b67d712c4444cc7c27eaa64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x24FB CODESIZE SUB DUP1 PUSH3 0x24FB DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x19F JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x3A8 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x2B9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x138 PUSH3 0x132 DUP5 PUSH3 0x24D JUMP JUMPDEST PUSH3 0x224 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x157 JUMPI PUSH3 0x156 PUSH3 0x388 JUMP JUMPDEST JUMPDEST PUSH3 0x164 DUP5 DUP3 DUP6 PUSH3 0x283 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x184 JUMPI PUSH3 0x183 PUSH3 0x383 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x196 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x121 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1B9 JUMPI PUSH3 0x1B8 PUSH3 0x392 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1DA JUMPI PUSH3 0x1D9 PUSH3 0x38D JUMP JUMPDEST JUMPDEST PUSH3 0x1E8 DUP6 DUP3 DUP7 ADD PUSH3 0x16C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x20C JUMPI PUSH3 0x20B PUSH3 0x38D JUMP JUMPDEST JUMPDEST PUSH3 0x21A DUP6 DUP3 DUP7 ADD PUSH3 0x16C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x230 PUSH3 0x243 JUMP JUMPDEST SWAP1 POP PUSH3 0x23E DUP3 DUP3 PUSH3 0x2EF JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x26B JUMPI PUSH3 0x26A PUSH3 0x354 JUMP JUMPDEST JUMPDEST PUSH3 0x276 DUP3 PUSH3 0x397 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x2A3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x286 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x2B3 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2D2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2E9 JUMPI PUSH3 0x2E8 PUSH3 0x325 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2FA DUP3 PUSH3 0x397 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x31C JUMPI PUSH3 0x31B PUSH3 0x354 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2143 DUP1 PUSH3 0x3B8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x173D JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x1797 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x16FD JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x1797 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x157A JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x16BD JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x163A JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1797 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x15A7 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1D21 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1D21 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1B77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1B97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1D21 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1D21 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1071 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x19CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x1149 JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4F DUP4 DUP4 DUP4 PUSH2 0x118A JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6F DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBC SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH2 0x118F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF7 SWAP1 PUSH2 0x1B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF1 SWAP2 SWAP1 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1009 DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1015 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x1054 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104B SWAP1 PUSH2 0x1AB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1080 DUP5 PUSH2 0x132B JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109F JUMPI PUSH2 0x109E PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x113E JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1128 JUMPI PUSH2 0x1127 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1139 JUMPI PUSH2 0x113E JUMP JUMPDEST PUSH2 0x10DF JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116B DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11B5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x147E JUMP JUMPDEST ISZERO PUSH2 0x131E JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x11DE PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1200 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x121A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x124B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1248 SWAP2 SWAP1 PUSH2 0x176A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12CE JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x127B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1280 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12BD SWAP1 PUSH2 0x1AB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1389 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x137F JUMPI PUSH2 0x137E PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x13C6 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x13BC JUMPI PUSH2 0x13BB PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x13F5 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x13EB JUMPI PUSH2 0x13EA PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x141E JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1414 JUMPI PUSH2 0x1413 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1443 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1439 JUMPI PUSH2 0x1438 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1466 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x145C JUMPI PUSH2 0x145B PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1475 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14B4 PUSH2 0x14AF DUP5 PUSH2 0x1BF7 JUMP JUMPDEST PUSH2 0x1BD2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x14D0 JUMPI PUSH2 0x14CF PUSH2 0x1E16 JUMP JUMPDEST JUMPDEST PUSH2 0x14DB DUP5 DUP3 DUP6 PUSH2 0x1CDF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14F2 DUP2 PUSH2 0x20B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1507 DUP2 PUSH2 0x20C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x151C DUP2 PUSH2 0x20DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1531 DUP2 PUSH2 0x20DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x154C JUMPI PUSH2 0x154B PUSH2 0x1E11 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x155C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x14A1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1574 DUP2 PUSH2 0x20F6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1590 JUMPI PUSH2 0x158F PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x159E DUP5 DUP3 DUP6 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15BE JUMPI PUSH2 0x15BD PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15CC DUP6 DUP3 DUP7 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x15DD DUP6 DUP3 DUP7 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1600 JUMPI PUSH2 0x15FF PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x160E DUP7 DUP3 DUP8 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x161F DUP7 DUP3 DUP8 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1630 DUP7 DUP3 DUP8 ADD PUSH2 0x1565 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1654 JUMPI PUSH2 0x1653 PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1662 DUP8 DUP3 DUP9 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1673 DUP8 DUP3 DUP9 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1684 DUP8 DUP3 DUP9 ADD PUSH2 0x1565 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16A5 JUMPI PUSH2 0x16A4 PUSH2 0x1E1B JUMP JUMPDEST JUMPDEST PUSH2 0x16B1 DUP8 DUP3 DUP9 ADD PUSH2 0x1537 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16D4 JUMPI PUSH2 0x16D3 PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16E2 DUP6 DUP3 DUP7 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x16F3 DUP6 DUP3 DUP7 ADD PUSH2 0x14F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1714 JUMPI PUSH2 0x1713 PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1722 DUP6 DUP3 DUP7 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1733 DUP6 DUP3 DUP7 ADD PUSH2 0x1565 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1753 JUMPI PUSH2 0x1752 PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1761 DUP5 DUP3 DUP6 ADD PUSH2 0x150D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1780 JUMPI PUSH2 0x177F PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x178E DUP5 DUP3 DUP6 ADD PUSH2 0x1522 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17AD JUMPI PUSH2 0x17AC PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17BB DUP5 DUP3 DUP6 ADD PUSH2 0x1565 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17CD DUP2 PUSH2 0x1C6B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x17DC DUP2 PUSH2 0x1C7D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17ED DUP3 PUSH2 0x1C28 JUMP JUMPDEST PUSH2 0x17F7 DUP2 DUP6 PUSH2 0x1C3E JUMP JUMPDEST SWAP4 POP PUSH2 0x1807 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CEE JUMP JUMPDEST PUSH2 0x1810 DUP2 PUSH2 0x1E25 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1826 DUP3 PUSH2 0x1C33 JUMP JUMPDEST PUSH2 0x1830 DUP2 DUP6 PUSH2 0x1C4F JUMP JUMPDEST SWAP4 POP PUSH2 0x1840 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CEE JUMP JUMPDEST PUSH2 0x1849 DUP2 PUSH2 0x1E25 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x185F DUP3 PUSH2 0x1C33 JUMP JUMPDEST PUSH2 0x1869 DUP2 DUP6 PUSH2 0x1C60 JUMP JUMPDEST SWAP4 POP PUSH2 0x1879 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CEE JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1892 PUSH1 0x2D DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x189D DUP3 PUSH2 0x1E36 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B5 PUSH1 0x32 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x18C0 DUP3 PUSH2 0x1E85 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18D8 PUSH1 0x25 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x18E3 DUP3 PUSH2 0x1ED4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18FB PUSH1 0x24 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x1906 DUP3 PUSH2 0x1F23 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x191E PUSH1 0x19 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x1929 DUP3 PUSH2 0x1F72 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1941 PUSH1 0x29 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x194C DUP3 PUSH2 0x1F9B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1964 PUSH1 0x18 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x196F DUP3 PUSH2 0x1FEA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1987 PUSH1 0x21 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x1992 DUP3 PUSH2 0x2013 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19AA PUSH1 0x3D DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x19B5 DUP3 PUSH2 0x2062 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19C9 DUP2 PUSH2 0x1CD5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB DUP3 DUP6 PUSH2 0x1854 JUMP JUMPDEST SWAP2 POP PUSH2 0x19E7 DUP3 DUP5 PUSH2 0x1854 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A08 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1A23 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17C4 JUMP JUMPDEST PUSH2 0x1A30 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17C4 JUMP JUMPDEST PUSH2 0x1A3D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x19C0 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1A4F DUP2 DUP5 PUSH2 0x17E2 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A6F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A8F DUP2 DUP5 PUSH2 0x181B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AB0 DUP2 PUSH2 0x1885 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AD0 DUP2 PUSH2 0x18A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AF0 DUP2 PUSH2 0x18CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B10 DUP2 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B30 DUP2 PUSH2 0x1911 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B50 DUP2 PUSH2 0x1934 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B70 DUP2 PUSH2 0x1957 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B90 DUP2 PUSH2 0x197A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB0 DUP2 PUSH2 0x199D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BCC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19C0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BDC PUSH2 0x1BED JUMP JUMPDEST SWAP1 POP PUSH2 0x1BE8 DUP3 DUP3 PUSH2 0x1D53 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1C12 JUMPI PUSH2 0x1C11 PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST PUSH2 0x1C1B DUP3 PUSH2 0x1E25 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C76 DUP3 PUSH2 0x1CB5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D0C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1CF1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1D1B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1D39 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1D4D JUMPI PUSH2 0x1D4C PUSH2 0x1DB3 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D5C DUP3 PUSH2 0x1E25 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1D7B JUMPI PUSH2 0x1D7A PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x20BA DUP2 PUSH2 0x1C6B JUMP JUMPDEST DUP2 EQ PUSH2 0x20C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x20D1 DUP2 PUSH2 0x1C7D JUMP JUMPDEST DUP2 EQ PUSH2 0x20DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x20E8 DUP2 PUSH2 0x1C89 JUMP JUMPDEST DUP2 EQ PUSH2 0x20F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x20FF DUP2 PUSH2 0x1CD5 JUMP JUMPDEST DUP2 EQ PUSH2 0x210A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x9BF99779 0x4E SWAP6 DUP10 SWAP11 0xED 0xC4 CALLVALUE 0x28 BALANCE PUSH7 0x317868D2EDA58B PUSH8 0xD712C4444CC7C27E 0xAA PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "628:16538:0:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;628:16538;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:421:10:-;96:5;121:66;137:49;179:6;137:49;:::i;:::-;121:66;:::i;:::-;112:75;;210:6;203:5;196:21;248:4;241:5;237:16;286:3;277:6;272:3;268:16;265:25;262:112;;;293:79;;:::i;:::-;262:112;383:39;415:6;410:3;405;383:39;:::i;:::-;102:326;7:421;;;;;:::o;448:355::-;515:5;564:3;557:4;549:6;545:17;541:27;531:122;;572:79;;:::i;:::-;531:122;682:6;676:13;707:90;793:3;785:6;778:4;770:6;766:17;707:90;:::i;:::-;698:99;;521:282;448:355;;;;:::o;809:853::-;908:6;916;965:2;953:9;944:7;940:23;936:32;933:119;;;971:79;;:::i;:::-;933:119;1112:1;1101:9;1097:17;1091:24;1142:18;1134:6;1131:30;1128:117;;;1164:79;;:::i;:::-;1128:117;1269:74;1335:7;1326:6;1315:9;1311:22;1269:74;:::i;:::-;1259:84;;1062:291;1413:2;1402:9;1398:18;1392:25;1444:18;1436:6;1433:30;1430:117;;;1466:79;;:::i;:::-;1430:117;1571:74;1637:7;1628:6;1617:9;1613:22;1571:74;:::i;:::-;1561:84;;1363:292;809:853;;;;;:::o;1668:129::-;1702:6;1729:20;;:::i;:::-;1719:30;;1758:33;1786:4;1778:6;1758:33;:::i;:::-;1668:129;;;:::o;1803:75::-;1836:6;1869:2;1863:9;1853:19;;1803:75;:::o;1884:308::-;1946:4;2036:18;2028:6;2025:30;2022:56;;;2058:18;;:::i;:::-;2022:56;2096:29;2118:6;2096:29;:::i;:::-;2088:37;;2180:4;2174;2170:15;2162:23;;1884:308;;;:::o;2198:307::-;2266:1;2276:113;2290:6;2287:1;2284:13;2276:113;;;2375:1;2370:3;2366:11;2360:18;2356:1;2351:3;2347:11;2340:39;2312:2;2309:1;2305:10;2300:15;;2276:113;;;2407:6;2404:1;2401:13;2398:101;;;2487:1;2478:6;2473:3;2469:16;2462:27;2398:101;2247:258;2198:307;;;:::o;2511:320::-;2555:6;2592:1;2586:4;2582:12;2572:22;;2639:1;2633:4;2629:12;2660:18;2650:81;;2716:4;2708:6;2704:17;2694:27;;2650:81;2778:2;2770:6;2767:14;2747:18;2744:38;2741:84;;;2797:18;;:::i;:::-;2741:84;2562:269;2511:320;;;:::o;2837:281::-;2920:27;2942:4;2920:27;:::i;:::-;2912:6;2908:40;3050:6;3038:10;3035:22;3014:18;3002:10;2999:34;2996:62;2993:88;;;3061:18;;:::i;:::-;2993:88;3101:10;3097:2;3090:22;2880:238;2837:281;;:::o;3124:180::-;3172:77;3169:1;3162:88;3269:4;3266:1;3259:15;3293:4;3290:1;3283:15;3310:180;3358:77;3355:1;3348:88;3455:4;3452:1;3445:15;3479:4;3476:1;3469:15;3496:117;3605:1;3602;3595:12;3619:117;3728:1;3725;3718:12;3742:117;3851:1;3848;3841:12;3865:117;3974:1;3971;3964:12;3988:102;4029:6;4080:2;4076:7;4071:2;4064:5;4060:14;4056:28;4046:38;;3988:102;;;:::o;628:16538:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_900": {
									"entryPoint": 4495,
									"id": 900,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_770": {
									"entryPoint": 2576,
									"id": 770,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_baseURI_213": {
									"entryPoint": 4186,
									"id": 213,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_beforeTokenTransfer_889": {
									"entryPoint": 4490,
									"id": 889,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_checkOnERC721Received_878": {
									"entryPoint": 4500,
									"id": 878,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_exists_445": {
									"entryPoint": 4425,
									"id": 445,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_isApprovedOrOwner_479": {
									"entryPoint": 2761,
									"id": 479,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_msgSender_1458": {
									"entryPoint": 2568,
									"id": 1458,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownerOf_427": {
									"entryPoint": 3668,
									"id": 427,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_requireMinted_816": {
									"entryPoint": 2493,
									"id": 816,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_safeTransfer_414": {
									"entryPoint": 4094,
									"id": 414,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_setApprovalForAll_802": {
									"entryPoint": 3729,
									"id": 802,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_746": {
									"entryPoint": 2910,
									"id": 746,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_256": {
									"entryPoint": 1142,
									"id": 256,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_117": {
									"entryPoint": 1685,
									"id": 117,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_274": {
									"entryPoint": 1072,
									"id": 274,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isApprovedForAll_309": {
									"entryPoint": 2239,
									"id": 309,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_1134": {
									"entryPoint": 5246,
									"id": 1134,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@log10_2381": {
									"entryPoint": 4907,
									"id": 2381,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_155": {
									"entryPoint": 926,
									"id": 155,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_145": {
									"entryPoint": 1550,
									"id": 145,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFrom_355": {
									"entryPoint": 1518,
									"id": 355,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_385": {
									"entryPoint": 2037,
									"id": 385,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_291": {
									"entryPoint": 2015,
									"id": 291,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_1666": {
									"entryPoint": 2387,
									"id": 1666,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_93": {
									"entryPoint": 700,
									"id": 93,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_165": {
									"entryPoint": 1869,
									"id": 165,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_1526": {
									"entryPoint": 4209,
									"id": 1526,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_204": {
									"entryPoint": 2135,
									"id": 204,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@transferFrom_336": {
									"entryPoint": 1422,
									"id": 336,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_bytes_memory_ptr": {
									"entryPoint": 5281,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 5347,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool": {
									"entryPoint": 5368,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4": {
									"entryPoint": 5389,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4_fromMemory": {
									"entryPoint": 5410,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes_memory_ptr": {
									"entryPoint": 5431,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 5477,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 5498,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 5543,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 5607,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 5690,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 5821,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 5885,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 5949,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 5994,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 6039,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 6084,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 6099,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 6114,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6171,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 6228,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6277,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6312,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6347,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6382,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6417,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6452,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6487,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6522,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6557,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6592,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6607,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 6643,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 6670,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 6746,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6773,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6807,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6839,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6871,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6903,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6935,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6967,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6999,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7031,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7063,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 7095,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 7122,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 7149,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_bytes_memory_ptr": {
									"entryPoint": 7159,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 7208,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 7219,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 7230,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 7247,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7264,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 7275,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 7293,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 7305,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 7349,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 7381,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory": {
									"entryPoint": 7391,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_memory_to_memory": {
									"entryPoint": 7406,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 7457,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 7507,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 7556,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 7603,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 7650,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 7697,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 7702,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 7707,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 7712,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 7717,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af": {
									"entryPoint": 7734,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e": {
									"entryPoint": 7813,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48": {
									"entryPoint": 7892,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4": {
									"entryPoint": 7971,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05": {
									"entryPoint": 8050,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159": {
									"entryPoint": 8091,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f": {
									"entryPoint": 8170,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942": {
									"entryPoint": 8211,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83": {
									"entryPoint": 8290,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 8369,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 8392,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes4": {
									"entryPoint": 8415,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 8438,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:23167:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "90:327:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "100:74:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "166:6:10"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "125:40:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "125:48:10"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "109:15:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "109:65:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "100:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "190:5:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "197:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "183:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "183:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "183:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "213:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "228:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "235:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "224:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:16:10"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "217:3:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "278:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "280:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "280:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "280:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "259:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "264:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "255:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "255:16:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "273:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "252:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:25:10"
															},
															"nodeType": "YulIf",
															"src": "249:112:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "394:3:10"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "399:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "404:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "370:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "370:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "370:41:10"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "63:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "68:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "76:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "84:5:10",
														"type": ""
													}
												],
												"src": "7:410:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "475:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "485:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "507:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "494:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "494:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "485:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "523:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "523:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "523:33:10"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "453:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "461:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "469:5:10",
														"type": ""
													}
												],
												"src": "423:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "617:84:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "627:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "649:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "636:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "636:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "627:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "689:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "665:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "665:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "665:30:10"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "595:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "603:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "611:5:10",
														"type": ""
													}
												],
												"src": "568:133:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "758:86:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "768:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "790:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "777:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "777:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "768:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "832:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "806:25:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "806:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "806:32:10"
														}
													]
												},
												"name": "abi_decode_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "736:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "744:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "752:5:10",
														"type": ""
													}
												],
												"src": "707:137:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "912:79:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "922:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "937:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "931:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "931:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "922:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "979:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "953:25:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "953:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "953:32:10"
														}
													]
												},
												"name": "abi_decode_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "890:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "898:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "906:5:10",
														"type": ""
													}
												],
												"src": "850:141:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1071:277:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1120:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "1122:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1122:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1122:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1099:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1107:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1095:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1095:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "1114:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "1091:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1091:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1084:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1084:35:10"
															},
															"nodeType": "YulIf",
															"src": "1081:122:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1212:34:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1239:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1226:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1226:20:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1216:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1255:87:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1315:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1323:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1311:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1311:17:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1330:6:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "1338:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "1264:46:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1264:78:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1255:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1049:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1057:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "1065:5:10",
														"type": ""
													}
												],
												"src": "1010:338:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1406:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1416:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1438:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1425:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1425:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1416:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1481:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1454:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1454:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1454:33:10"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1384:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1392:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1400:5:10",
														"type": ""
													}
												],
												"src": "1354:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1565:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1611:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1613:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1613:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1613:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1586:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1595:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1582:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1582:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1607:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1578:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1578:32:10"
															},
															"nodeType": "YulIf",
															"src": "1575:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "1704:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1719:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1733:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1723:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1748:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1783:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1794:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1779:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1779:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1803:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1758:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1758:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1748:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1535:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1546:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1558:6:10",
														"type": ""
													}
												],
												"src": "1499:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1917:391:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1963:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1965:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1965:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1965:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1938:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1947:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1934:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1934:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1959:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1930:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1930:32:10"
															},
															"nodeType": "YulIf",
															"src": "1927:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "2056:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2071:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2085:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2075:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2100:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2135:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2146:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2131:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2131:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2155:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2110:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2110:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2100:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2183:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2198:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2212:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2202:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2228:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2263:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2274:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2259:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2259:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2283:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2238:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2238:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2228:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1879:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1890:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1902:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1910:6:10",
														"type": ""
													}
												],
												"src": "1834:474:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2414:519:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2460:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2462:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2462:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2462:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2435:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2444:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2431:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2431:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2456:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2427:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2427:32:10"
															},
															"nodeType": "YulIf",
															"src": "2424:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "2553:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2568:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2582:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2572:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2597:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2632:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2643:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2628:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2628:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2652:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2607:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2607:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2597:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2680:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2695:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2709:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2699:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2725:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2760:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2771:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2756:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2756:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2780:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2735:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2735:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2725:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2808:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2823:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2837:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2827:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2853:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2888:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2899:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2884:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2884:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2908:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2863:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2863:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "2853:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2368:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2379:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2391:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2399:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2407:6:10",
														"type": ""
													}
												],
												"src": "2314:619:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3065:817:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3112:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3114:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3114:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3114:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3086:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3095:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3082:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3082:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3107:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3078:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3078:33:10"
															},
															"nodeType": "YulIf",
															"src": "3075:120:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "3205:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3220:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3234:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3224:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3249:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3284:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3295:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3280:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3280:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3304:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3259:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3259:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3249:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3332:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3347:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3361:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3351:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3377:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3412:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3423:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3408:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3408:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3432:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3387:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3387:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3377:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3460:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3475:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3489:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3479:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3505:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3540:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3551:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3536:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3536:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3560:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3515:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3515:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "3505:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3588:287:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3603:46:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3634:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3645:2:10",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3630:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3630:18:10"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "3617:12:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3617:32:10"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3607:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3696:83:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "3698:77:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3698:79:10"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3698:79:10"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3668:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3676:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3665:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3665:30:10"
																	},
																	"nodeType": "YulIf",
																	"src": "3662:117:10"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3793:72:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3837:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3848:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3833:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3833:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3857:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "3803:29:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3803:62:10"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "3793:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3011:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3022:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3034:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3042:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3050:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3058:6:10",
														"type": ""
													}
												],
												"src": "2939:943:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3968:388:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4014:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4016:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4016:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4016:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3989:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3998:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3985:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3985:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4010:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3981:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3981:32:10"
															},
															"nodeType": "YulIf",
															"src": "3978:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "4107:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4122:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4136:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4126:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4151:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4186:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4197:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4182:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4182:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4206:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4161:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4161:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4151:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4234:115:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4249:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4263:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4253:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4279:60:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4311:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4322:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4307:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4307:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4331:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "4289:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4289:50:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4279:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3930:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3941:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3953:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3961:6:10",
														"type": ""
													}
												],
												"src": "3888:468:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4445:391:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4491:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4493:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4493:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4493:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4466:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4475:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4462:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4462:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4487:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4458:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4458:32:10"
															},
															"nodeType": "YulIf",
															"src": "4455:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "4584:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4599:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4613:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4603:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4628:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4663:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4674:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4659:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4659:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4683:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4638:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4638:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4628:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4711:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4726:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4740:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4730:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4756:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4791:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4802:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4787:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4787:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4811:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4766:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4766:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4756:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4407:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4418:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4430:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4438:6:10",
														"type": ""
													}
												],
												"src": "4362:474:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4907:262:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4953:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4955:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4955:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4955:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4928:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4937:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4924:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4924:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4949:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4920:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4920:32:10"
															},
															"nodeType": "YulIf",
															"src": "4917:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "5046:116:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5061:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5075:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5065:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5090:62:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5124:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5135:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5120:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5120:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5144:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "5100:19:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5100:52:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5090:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4877:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4888:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4900:6:10",
														"type": ""
													}
												],
												"src": "4842:327:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5251:273:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5297:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5299:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5299:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5299:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5272:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5281:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5268:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5268:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5293:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5264:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5264:32:10"
															},
															"nodeType": "YulIf",
															"src": "5261:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "5390:127:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5405:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5419:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5409:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5434:73:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5479:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5490:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5475:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5475:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5499:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "5444:30:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5444:63:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5434:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5221:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5232:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5244:6:10",
														"type": ""
													}
												],
												"src": "5175:349:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5596:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5642:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5644:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5644:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5644:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5617:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5626:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5613:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5613:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5638:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5609:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5609:32:10"
															},
															"nodeType": "YulIf",
															"src": "5606:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "5735:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5750:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5764:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5754:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5779:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5814:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5825:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5810:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5810:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5834:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5789:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5789:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5779:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5566:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5577:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5589:6:10",
														"type": ""
													}
												],
												"src": "5530:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5930:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5947:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5970:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5952:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5952:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5940:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5940:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5940:37:10"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5918:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5925:3:10",
														"type": ""
													}
												],
												"src": "5865:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6048:50:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6065:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6085:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "6070:14:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6070:21:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6058:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6058:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6058:34:10"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6036:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6043:3:10",
														"type": ""
													}
												],
												"src": "5989:109:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6194:270:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6204:52:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6250:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "6218:31:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6218:38:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6208:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6265:77:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6330:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6335:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6272:57:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6272:70:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6265:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6377:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6384:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6373:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6373:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6391:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6396:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6351:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6351:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6351:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6412:46:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6423:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6450:6:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "6428:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6428:29:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6419:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6419:39:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6412:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6175:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6182:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6190:3:10",
														"type": ""
													}
												],
												"src": "6104:360:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6562:272:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6572:53:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6619:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "6586:32:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6586:39:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6576:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6634:78:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6700:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6705:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6641:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6641:71:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6634:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6747:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6754:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6743:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6743:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6761:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6766:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6721:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6721:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6721:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6782:46:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6793:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6820:6:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "6798:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6798:29:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6789:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6789:39:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6782:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6543:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6550:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6558:3:10",
														"type": ""
													}
												],
												"src": "6470:364:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6950:267:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6960:53:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7007:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "6974:32:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6974:39:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6964:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7022:96:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7106:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7111:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7029:76:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7029:89:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7022:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7153:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7160:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7149:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7149:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7167:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7172:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7127:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7127:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7127:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7188:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7199:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7204:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7195:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7195:16:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7188:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6931:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6938:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6946:3:10",
														"type": ""
													}
												],
												"src": "6840:377:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7369:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7379:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7445:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7450:2:10",
																		"type": "",
																		"value": "45"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7386:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7386:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7379:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7551:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																	"nodeType": "YulIdentifier",
																	"src": "7462:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7462:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7462:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7564:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7575:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7580:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7571:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7571:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7564:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7357:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7365:3:10",
														"type": ""
													}
												],
												"src": "7223:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7741:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7751:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7817:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7822:2:10",
																		"type": "",
																		"value": "50"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7758:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7758:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7751:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7923:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																	"nodeType": "YulIdentifier",
																	"src": "7834:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7834:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7834:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7936:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7947:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7952:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7943:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7943:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7936:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7729:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7737:3:10",
														"type": ""
													}
												],
												"src": "7595:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8113:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8123:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8189:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8194:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8130:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8130:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8123:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8295:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																	"nodeType": "YulIdentifier",
																	"src": "8206:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8206:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8206:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8308:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8319:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8324:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8315:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8315:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8308:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8101:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8109:3:10",
														"type": ""
													}
												],
												"src": "7967:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8485:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8495:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8561:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8566:2:10",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8502:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8502:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8495:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8667:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																	"nodeType": "YulIdentifier",
																	"src": "8578:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8578:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8578:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8680:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8691:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8696:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8687:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8687:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8680:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8473:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8481:3:10",
														"type": ""
													}
												],
												"src": "8339:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8857:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8867:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8933:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8938:2:10",
																		"type": "",
																		"value": "25"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8874:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8874:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8867:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9039:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																	"nodeType": "YulIdentifier",
																	"src": "8950:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8950:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8950:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9052:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9063:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9068:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9059:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9059:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9052:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8845:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8853:3:10",
														"type": ""
													}
												],
												"src": "8711:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9229:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9239:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9305:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9310:2:10",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9246:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9246:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9239:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9411:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																	"nodeType": "YulIdentifier",
																	"src": "9322:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9322:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9322:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9424:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9435:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9440:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9431:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9431:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9424:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9217:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9225:3:10",
														"type": ""
													}
												],
												"src": "9083:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9601:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9611:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9677:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9682:2:10",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9618:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9618:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9611:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9783:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																	"nodeType": "YulIdentifier",
																	"src": "9694:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9694:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9694:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9796:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9807:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9812:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9803:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9803:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9796:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9589:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9597:3:10",
														"type": ""
													}
												],
												"src": "9455:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9973:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9983:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10049:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10054:2:10",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9990:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9990:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9983:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10155:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																	"nodeType": "YulIdentifier",
																	"src": "10066:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10066:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10066:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10168:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10179:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10184:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10175:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10175:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10168:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9961:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9969:3:10",
														"type": ""
													}
												],
												"src": "9827:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10345:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10355:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10421:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10426:2:10",
																		"type": "",
																		"value": "61"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10362:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10362:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10355:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10527:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																	"nodeType": "YulIdentifier",
																	"src": "10438:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10438:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10438:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10540:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10551:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10556:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10547:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10547:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10540:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10333:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10341:3:10",
														"type": ""
													}
												],
												"src": "10199:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10636:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10653:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10676:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "10658:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10658:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10646:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10646:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10646:37:10"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10624:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10631:3:10",
														"type": ""
													}
												],
												"src": "10571:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10879:251:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10890:102:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10979:6:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10988:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10897:81:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10897:95:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10890:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11002:102:10",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11091:6:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11100:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11009:81:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11009:95:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11002:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11114:10:10",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "11121:3:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11114:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10850:3:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10856:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10864:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10875:3:10",
														"type": ""
													}
												],
												"src": "10695:435:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11234:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11244:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11256:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11267:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11252:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11252:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11244:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11324:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11337:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11348:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11333:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11333:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11280:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11280:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11280:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11206:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11218:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11229:4:10",
														"type": ""
													}
												],
												"src": "11136:222:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11564:440:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11574:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11586:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11597:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11582:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11582:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11574:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11655:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11668:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11679:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11664:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11664:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11611:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11611:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11611:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11736:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11749:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11760:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11745:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11745:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11692:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11692:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11692:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "11818:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11831:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11842:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11827:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11827:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11774:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11774:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11774:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11867:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11878:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11863:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11863:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11887:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11893:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11883:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11883:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11856:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11856:48:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11856:48:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11913:84:10",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "11983:6:10"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11992:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11921:61:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11921:76:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11913:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11512:9:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "11524:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "11532:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11540:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11548:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11559:4:10",
														"type": ""
													}
												],
												"src": "11364:640:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12102:118:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12112:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12124:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12135:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12120:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12120:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12112:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12186:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12199:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12210:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12195:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12195:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12148:37:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12148:65:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12148:65:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12074:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12086:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12097:4:10",
														"type": ""
													}
												],
												"src": "12010:210:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12344:195:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12354:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12366:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12377:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12362:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12362:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12354:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12401:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12412:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12397:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12397:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12420:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12426:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12416:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12416:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12390:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12390:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12390:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12446:86:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12518:6:10"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12527:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12454:63:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12454:78:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12446:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12316:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12328:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12339:4:10",
														"type": ""
													}
												],
												"src": "12226:313:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12716:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12726:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12738:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12749:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12734:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12734:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12726:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12773:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12784:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12769:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12769:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12792:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12798:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12788:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12788:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12762:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12762:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12762:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12818:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12952:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12826:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12826:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12818:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12696:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12711:4:10",
														"type": ""
													}
												],
												"src": "12545:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13141:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13151:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13163:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13174:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13159:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13159:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13151:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13198:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13209:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13194:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13194:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13217:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13223:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13213:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13213:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13187:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13187:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13187:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13243:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13377:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13251:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13251:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13243:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13121:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13136:4:10",
														"type": ""
													}
												],
												"src": "12970:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13566:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13576:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13588:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13599:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13584:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13584:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13576:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13623:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13634:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13619:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13619:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13642:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13648:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13638:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13638:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13612:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13612:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13612:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13668:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13802:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13676:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13676:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13668:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13546:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13561:4:10",
														"type": ""
													}
												],
												"src": "13395:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13991:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14001:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14013:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14024:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14009:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14009:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14001:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14048:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14059:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14044:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14044:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14067:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14073:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14063:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14063:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14037:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14037:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14037:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14093:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14227:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14101:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14101:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14093:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13971:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13986:4:10",
														"type": ""
													}
												],
												"src": "13820:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14416:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14426:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14438:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14449:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14434:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14434:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14426:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14473:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14484:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14469:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14469:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14492:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14498:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14488:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14488:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14462:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14462:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14462:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14518:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14652:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14526:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14526:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14518:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14396:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14411:4:10",
														"type": ""
													}
												],
												"src": "14245:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14841:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14851:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14863:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14874:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14859:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14859:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14851:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14898:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14909:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14894:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14894:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14917:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14923:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14913:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14913:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14887:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14887:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14887:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14943:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15077:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14951:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14951:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14943:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14821:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14836:4:10",
														"type": ""
													}
												],
												"src": "14670:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15266:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15276:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15288:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15299:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15284:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15284:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15276:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15323:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15334:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15319:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15319:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15342:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15348:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15338:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15338:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15312:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15312:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15312:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15368:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15502:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15376:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15376:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15368:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15246:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15261:4:10",
														"type": ""
													}
												],
												"src": "15095:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15691:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15701:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15713:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15724:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15709:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15709:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15701:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15748:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15759:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15744:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15744:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15767:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15773:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15763:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15763:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15737:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15737:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15737:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15793:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15927:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15801:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15801:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15793:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15671:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15686:4:10",
														"type": ""
													}
												],
												"src": "15520:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16116:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16126:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16138:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16149:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16134:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16134:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16126:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16173:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16184:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16169:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16169:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "16192:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16198:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16188:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16188:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16162:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16162:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16162:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16218:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "16352:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16226:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16226:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16218:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16096:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16111:4:10",
														"type": ""
													}
												],
												"src": "15945:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16468:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16478:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16490:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16501:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16486:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16486:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16478:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16558:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16571:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16582:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16567:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16567:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16514:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16514:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16514:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16440:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16452:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16463:4:10",
														"type": ""
													}
												],
												"src": "16370:222:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16639:88:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16649:30:10",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "16659:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16659:20:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "16649:6:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "16708:6:10"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "16716:4:10"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "16688:19:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16688:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16688:33:10"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "16623:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "16632:6:10",
														"type": ""
													}
												],
												"src": "16598:129:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16773:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16783:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16799:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "16793:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16793:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "16783:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "16766:6:10",
														"type": ""
													}
												],
												"src": "16733:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16880:241:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16985:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "16987:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16987:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16987:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16957:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16965:18:10",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16954:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16954:30:10"
															},
															"nodeType": "YulIf",
															"src": "16951:56:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17017:37:10",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17047:6:10"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "17025:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17025:29:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "17017:4:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17091:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "17103:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17109:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17099:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17099:15:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "17091:4:10"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16864:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "16875:4:10",
														"type": ""
													}
												],
												"src": "16814:307:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17185:40:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17196:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17212:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17206:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17206:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "17196:6:10"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17168:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17178:6:10",
														"type": ""
													}
												],
												"src": "17127:98:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17290:40:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17301:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17317:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17311:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17311:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "17301:6:10"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17273:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17283:6:10",
														"type": ""
													}
												],
												"src": "17231:99:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17431:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17448:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17453:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17441:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17441:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17441:19:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17469:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17488:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17493:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17484:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17484:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "17469:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17403:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17408:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "17419:11:10",
														"type": ""
													}
												],
												"src": "17336:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17606:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17623:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17628:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17616:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17616:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17616:19:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17644:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17663:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17668:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17659:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17659:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "17644:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17578:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17583:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "17594:11:10",
														"type": ""
													}
												],
												"src": "17510:169:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17799:34:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17809:18:10",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "17824:3:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "17809:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17771:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17776:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "17787:11:10",
														"type": ""
													}
												],
												"src": "17685:148:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17884:51:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17894:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17923:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "17905:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17905:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "17894:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17866:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "17876:7:10",
														"type": ""
													}
												],
												"src": "17839:96:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17983:48:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17993:32:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "18018:5:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "18011:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18011:13:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "18004:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18004:21:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "17993:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17965:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "17975:7:10",
														"type": ""
													}
												],
												"src": "17941:90:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18081:105:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18091:89:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "18106:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18113:66:10",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "18102:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18102:78:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "18091:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18063:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "18073:7:10",
														"type": ""
													}
												],
												"src": "18037:149:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18237:81:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18247:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "18262:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18269:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "18258:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18258:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "18247:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18219:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "18229:7:10",
														"type": ""
													}
												],
												"src": "18192:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18369:32:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18379:16:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "18390:5:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "18379:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18351:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "18361:7:10",
														"type": ""
													}
												],
												"src": "18324:77:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18458:103:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "18481:3:10"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "18486:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18491:6:10"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "18468:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18468:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18468:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "18539:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "18544:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18535:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18535:16:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18553:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18528:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18528:27:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18528:27:10"
														}
													]
												},
												"name": "copy_calldata_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "18440:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "18445:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18450:6:10",
														"type": ""
													}
												],
												"src": "18407:154:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18616:258:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18626:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "18635:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "18630:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18695:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "18720:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "18725:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "18716:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18716:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "18739:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "18744:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "18735:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "18735:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "18729:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18729:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "18709:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18709:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18709:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "18656:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18659:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "18653:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18653:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "18667:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "18669:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "18678:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18681:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "18674:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18674:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "18669:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "18649:3:10",
																"statements": []
															},
															"src": "18645:113:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18792:76:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "18842:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "18847:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "18838:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18838:16:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18856:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "18831:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18831:27:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18831:27:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "18773:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18776:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "18770:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18770:13:10"
															},
															"nodeType": "YulIf",
															"src": "18767:101:10"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "18598:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "18603:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18608:6:10",
														"type": ""
													}
												],
												"src": "18567:307:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18931:269:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18941:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "18955:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18961:1:10",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "18951:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18951:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "18941:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18972:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "19002:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19008:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "18998:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18998:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "18976:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19049:51:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "19063:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "19077:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19085:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "19073:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19073:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "19063:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "19029:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "19022:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19022:26:10"
															},
															"nodeType": "YulIf",
															"src": "19019:81:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19152:42:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "19166:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19166:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19166:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "19116:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "19139:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19147:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "19136:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19136:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "19113:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19113:38:10"
															},
															"nodeType": "YulIf",
															"src": "19110:84:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "18915:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18924:6:10",
														"type": ""
													}
												],
												"src": "18880:320:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19249:238:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19259:58:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "19281:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "19311:4:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "19289:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19289:27:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19277:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19277:40:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "19263:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19428:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "19430:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19430:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19430:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "19371:10:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19383:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "19368:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19368:34:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "19407:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "19419:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "19404:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19404:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "19365:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19365:62:10"
															},
															"nodeType": "YulIf",
															"src": "19362:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19466:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "19470:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19459:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19459:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19459:22:10"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "19235:6:10",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "19243:4:10",
														"type": ""
													}
												],
												"src": "19206:281:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19521:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19538:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19541:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19531:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19531:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19531:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19635:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19638:4:10",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19628:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19628:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19628:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19659:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19662:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "19652:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19652:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19652:15:10"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "19493:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19707:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19724:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19727:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19717:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19717:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19717:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19821:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19824:4:10",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19814:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19814:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19814:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19845:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19848:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "19838:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19838:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19838:15:10"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "19679:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19893:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19910:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19913:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19903:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "19903:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19903:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20007:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20010:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20000:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20000:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20000:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20031:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20034:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "20024:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20024:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20024:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "19865:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20140:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20157:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20160:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "20150:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20150:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20150:12:10"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "20051:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20263:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20280:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20283:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "20273:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20273:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20273:12:10"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "20174:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20386:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20403:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20406:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "20396:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20396:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20396:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "20297:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20509:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20526:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20529:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "20519:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20519:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20519:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "20420:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20591:54:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20601:38:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "20619:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20626:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20615:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20615:14:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20635:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "20631:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20631:7:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "20611:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20611:28:10"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "20601:6:10"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "20574:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "20584:6:10",
														"type": ""
													}
												],
												"src": "20543:102:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20757:126:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20779:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20787:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20775:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20775:14:10"
																	},
																	{
																		"hexValue": "4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20791:34:10",
																		"type": "",
																		"value": "ERC721: caller is not token owne"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20768:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20768:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20768:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20847:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20855:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20843:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20843:15:10"
																	},
																	{
																		"hexValue": "72206f7220617070726f766564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20860:15:10",
																		"type": "",
																		"value": "r or approved"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20836:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "20836:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20836:40:10"
														}
													]
												},
												"name": "store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "20749:6:10",
														"type": ""
													}
												],
												"src": "20651:232:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20995:131:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21017:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21025:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21013:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21013:14:10"
																	},
																	{
																		"hexValue": "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21029:34:10",
																		"type": "",
																		"value": "ERC721: transfer to non ERC721Re"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21006:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21006:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21006:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21085:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21093:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21081:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21081:15:10"
																	},
																	{
																		"hexValue": "63656976657220696d706c656d656e746572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21098:20:10",
																		"type": "",
																		"value": "ceiver implementer"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21074:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21074:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21074:45:10"
														}
													]
												},
												"name": "store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "20987:6:10",
														"type": ""
													}
												],
												"src": "20889:237:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21238:118:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21260:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21268:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21256:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21256:14:10"
																	},
																	{
																		"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f727265637420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21272:34:10",
																		"type": "",
																		"value": "ERC721: transfer from incorrect "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21249:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21249:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21249:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21328:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21336:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21324:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21324:15:10"
																	},
																	{
																		"hexValue": "6f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21341:7:10",
																		"type": "",
																		"value": "owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21317:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21317:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21317:32:10"
														}
													]
												},
												"name": "store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21230:6:10",
														"type": ""
													}
												],
												"src": "21132:224:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21468:117:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21490:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21498:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21486:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21486:14:10"
																	},
																	{
																		"hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21502:34:10",
																		"type": "",
																		"value": "ERC721: transfer to the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21479:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21479:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21479:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21558:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21566:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21554:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21554:15:10"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21571:6:10",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21547:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21547:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21547:31:10"
														}
													]
												},
												"name": "store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21460:6:10",
														"type": ""
													}
												],
												"src": "21362:223:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21697:69:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21719:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21727:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21715:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21715:14:10"
																	},
																	{
																		"hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21731:27:10",
																		"type": "",
																		"value": "ERC721: approve to caller"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21708:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21708:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21708:51:10"
														}
													]
												},
												"name": "store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21689:6:10",
														"type": ""
													}
												],
												"src": "21591:175:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21878:122:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21900:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21908:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21896:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21896:14:10"
																	},
																	{
																		"hexValue": "4552433732313a2061646472657373207a65726f206973206e6f742061207661",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21912:34:10",
																		"type": "",
																		"value": "ERC721: address zero is not a va"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21889:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21889:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21889:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21968:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21976:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21964:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21964:15:10"
																	},
																	{
																		"hexValue": "6c6964206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21981:11:10",
																		"type": "",
																		"value": "lid owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21957:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "21957:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21957:36:10"
														}
													]
												},
												"name": "store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21870:6:10",
														"type": ""
													}
												],
												"src": "21772:228:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22112:68:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22134:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22142:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22130:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22130:14:10"
																	},
																	{
																		"hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22146:26:10",
																		"type": "",
																		"value": "ERC721: invalid token ID"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22123:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "22123:50:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22123:50:10"
														}
													]
												},
												"name": "store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "22104:6:10",
														"type": ""
													}
												],
												"src": "22006:174:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22292:114:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22314:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22322:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22310:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22310:14:10"
																	},
																	{
																		"hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22326:34:10",
																		"type": "",
																		"value": "ERC721: approval to current owne"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22303:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "22303:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22303:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22382:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22390:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22378:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22378:15:10"
																	},
																	{
																		"hexValue": "72",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22395:3:10",
																		"type": "",
																		"value": "r"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22371:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "22371:28:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22371:28:10"
														}
													]
												},
												"name": "store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "22284:6:10",
														"type": ""
													}
												],
												"src": "22186:220:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22518:142:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22540:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22548:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22536:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22536:14:10"
																	},
																	{
																		"hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22552:34:10",
																		"type": "",
																		"value": "ERC721: approve caller is not to"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22529:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "22529:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22529:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22608:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22616:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22604:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22604:15:10"
																	},
																	{
																		"hexValue": "6b656e206f776e6572206f7220617070726f76656420666f7220616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22621:31:10",
																		"type": "",
																		"value": "ken owner or approved for all"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22597:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "22597:56:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22597:56:10"
														}
													]
												},
												"name": "store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "22510:6:10",
														"type": ""
													}
												],
												"src": "22412:248:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22709:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "22766:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22775:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22778:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "22768:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "22768:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "22768:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "22732:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "22757:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "22739:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22739:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "22729:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22729:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "22722:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "22722:43:10"
															},
															"nodeType": "YulIf",
															"src": "22719:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22702:5:10",
														"type": ""
													}
												],
												"src": "22666:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22834:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "22888:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22897:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22900:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "22890:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "22890:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "22890:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "22857:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "22879:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "22864:14:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22864:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "22854:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22854:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "22847:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "22847:40:10"
															},
															"nodeType": "YulIf",
															"src": "22844:60:10"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22827:5:10",
														"type": ""
													}
												],
												"src": "22794:116:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22958:78:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23014:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "23023:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "23026:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "23016:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23016:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23016:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "22981:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "23005:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes4",
																					"nodeType": "YulIdentifier",
																					"src": "22988:16:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22988:23:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "22978:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22978:34:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "22971:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "22971:42:10"
															},
															"nodeType": "YulIf",
															"src": "22968:62:10"
														}
													]
												},
												"name": "validator_revert_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22951:5:10",
														"type": ""
													}
												],
												"src": "22916:120:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23085:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23142:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "23151:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "23154:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "23144:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23144:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23144:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "23108:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "23133:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "23115:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "23115:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "23105:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23105:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "23098:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "23098:43:10"
															},
															"nodeType": "YulIf",
															"src": "23095:63:10"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "23078:5:10",
														"type": ""
													}
												],
												"src": "23042:122:10"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e9919061173d565b6102bc565b6040516100fb9190611a5a565b60405180910390f35b61010c61039e565b6040516101199190611a75565b60405180910390f35b61013c60048036038101906101379190611797565b610430565b60405161014991906119f3565b60405180910390f35b61016c600480360381019061016791906116fd565b610476565b005b610188600480360381019061018391906115e7565b61058e565b005b6101a4600480360381019061019f91906115e7565b6105ee565b005b6101c060048036038101906101bb9190611797565b61060e565b6040516101cd91906119f3565b60405180910390f35b6101f060048036038101906101eb919061157a565b610695565b6040516101fd9190611bb7565b60405180910390f35b61020e61074d565b60405161021b9190611a75565b60405180910390f35b61023e600480360381019061023991906116bd565b6107df565b005b61025a6004803603810190610255919061163a565b6107f5565b005b61027660048036038101906102719190611797565b610857565b6040516102839190611a75565b60405180910390f35b6102a660048036038101906102a191906115a7565b6108bf565b6040516102b39190611a5a565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611d21565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611d21565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611b77565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611b97565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611a97565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611b57565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611b37565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611d21565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611d21565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e91565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611a97565b60405180910390fd5b61085184848484610ffe565b50505050565b6060610862826109bd565b600061086c61105a565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611071565b6040516020016108a79291906119cf565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c681611149565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611b57565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611ad7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611af7565b60405180910390fd5b610c4f83838361118a565b8273ffffffffffffffffffffffffffffffffffffffff16610c6f8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbc90611ad7565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f83838361118f565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef790611b17565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff19190611a5a565b60405180910390a3505050565b611009848484610b5e565b61101584848484611194565b611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b90611ab7565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016110808461132b565b01905060008167ffffffffffffffff81111561109f5761109e611de2565b5b6040519080825280601f01601f1916602001820160405280156110d15781602001600182028036833780820191505090505b509050600082602001820190505b60011561113e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112857611127611d84565b5b04945060008514156111395761113e565b6110df565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116b83610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006111b58473ffffffffffffffffffffffffffffffffffffffff1661147e565b1561131e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111de610a08565b8786866040518563ffffffff1660e01b81526004016112009493929190611a0e565b602060405180830381600087803b15801561121a57600080fd5b505af192505050801561124b57506040513d601f19601f82011682018060405250810190611248919061176a565b60015b6112ce573d806000811461127b576040519150601f19603f3d011682016040523d82523d6000602084013e611280565b606091505b506000815114156112c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bd90611ab7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611323565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611389577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161137f5761137e611d84565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106113c6576d04ee2d6d415b85acef810000000083816113bc576113bb611d84565b5b0492506020810190505b662386f26fc1000083106113f557662386f26fc1000083816113eb576113ea611d84565b5b0492506010810190505b6305f5e100831061141e576305f5e100838161141457611413611d84565b5b0492506008810190505b612710831061144357612710838161143957611438611d84565b5b0492506004810190505b60648310611466576064838161145c5761145b611d84565b5b0492506002810190505b600a8310611475576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006114b46114af84611bf7565b611bd2565b9050828152602081018484840111156114d0576114cf611e16565b5b6114db848285611cdf565b509392505050565b6000813590506114f2816120b1565b92915050565b600081359050611507816120c8565b92915050565b60008135905061151c816120df565b92915050565b600081519050611531816120df565b92915050565b600082601f83011261154c5761154b611e11565b5b813561155c8482602086016114a1565b91505092915050565b600081359050611574816120f6565b92915050565b6000602082840312156115905761158f611e20565b5b600061159e848285016114e3565b91505092915050565b600080604083850312156115be576115bd611e20565b5b60006115cc858286016114e3565b92505060206115dd858286016114e3565b9150509250929050565b600080600060608486031215611600576115ff611e20565b5b600061160e868287016114e3565b935050602061161f868287016114e3565b925050604061163086828701611565565b9150509250925092565b6000806000806080858703121561165457611653611e20565b5b6000611662878288016114e3565b9450506020611673878288016114e3565b935050604061168487828801611565565b925050606085013567ffffffffffffffff8111156116a5576116a4611e1b565b5b6116b187828801611537565b91505092959194509250565b600080604083850312156116d4576116d3611e20565b5b60006116e2858286016114e3565b92505060206116f3858286016114f8565b9150509250929050565b6000806040838503121561171457611713611e20565b5b6000611722858286016114e3565b925050602061173385828601611565565b9150509250929050565b60006020828403121561175357611752611e20565b5b60006117618482850161150d565b91505092915050565b6000602082840312156117805761177f611e20565b5b600061178e84828501611522565b91505092915050565b6000602082840312156117ad576117ac611e20565b5b60006117bb84828501611565565b91505092915050565b6117cd81611c6b565b82525050565b6117dc81611c7d565b82525050565b60006117ed82611c28565b6117f78185611c3e565b9350611807818560208601611cee565b61181081611e25565b840191505092915050565b600061182682611c33565b6118308185611c4f565b9350611840818560208601611cee565b61184981611e25565b840191505092915050565b600061185f82611c33565b6118698185611c60565b9350611879818560208601611cee565b80840191505092915050565b6000611892602d83611c4f565b915061189d82611e36565b604082019050919050565b60006118b5603283611c4f565b91506118c082611e85565b604082019050919050565b60006118d8602583611c4f565b91506118e382611ed4565b604082019050919050565b60006118fb602483611c4f565b915061190682611f23565b604082019050919050565b600061191e601983611c4f565b915061192982611f72565b602082019050919050565b6000611941602983611c4f565b915061194c82611f9b565b604082019050919050565b6000611964601883611c4f565b915061196f82611fea565b602082019050919050565b6000611987602183611c4f565b915061199282612013565b604082019050919050565b60006119aa603d83611c4f565b91506119b582612062565b604082019050919050565b6119c981611cd5565b82525050565b60006119db8285611854565b91506119e78284611854565b91508190509392505050565b6000602082019050611a0860008301846117c4565b92915050565b6000608082019050611a2360008301876117c4565b611a3060208301866117c4565b611a3d60408301856119c0565b8181036060830152611a4f81846117e2565b905095945050505050565b6000602082019050611a6f60008301846117d3565b92915050565b60006020820190508181036000830152611a8f818461181b565b905092915050565b60006020820190508181036000830152611ab081611885565b9050919050565b60006020820190508181036000830152611ad0816118a8565b9050919050565b60006020820190508181036000830152611af0816118cb565b9050919050565b60006020820190508181036000830152611b10816118ee565b9050919050565b60006020820190508181036000830152611b3081611911565b9050919050565b60006020820190508181036000830152611b5081611934565b9050919050565b60006020820190508181036000830152611b7081611957565b9050919050565b60006020820190508181036000830152611b908161197a565b9050919050565b60006020820190508181036000830152611bb08161199d565b9050919050565b6000602082019050611bcc60008301846119c0565b92915050565b6000611bdc611bed565b9050611be88282611d53565b919050565b6000604051905090565b600067ffffffffffffffff821115611c1257611c11611de2565b5b611c1b82611e25565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611c7682611cb5565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611d0c578082015181840152602081019050611cf1565b83811115611d1b576000848401525b50505050565b60006002820490506001821680611d3957607f821691505b60208210811415611d4d57611d4c611db3565b5b50919050565b611d5c82611e25565b810181811067ffffffffffffffff82111715611d7b57611d7a611de2565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6120ba81611c6b565b81146120c557600080fd5b50565b6120d181611c7d565b81146120dc57600080fd5b50565b6120e881611c89565b81146120f357600080fd5b50565b6120ff81611cd5565b811461210a57600080fd5b5056fea2646970667358221220639bf997794e95899aedc434283166317868d2eda58b67d712c4444cc7c27eaa64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x173D JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x1797 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x16FD JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x1797 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x157A JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x16BD JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x163A JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1797 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x15A7 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1D21 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1D21 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1B77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1B97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1D21 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1D21 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1071 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x19CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x1149 JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4F DUP4 DUP4 DUP4 PUSH2 0x118A JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6F DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBC SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH2 0x118F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF7 SWAP1 PUSH2 0x1B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF1 SWAP2 SWAP1 PUSH2 0x1A5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1009 DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1015 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x1054 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104B SWAP1 PUSH2 0x1AB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1080 DUP5 PUSH2 0x132B JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109F JUMPI PUSH2 0x109E PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x113E JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1128 JUMPI PUSH2 0x1127 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1139 JUMPI PUSH2 0x113E JUMP JUMPDEST PUSH2 0x10DF JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116B DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11B5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x147E JUMP JUMPDEST ISZERO PUSH2 0x131E JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x11DE PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1200 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x121A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x124B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1248 SWAP2 SWAP1 PUSH2 0x176A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12CE JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x127B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1280 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12BD SWAP1 PUSH2 0x1AB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1389 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x137F JUMPI PUSH2 0x137E PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x13C6 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x13BC JUMPI PUSH2 0x13BB PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x13F5 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x13EB JUMPI PUSH2 0x13EA PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x141E JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1414 JUMPI PUSH2 0x1413 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1443 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1439 JUMPI PUSH2 0x1438 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1466 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x145C JUMPI PUSH2 0x145B PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1475 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14B4 PUSH2 0x14AF DUP5 PUSH2 0x1BF7 JUMP JUMPDEST PUSH2 0x1BD2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x14D0 JUMPI PUSH2 0x14CF PUSH2 0x1E16 JUMP JUMPDEST JUMPDEST PUSH2 0x14DB DUP5 DUP3 DUP6 PUSH2 0x1CDF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14F2 DUP2 PUSH2 0x20B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1507 DUP2 PUSH2 0x20C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x151C DUP2 PUSH2 0x20DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1531 DUP2 PUSH2 0x20DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x154C JUMPI PUSH2 0x154B PUSH2 0x1E11 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x155C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x14A1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1574 DUP2 PUSH2 0x20F6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1590 JUMPI PUSH2 0x158F PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x159E DUP5 DUP3 DUP6 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15BE JUMPI PUSH2 0x15BD PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15CC DUP6 DUP3 DUP7 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x15DD DUP6 DUP3 DUP7 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1600 JUMPI PUSH2 0x15FF PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x160E DUP7 DUP3 DUP8 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x161F DUP7 DUP3 DUP8 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1630 DUP7 DUP3 DUP8 ADD PUSH2 0x1565 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1654 JUMPI PUSH2 0x1653 PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1662 DUP8 DUP3 DUP9 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1673 DUP8 DUP3 DUP9 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1684 DUP8 DUP3 DUP9 ADD PUSH2 0x1565 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16A5 JUMPI PUSH2 0x16A4 PUSH2 0x1E1B JUMP JUMPDEST JUMPDEST PUSH2 0x16B1 DUP8 DUP3 DUP9 ADD PUSH2 0x1537 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16D4 JUMPI PUSH2 0x16D3 PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16E2 DUP6 DUP3 DUP7 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x16F3 DUP6 DUP3 DUP7 ADD PUSH2 0x14F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1714 JUMPI PUSH2 0x1713 PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1722 DUP6 DUP3 DUP7 ADD PUSH2 0x14E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1733 DUP6 DUP3 DUP7 ADD PUSH2 0x1565 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1753 JUMPI PUSH2 0x1752 PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1761 DUP5 DUP3 DUP6 ADD PUSH2 0x150D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1780 JUMPI PUSH2 0x177F PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x178E DUP5 DUP3 DUP6 ADD PUSH2 0x1522 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17AD JUMPI PUSH2 0x17AC PUSH2 0x1E20 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17BB DUP5 DUP3 DUP6 ADD PUSH2 0x1565 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17CD DUP2 PUSH2 0x1C6B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x17DC DUP2 PUSH2 0x1C7D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17ED DUP3 PUSH2 0x1C28 JUMP JUMPDEST PUSH2 0x17F7 DUP2 DUP6 PUSH2 0x1C3E JUMP JUMPDEST SWAP4 POP PUSH2 0x1807 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CEE JUMP JUMPDEST PUSH2 0x1810 DUP2 PUSH2 0x1E25 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1826 DUP3 PUSH2 0x1C33 JUMP JUMPDEST PUSH2 0x1830 DUP2 DUP6 PUSH2 0x1C4F JUMP JUMPDEST SWAP4 POP PUSH2 0x1840 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CEE JUMP JUMPDEST PUSH2 0x1849 DUP2 PUSH2 0x1E25 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x185F DUP3 PUSH2 0x1C33 JUMP JUMPDEST PUSH2 0x1869 DUP2 DUP6 PUSH2 0x1C60 JUMP JUMPDEST SWAP4 POP PUSH2 0x1879 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CEE JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1892 PUSH1 0x2D DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x189D DUP3 PUSH2 0x1E36 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B5 PUSH1 0x32 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x18C0 DUP3 PUSH2 0x1E85 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18D8 PUSH1 0x25 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x18E3 DUP3 PUSH2 0x1ED4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18FB PUSH1 0x24 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x1906 DUP3 PUSH2 0x1F23 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x191E PUSH1 0x19 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x1929 DUP3 PUSH2 0x1F72 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1941 PUSH1 0x29 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x194C DUP3 PUSH2 0x1F9B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1964 PUSH1 0x18 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x196F DUP3 PUSH2 0x1FEA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1987 PUSH1 0x21 DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x1992 DUP3 PUSH2 0x2013 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19AA PUSH1 0x3D DUP4 PUSH2 0x1C4F JUMP JUMPDEST SWAP2 POP PUSH2 0x19B5 DUP3 PUSH2 0x2062 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19C9 DUP2 PUSH2 0x1CD5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB DUP3 DUP6 PUSH2 0x1854 JUMP JUMPDEST SWAP2 POP PUSH2 0x19E7 DUP3 DUP5 PUSH2 0x1854 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A08 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1A23 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17C4 JUMP JUMPDEST PUSH2 0x1A30 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17C4 JUMP JUMPDEST PUSH2 0x1A3D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x19C0 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1A4F DUP2 DUP5 PUSH2 0x17E2 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A6F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A8F DUP2 DUP5 PUSH2 0x181B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AB0 DUP2 PUSH2 0x1885 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AD0 DUP2 PUSH2 0x18A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AF0 DUP2 PUSH2 0x18CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B10 DUP2 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B30 DUP2 PUSH2 0x1911 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B50 DUP2 PUSH2 0x1934 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B70 DUP2 PUSH2 0x1957 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B90 DUP2 PUSH2 0x197A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB0 DUP2 PUSH2 0x199D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BCC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19C0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BDC PUSH2 0x1BED JUMP JUMPDEST SWAP1 POP PUSH2 0x1BE8 DUP3 DUP3 PUSH2 0x1D53 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1C12 JUMPI PUSH2 0x1C11 PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST PUSH2 0x1C1B DUP3 PUSH2 0x1E25 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C76 DUP3 PUSH2 0x1CB5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D0C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1CF1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1D1B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1D39 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1D4D JUMPI PUSH2 0x1D4C PUSH2 0x1DB3 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D5C DUP3 PUSH2 0x1E25 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1D7B JUMPI PUSH2 0x1D7A PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x20BA DUP2 PUSH2 0x1C6B JUMP JUMPDEST DUP2 EQ PUSH2 0x20C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x20D1 DUP2 PUSH2 0x1C7D JUMP JUMPDEST DUP2 EQ PUSH2 0x20DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x20E8 DUP2 PUSH2 0x1C89 JUMP JUMPDEST DUP2 EQ PUSH2 0x20F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x20FF DUP2 PUSH2 0x1CD5 JUMP JUMPDEST DUP2 EQ PUSH2 0x210A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x9BF99779 0x4E SWAP6 DUP10 SWAP11 0xED 0xC4 CALLVALUE 0x28 BALANCE PUSH7 0x317868D2EDA58B PUSH8 0xD712C4444CC7C27E 0xAA PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "628:16538:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:7:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13448:133:0:-;13529:16;13537:7;13529;:16::i;:::-;13521:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13448:133;:::o;640:96:5:-;693:7;719:10;712:17;;640:96;:::o;12750:171:0:-;12851:2;12824:15;:24;12840:7;12824:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12906:7;12902:2;12868:46;;12877:23;12892:7;12877:14;:23::i;:::-;12868:46;;;;;;;;;;;;12750:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11411:1227::-;11565:4;11538:31;;:23;11553:7;11538:14;:23::i;:::-;:31;;;11530:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11643:1;11629:16;;:2;:16;;;;11621:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11697:39;11718:4;11724:2;11728:7;11697:20;:39::i;:::-;11863:4;11836:31;;:23;11851:7;11836:14;:23::i;:::-;:31;;;11828:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11978:15;:24;11994:7;11978:24;;;;;;;;;;;;11971:31;;;;;;;;;;;12465:1;12446:9;:15;12456:4;12446:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12497:1;12480:9;:13;12490:2;12480:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12537:2;12518:7;:16;12526:7;12518:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12574:7;12570:2;12555:27;;12564:4;12555:27;;;;;;;;;;;;12593:38;12613:4;12619:2;12623:7;12593:19;:38::i;:::-;11411:1227;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13057:307::-;13207:8;13198:17;;:5;:17;;;;13190:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13293:8;13255:18;:25;13274:5;13255:25;;;;;;;;;;;;;;;:35;13281:8;13255:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13338:8;13316:41;;13331:5;13316:41;;;13348:8;13316:41;;;;;;:::i;:::-;;;;;;;;13057:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:6:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:0:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15568:122::-;;;;:::o;16109:121::-;;;;:::o;14133:831::-;14282:4;14302:15;:2;:13;;;:15::i;:::-;14298:660;;;14353:2;14337:36;;;14374:12;:10;:12::i;:::-;14388:4;14394:7;14403:4;14337:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14333:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14592:1;14575:6;:13;:18;14571:321;;;14617:60;;;;;;;;;;:::i;:::-;;;;;;;;14571:321;14844:6;14838:13;14829:6;14825:2;14821:15;14814:38;14333:573;14468:41;;;14458:51;;;:6;:51;;;;14451:58;;;;;14298:660;14943:4;14936:11;;14133:831;;;;;;;:::o;9889:890:9:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:4:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:410:10:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:112;;;280:79;;:::i;:::-;249:112;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;7:410;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;423:139;;;;:::o;568:133::-;611:5;649:6;636:20;627:29;;665:30;689:5;665:30;:::i;:::-;568:133;;;;:::o;707:137::-;752:5;790:6;777:20;768:29;;806:32;832:5;806:32;:::i;:::-;707:137;;;;:::o;850:141::-;906:5;937:6;931:13;922:22;;953:32;979:5;953:32;:::i;:::-;850:141;;;;:::o;1010:338::-;1065:5;1114:3;1107:4;1099:6;1095:17;1091:27;1081:122;;1122:79;;:::i;:::-;1081:122;1239:6;1226:20;1264:78;1338:3;1330:6;1323:4;1315:6;1311:17;1264:78;:::i;:::-;1255:87;;1071:277;1010:338;;;;:::o;1354:139::-;1400:5;1438:6;1425:20;1416:29;;1454:33;1481:5;1454:33;:::i;:::-;1354:139;;;;:::o;1499:329::-;1558:6;1607:2;1595:9;1586:7;1582:23;1578:32;1575:119;;;1613:79;;:::i;:::-;1575:119;1733:1;1758:53;1803:7;1794:6;1783:9;1779:22;1758:53;:::i;:::-;1748:63;;1704:117;1499:329;;;;:::o;1834:474::-;1902:6;1910;1959:2;1947:9;1938:7;1934:23;1930:32;1927:119;;;1965:79;;:::i;:::-;1927:119;2085:1;2110:53;2155:7;2146:6;2135:9;2131:22;2110:53;:::i;:::-;2100:63;;2056:117;2212:2;2238:53;2283:7;2274:6;2263:9;2259:22;2238:53;:::i;:::-;2228:63;;2183:118;1834:474;;;;;:::o;2314:619::-;2391:6;2399;2407;2456:2;2444:9;2435:7;2431:23;2427:32;2424:119;;;2462:79;;:::i;:::-;2424:119;2582:1;2607:53;2652:7;2643:6;2632:9;2628:22;2607:53;:::i;:::-;2597:63;;2553:117;2709:2;2735:53;2780:7;2771:6;2760:9;2756:22;2735:53;:::i;:::-;2725:63;;2680:118;2837:2;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2808:118;2314:619;;;;;:::o;2939:943::-;3034:6;3042;3050;3058;3107:3;3095:9;3086:7;3082:23;3078:33;3075:120;;;3114:79;;:::i;:::-;3075:120;3234:1;3259:53;3304:7;3295:6;3284:9;3280:22;3259:53;:::i;:::-;3249:63;;3205:117;3361:2;3387:53;3432:7;3423:6;3412:9;3408:22;3387:53;:::i;:::-;3377:63;;3332:118;3489:2;3515:53;3560:7;3551:6;3540:9;3536:22;3515:53;:::i;:::-;3505:63;;3460:118;3645:2;3634:9;3630:18;3617:32;3676:18;3668:6;3665:30;3662:117;;;3698:79;;:::i;:::-;3662:117;3803:62;3857:7;3848:6;3837:9;3833:22;3803:62;:::i;:::-;3793:72;;3588:287;2939:943;;;;;;;:::o;3888:468::-;3953:6;3961;4010:2;3998:9;3989:7;3985:23;3981:32;3978:119;;;4016:79;;:::i;:::-;3978:119;4136:1;4161:53;4206:7;4197:6;4186:9;4182:22;4161:53;:::i;:::-;4151:63;;4107:117;4263:2;4289:50;4331:7;4322:6;4311:9;4307:22;4289:50;:::i;:::-;4279:60;;4234:115;3888:468;;;;;:::o;4362:474::-;4430:6;4438;4487:2;4475:9;4466:7;4462:23;4458:32;4455:119;;;4493:79;;:::i;:::-;4455:119;4613:1;4638:53;4683:7;4674:6;4663:9;4659:22;4638:53;:::i;:::-;4628:63;;4584:117;4740:2;4766:53;4811:7;4802:6;4791:9;4787:22;4766:53;:::i;:::-;4756:63;;4711:118;4362:474;;;;;:::o;4842:327::-;4900:6;4949:2;4937:9;4928:7;4924:23;4920:32;4917:119;;;4955:79;;:::i;:::-;4917:119;5075:1;5100:52;5144:7;5135:6;5124:9;5120:22;5100:52;:::i;:::-;5090:62;;5046:116;4842:327;;;;:::o;5175:349::-;5244:6;5293:2;5281:9;5272:7;5268:23;5264:32;5261:119;;;5299:79;;:::i;:::-;5261:119;5419:1;5444:63;5499:7;5490:6;5479:9;5475:22;5444:63;:::i;:::-;5434:73;;5390:127;5175:349;;;;:::o;5530:329::-;5589:6;5638:2;5626:9;5617:7;5613:23;5609:32;5606:119;;;5644:79;;:::i;:::-;5606:119;5764:1;5789:53;5834:7;5825:6;5814:9;5810:22;5789:53;:::i;:::-;5779:63;;5735:117;5530:329;;;;:::o;5865:118::-;5952:24;5970:5;5952:24;:::i;:::-;5947:3;5940:37;5865:118;;:::o;5989:109::-;6070:21;6085:5;6070:21;:::i;:::-;6065:3;6058:34;5989:109;;:::o;6104:360::-;6190:3;6218:38;6250:5;6218:38;:::i;:::-;6272:70;6335:6;6330:3;6272:70;:::i;:::-;6265:77;;6351:52;6396:6;6391:3;6384:4;6377:5;6373:16;6351:52;:::i;:::-;6428:29;6450:6;6428:29;:::i;:::-;6423:3;6419:39;6412:46;;6194:270;6104:360;;;;:::o;6470:364::-;6558:3;6586:39;6619:5;6586:39;:::i;:::-;6641:71;6705:6;6700:3;6641:71;:::i;:::-;6634:78;;6721:52;6766:6;6761:3;6754:4;6747:5;6743:16;6721:52;:::i;:::-;6798:29;6820:6;6798:29;:::i;:::-;6793:3;6789:39;6782:46;;6562:272;6470:364;;;;:::o;6840:377::-;6946:3;6974:39;7007:5;6974:39;:::i;:::-;7029:89;7111:6;7106:3;7029:89;:::i;:::-;7022:96;;7127:52;7172:6;7167:3;7160:4;7153:5;7149:16;7127:52;:::i;:::-;7204:6;7199:3;7195:16;7188:23;;6950:267;6840:377;;;;:::o;7223:366::-;7365:3;7386:67;7450:2;7445:3;7386:67;:::i;:::-;7379:74;;7462:93;7551:3;7462:93;:::i;:::-;7580:2;7575:3;7571:12;7564:19;;7223:366;;;:::o;7595:::-;7737:3;7758:67;7822:2;7817:3;7758:67;:::i;:::-;7751:74;;7834:93;7923:3;7834:93;:::i;:::-;7952:2;7947:3;7943:12;7936:19;;7595:366;;;:::o;7967:::-;8109:3;8130:67;8194:2;8189:3;8130:67;:::i;:::-;8123:74;;8206:93;8295:3;8206:93;:::i;:::-;8324:2;8319:3;8315:12;8308:19;;7967:366;;;:::o;8339:::-;8481:3;8502:67;8566:2;8561:3;8502:67;:::i;:::-;8495:74;;8578:93;8667:3;8578:93;:::i;:::-;8696:2;8691:3;8687:12;8680:19;;8339:366;;;:::o;8711:::-;8853:3;8874:67;8938:2;8933:3;8874:67;:::i;:::-;8867:74;;8950:93;9039:3;8950:93;:::i;:::-;9068:2;9063:3;9059:12;9052:19;;8711:366;;;:::o;9083:::-;9225:3;9246:67;9310:2;9305:3;9246:67;:::i;:::-;9239:74;;9322:93;9411:3;9322:93;:::i;:::-;9440:2;9435:3;9431:12;9424:19;;9083:366;;;:::o;9455:::-;9597:3;9618:67;9682:2;9677:3;9618:67;:::i;:::-;9611:74;;9694:93;9783:3;9694:93;:::i;:::-;9812:2;9807:3;9803:12;9796:19;;9455:366;;;:::o;9827:::-;9969:3;9990:67;10054:2;10049:3;9990:67;:::i;:::-;9983:74;;10066:93;10155:3;10066:93;:::i;:::-;10184:2;10179:3;10175:12;10168:19;;9827:366;;;:::o;10199:::-;10341:3;10362:67;10426:2;10421:3;10362:67;:::i;:::-;10355:74;;10438:93;10527:3;10438:93;:::i;:::-;10556:2;10551:3;10547:12;10540:19;;10199:366;;;:::o;10571:118::-;10658:24;10676:5;10658:24;:::i;:::-;10653:3;10646:37;10571:118;;:::o;10695:435::-;10875:3;10897:95;10988:3;10979:6;10897:95;:::i;:::-;10890:102;;11009:95;11100:3;11091:6;11009:95;:::i;:::-;11002:102;;11121:3;11114:10;;10695:435;;;;;:::o;11136:222::-;11229:4;11267:2;11256:9;11252:18;11244:26;;11280:71;11348:1;11337:9;11333:17;11324:6;11280:71;:::i;:::-;11136:222;;;;:::o;11364:640::-;11559:4;11597:3;11586:9;11582:19;11574:27;;11611:71;11679:1;11668:9;11664:17;11655:6;11611:71;:::i;:::-;11692:72;11760:2;11749:9;11745:18;11736:6;11692:72;:::i;:::-;11774;11842:2;11831:9;11827:18;11818:6;11774:72;:::i;:::-;11893:9;11887:4;11883:20;11878:2;11867:9;11863:18;11856:48;11921:76;11992:4;11983:6;11921:76;:::i;:::-;11913:84;;11364:640;;;;;;;:::o;12010:210::-;12097:4;12135:2;12124:9;12120:18;12112:26;;12148:65;12210:1;12199:9;12195:17;12186:6;12148:65;:::i;:::-;12010:210;;;;:::o;12226:313::-;12339:4;12377:2;12366:9;12362:18;12354:26;;12426:9;12420:4;12416:20;12412:1;12401:9;12397:17;12390:47;12454:78;12527:4;12518:6;12454:78;:::i;:::-;12446:86;;12226:313;;;;:::o;12545:419::-;12711:4;12749:2;12738:9;12734:18;12726:26;;12798:9;12792:4;12788:20;12784:1;12773:9;12769:17;12762:47;12826:131;12952:4;12826:131;:::i;:::-;12818:139;;12545:419;;;:::o;12970:::-;13136:4;13174:2;13163:9;13159:18;13151:26;;13223:9;13217:4;13213:20;13209:1;13198:9;13194:17;13187:47;13251:131;13377:4;13251:131;:::i;:::-;13243:139;;12970:419;;;:::o;13395:::-;13561:4;13599:2;13588:9;13584:18;13576:26;;13648:9;13642:4;13638:20;13634:1;13623:9;13619:17;13612:47;13676:131;13802:4;13676:131;:::i;:::-;13668:139;;13395:419;;;:::o;13820:::-;13986:4;14024:2;14013:9;14009:18;14001:26;;14073:9;14067:4;14063:20;14059:1;14048:9;14044:17;14037:47;14101:131;14227:4;14101:131;:::i;:::-;14093:139;;13820:419;;;:::o;14245:::-;14411:4;14449:2;14438:9;14434:18;14426:26;;14498:9;14492:4;14488:20;14484:1;14473:9;14469:17;14462:47;14526:131;14652:4;14526:131;:::i;:::-;14518:139;;14245:419;;;:::o;14670:::-;14836:4;14874:2;14863:9;14859:18;14851:26;;14923:9;14917:4;14913:20;14909:1;14898:9;14894:17;14887:47;14951:131;15077:4;14951:131;:::i;:::-;14943:139;;14670:419;;;:::o;15095:::-;15261:4;15299:2;15288:9;15284:18;15276:26;;15348:9;15342:4;15338:20;15334:1;15323:9;15319:17;15312:47;15376:131;15502:4;15376:131;:::i;:::-;15368:139;;15095:419;;;:::o;15520:::-;15686:4;15724:2;15713:9;15709:18;15701:26;;15773:9;15767:4;15763:20;15759:1;15748:9;15744:17;15737:47;15801:131;15927:4;15801:131;:::i;:::-;15793:139;;15520:419;;;:::o;15945:::-;16111:4;16149:2;16138:9;16134:18;16126:26;;16198:9;16192:4;16188:20;16184:1;16173:9;16169:17;16162:47;16226:131;16352:4;16226:131;:::i;:::-;16218:139;;15945:419;;;:::o;16370:222::-;16463:4;16501:2;16490:9;16486:18;16478:26;;16514:71;16582:1;16571:9;16567:17;16558:6;16514:71;:::i;:::-;16370:222;;;;:::o;16598:129::-;16632:6;16659:20;;:::i;:::-;16649:30;;16688:33;16716:4;16708:6;16688:33;:::i;:::-;16598:129;;;:::o;16733:75::-;16766:6;16799:2;16793:9;16783:19;;16733:75;:::o;16814:307::-;16875:4;16965:18;16957:6;16954:30;16951:56;;;16987:18;;:::i;:::-;16951:56;17025:29;17047:6;17025:29;:::i;:::-;17017:37;;17109:4;17103;17099:15;17091:23;;16814:307;;;:::o;17127:98::-;17178:6;17212:5;17206:12;17196:22;;17127:98;;;:::o;17231:99::-;17283:6;17317:5;17311:12;17301:22;;17231:99;;;:::o;17336:168::-;17419:11;17453:6;17448:3;17441:19;17493:4;17488:3;17484:14;17469:29;;17336:168;;;;:::o;17510:169::-;17594:11;17628:6;17623:3;17616:19;17668:4;17663:3;17659:14;17644:29;;17510:169;;;;:::o;17685:148::-;17787:11;17824:3;17809:18;;17685:148;;;;:::o;17839:96::-;17876:7;17905:24;17923:5;17905:24;:::i;:::-;17894:35;;17839:96;;;:::o;17941:90::-;17975:7;18018:5;18011:13;18004:21;17993:32;;17941:90;;;:::o;18037:149::-;18073:7;18113:66;18106:5;18102:78;18091:89;;18037:149;;;:::o;18192:126::-;18229:7;18269:42;18262:5;18258:54;18247:65;;18192:126;;;:::o;18324:77::-;18361:7;18390:5;18379:16;;18324:77;;;:::o;18407:154::-;18491:6;18486:3;18481;18468:30;18553:1;18544:6;18539:3;18535:16;18528:27;18407:154;;;:::o;18567:307::-;18635:1;18645:113;18659:6;18656:1;18653:13;18645:113;;;18744:1;18739:3;18735:11;18729:18;18725:1;18720:3;18716:11;18709:39;18681:2;18678:1;18674:10;18669:15;;18645:113;;;18776:6;18773:1;18770:13;18767:101;;;18856:1;18847:6;18842:3;18838:16;18831:27;18767:101;18616:258;18567:307;;;:::o;18880:320::-;18924:6;18961:1;18955:4;18951:12;18941:22;;19008:1;19002:4;18998:12;19029:18;19019:81;;19085:4;19077:6;19073:17;19063:27;;19019:81;19147:2;19139:6;19136:14;19116:18;19113:38;19110:84;;;19166:18;;:::i;:::-;19110:84;18931:269;18880:320;;;:::o;19206:281::-;19289:27;19311:4;19289:27;:::i;:::-;19281:6;19277:40;19419:6;19407:10;19404:22;19383:18;19371:10;19368:34;19365:62;19362:88;;;19430:18;;:::i;:::-;19362:88;19470:10;19466:2;19459:22;19249:238;19206:281;;:::o;19493:180::-;19541:77;19538:1;19531:88;19638:4;19635:1;19628:15;19662:4;19659:1;19652:15;19679:180;19727:77;19724:1;19717:88;19824:4;19821:1;19814:15;19848:4;19845:1;19838:15;19865:180;19913:77;19910:1;19903:88;20010:4;20007:1;20000:15;20034:4;20031:1;20024:15;20051:117;20160:1;20157;20150:12;20174:117;20283:1;20280;20273:12;20297:117;20406:1;20403;20396:12;20420:117;20529:1;20526;20519:12;20543:102;20584:6;20635:2;20631:7;20626:2;20619:5;20615:14;20611:28;20601:38;;20543:102;;;:::o;20651:232::-;20791:34;20787:1;20779:6;20775:14;20768:58;20860:15;20855:2;20847:6;20843:15;20836:40;20651:232;:::o;20889:237::-;21029:34;21025:1;21017:6;21013:14;21006:58;21098:20;21093:2;21085:6;21081:15;21074:45;20889:237;:::o;21132:224::-;21272:34;21268:1;21260:6;21256:14;21249:58;21341:7;21336:2;21328:6;21324:15;21317:32;21132:224;:::o;21362:223::-;21502:34;21498:1;21490:6;21486:14;21479:58;21571:6;21566:2;21558:6;21554:15;21547:31;21362:223;:::o;21591:175::-;21731:27;21727:1;21719:6;21715:14;21708:51;21591:175;:::o;21772:228::-;21912:34;21908:1;21900:6;21896:14;21889:58;21981:11;21976:2;21968:6;21964:15;21957:36;21772:228;:::o;22006:174::-;22146:26;22142:1;22134:6;22130:14;22123:50;22006:174;:::o;22186:220::-;22326:34;22322:1;22314:6;22310:14;22303:58;22395:3;22390:2;22382:6;22378:15;22371:28;22186:220;:::o;22412:248::-;22552:34;22548:1;22540:6;22536:14;22529:58;22621:31;22616:2;22608:6;22604:15;22597:56;22412:248;:::o;22666:122::-;22739:24;22757:5;22739:24;:::i;:::-;22732:5;22729:35;22719:63;;22778:1;22775;22768:12;22719:63;22666:122;:::o;22794:116::-;22864:21;22879:5;22864:21;:::i;:::-;22857:5;22854:32;22844:60;;22900:1;22897;22890:12;22844:60;22794:116;:::o;22916:120::-;22988:23;23005:5;22988:23;:::i;:::-;22981:5;22978:34;22968:62;;23026:1;23023;23016:12;22968:62;22916:120;:::o;23042:122::-;23115:24;23133:5;23115:24;:::i;:::-;23108:5;23105:35;23095:63;;23154:1;23151;23144:12;23095:63;23042:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1703000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2924",
								"getApproved(uint256)": "5277",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "3025",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "infinite",
								"supportsInterface(bytes4)": "774",
								"symbol()": "infinite",
								"tokenURI(uint256)": "3467",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterConsecutiveTokenTransfer(address,address,uint256,uint96)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "15",
								"_approve(address,uint256)": "infinite",
								"_baseURI()": "infinite",
								"_beforeConsecutiveTokenTransfer(address,address,uint256,uint96)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(uint256)": "infinite",
								"_checkOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "2312",
								"_isApprovedOrOwner(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_ownerOf(uint256)": "2248",
								"_requireMinted(uint256)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_safeTransfer(address,address,uint256,bytes memory)": "infinite",
								"_setApprovalForAll(address,address,bool)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1464,
									"end": 1469,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1461,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1456,
									"end": 1469,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1489,
									"end": 1496,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1486,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1479,
									"end": 1496,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1390,
									"end": 1503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 7,
									"end": 428,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 7,
									"end": 428,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 96,
									"end": 101,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 121,
									"end": 187,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 137,
									"end": 186,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 179,
									"end": 185,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 137,
									"end": 186,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 137,
									"end": 186,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 137,
									"end": 186,
									"name": "tag",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 137,
									"end": 186,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 121,
									"end": 187,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 121,
									"end": 187,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 121,
									"end": 187,
									"name": "tag",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 121,
									"end": 187,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 112,
									"end": 187,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 112,
									"end": 187,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 210,
									"end": 216,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 203,
									"end": 208,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 196,
									"end": 217,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 248,
									"end": 252,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 241,
									"end": 246,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 237,
									"end": 253,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 286,
									"end": 289,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 277,
									"end": 283,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 272,
									"end": 275,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 268,
									"end": 284,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 265,
									"end": 290,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 262,
									"end": 374,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 262,
									"end": 374,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 262,
									"end": 374,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 293,
									"end": 372,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 293,
									"end": 372,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 293,
									"end": 372,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 293,
									"end": 372,
									"name": "tag",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 293,
									"end": 372,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 262,
									"end": 374,
									"name": "tag",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 262,
									"end": 374,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 383,
									"end": 422,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 415,
									"end": 421,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 410,
									"end": 413,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 405,
									"end": 408,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 383,
									"end": 422,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 383,
									"end": 422,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 383,
									"end": 422,
									"name": "tag",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 383,
									"end": 422,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 102,
									"end": 428,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 7,
									"end": 428,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 7,
									"end": 428,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 7,
									"end": 428,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 7,
									"end": 428,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 7,
									"end": 428,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 7,
									"end": 428,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 448,
									"end": 803,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 448,
									"end": 803,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 515,
									"end": 520,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 564,
									"end": 567,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 557,
									"end": 561,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 549,
									"end": 555,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 545,
									"end": 562,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 541,
									"end": 568,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 531,
									"end": 653,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 531,
									"end": 653,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 572,
									"end": 651,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 572,
									"end": 651,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 572,
									"end": 651,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 572,
									"end": 651,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 572,
									"end": 651,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 531,
									"end": 653,
									"name": "tag",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 531,
									"end": 653,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 682,
									"end": 688,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 676,
									"end": 689,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 707,
									"end": 797,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 793,
									"end": 796,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 785,
									"end": 791,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 778,
									"end": 782,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 770,
									"end": 776,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 766,
									"end": 783,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 707,
									"end": 797,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 707,
									"end": 797,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 707,
									"end": 797,
									"name": "tag",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 707,
									"end": 797,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 698,
									"end": 797,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 698,
									"end": 797,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 521,
									"end": 803,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 448,
									"end": 803,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 448,
									"end": 803,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 448,
									"end": 803,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 448,
									"end": 803,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 448,
									"end": 803,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 809,
									"end": 1662,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 809,
									"end": 1662,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 908,
									"end": 914,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 916,
									"end": 922,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 965,
									"end": 967,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 953,
									"end": 962,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 944,
									"end": 951,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 940,
									"end": 963,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 936,
									"end": 968,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 933,
									"end": 1052,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 933,
									"end": 1052,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 933,
									"end": 1052,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 971,
									"end": 1050,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 971,
									"end": 1050,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 971,
									"end": 1050,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 971,
									"end": 1050,
									"name": "tag",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 971,
									"end": 1050,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 933,
									"end": 1052,
									"name": "tag",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 933,
									"end": 1052,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1112,
									"end": 1113,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1101,
									"end": 1110,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1097,
									"end": 1114,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1091,
									"end": 1115,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1142,
									"end": 1160,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1134,
									"end": 1140,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1131,
									"end": 1161,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1128,
									"end": 1245,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1128,
									"end": 1245,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 1128,
									"end": 1245,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1164,
									"end": 1243,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 1164,
									"end": 1243,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "45"
								},
								{
									"begin": 1164,
									"end": 1243,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1164,
									"end": 1243,
									"name": "tag",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 1164,
									"end": 1243,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1128,
									"end": 1245,
									"name": "tag",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 1128,
									"end": 1245,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1343,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "46"
								},
								{
									"begin": 1335,
									"end": 1342,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1326,
									"end": 1332,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1315,
									"end": 1324,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1311,
									"end": 1333,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1343,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 1269,
									"end": 1343,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1269,
									"end": 1343,
									"name": "tag",
									"source": 10,
									"value": "46"
								},
								{
									"begin": 1269,
									"end": 1343,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1259,
									"end": 1343,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1259,
									"end": 1343,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1062,
									"end": 1353,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1413,
									"end": 1415,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1402,
									"end": 1411,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1398,
									"end": 1416,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1392,
									"end": 1417,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1444,
									"end": 1462,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1436,
									"end": 1442,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1433,
									"end": 1463,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1430,
									"end": 1547,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1430,
									"end": 1547,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "47"
								},
								{
									"begin": 1430,
									"end": 1547,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1466,
									"end": 1545,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "48"
								},
								{
									"begin": 1466,
									"end": 1545,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "45"
								},
								{
									"begin": 1466,
									"end": 1545,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1466,
									"end": 1545,
									"name": "tag",
									"source": 10,
									"value": "48"
								},
								{
									"begin": 1466,
									"end": 1545,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1430,
									"end": 1547,
									"name": "tag",
									"source": 10,
									"value": "47"
								},
								{
									"begin": 1430,
									"end": 1547,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1571,
									"end": 1645,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "49"
								},
								{
									"begin": 1637,
									"end": 1644,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1628,
									"end": 1634,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1617,
									"end": 1626,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1613,
									"end": 1635,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1571,
									"end": 1645,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 1571,
									"end": 1645,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1571,
									"end": 1645,
									"name": "tag",
									"source": 10,
									"value": "49"
								},
								{
									"begin": 1571,
									"end": 1645,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1645,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1645,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1655,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 809,
									"end": 1662,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 809,
									"end": 1662,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 809,
									"end": 1662,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 809,
									"end": 1662,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 809,
									"end": 1662,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 809,
									"end": 1662,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1668,
									"end": 1797,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 1668,
									"end": 1797,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1702,
									"end": 1708,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1729,
									"end": 1749,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "51"
								},
								{
									"begin": 1729,
									"end": 1749,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "52"
								},
								{
									"begin": 1729,
									"end": 1749,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1729,
									"end": 1749,
									"name": "tag",
									"source": 10,
									"value": "51"
								},
								{
									"begin": 1729,
									"end": 1749,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1719,
									"end": 1749,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1719,
									"end": 1749,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1758,
									"end": 1791,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "53"
								},
								{
									"begin": 1786,
									"end": 1790,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1778,
									"end": 1784,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1758,
									"end": 1791,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "54"
								},
								{
									"begin": 1758,
									"end": 1791,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1758,
									"end": 1791,
									"name": "tag",
									"source": 10,
									"value": "53"
								},
								{
									"begin": 1758,
									"end": 1791,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1797,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1797,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1797,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1797,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1803,
									"end": 1878,
									"name": "tag",
									"source": 10,
									"value": "52"
								},
								{
									"begin": 1803,
									"end": 1878,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1836,
									"end": 1842,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1869,
									"end": 1871,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1863,
									"end": 1872,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1853,
									"end": 1872,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1853,
									"end": 1872,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1803,
									"end": 1878,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1803,
									"end": 1878,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1884,
									"end": 2192,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 1884,
									"end": 2192,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1946,
									"end": 1950,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2036,
									"end": 2054,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2028,
									"end": 2034,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2025,
									"end": 2055,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 2022,
									"end": 2078,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2022,
									"end": 2078,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "57"
								},
								{
									"begin": 2022,
									"end": 2078,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2058,
									"end": 2076,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "58"
								},
								{
									"begin": 2058,
									"end": 2076,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "59"
								},
								{
									"begin": 2058,
									"end": 2076,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2058,
									"end": 2076,
									"name": "tag",
									"source": 10,
									"value": "58"
								},
								{
									"begin": 2058,
									"end": 2076,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2022,
									"end": 2078,
									"name": "tag",
									"source": 10,
									"value": "57"
								},
								{
									"begin": 2022,
									"end": 2078,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2096,
									"end": 2125,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "60"
								},
								{
									"begin": 2118,
									"end": 2124,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2096,
									"end": 2125,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "61"
								},
								{
									"begin": 2096,
									"end": 2125,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2096,
									"end": 2125,
									"name": "tag",
									"source": 10,
									"value": "60"
								},
								{
									"begin": 2096,
									"end": 2125,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2088,
									"end": 2125,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2088,
									"end": 2125,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2180,
									"end": 2184,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 2174,
									"end": 2178,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2170,
									"end": 2185,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2162,
									"end": 2185,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2162,
									"end": 2185,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1884,
									"end": 2192,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1884,
									"end": 2192,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1884,
									"end": 2192,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1884,
									"end": 2192,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 2198,
									"end": 2505,
									"name": "tag",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 2198,
									"end": 2505,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2266,
									"end": 2267,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "tag",
									"source": 10,
									"value": "63"
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2290,
									"end": 2296,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 2287,
									"end": 2288,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2284,
									"end": 2297,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "65"
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2375,
									"end": 2376,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 2370,
									"end": 2373,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2366,
									"end": 2377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2360,
									"end": 2378,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 2356,
									"end": 2357,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2351,
									"end": 2354,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2347,
									"end": 2358,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2340,
									"end": 2379,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2312,
									"end": 2314,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 2309,
									"end": 2310,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2305,
									"end": 2315,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2300,
									"end": 2315,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2300,
									"end": 2315,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "63"
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "tag",
									"source": 10,
									"value": "65"
								},
								{
									"begin": 2276,
									"end": 2389,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2407,
									"end": 2413,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 2404,
									"end": 2405,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2401,
									"end": 2414,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 2398,
									"end": 2499,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2398,
									"end": 2499,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "66"
								},
								{
									"begin": 2398,
									"end": 2499,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2487,
									"end": 2488,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2478,
									"end": 2484,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2473,
									"end": 2476,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2469,
									"end": 2485,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2462,
									"end": 2489,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2398,
									"end": 2499,
									"name": "tag",
									"source": 10,
									"value": "66"
								},
								{
									"begin": 2398,
									"end": 2499,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2247,
									"end": 2505,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2198,
									"end": 2505,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2198,
									"end": 2505,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2198,
									"end": 2505,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2198,
									"end": 2505,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 2511,
									"end": 2831,
									"name": "tag",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 2511,
									"end": 2831,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2555,
									"end": 2561,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2592,
									"end": 2593,
									"name": "PUSH",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 2586,
									"end": 2590,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2582,
									"end": 2594,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 2572,
									"end": 2594,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2572,
									"end": 2594,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2639,
									"end": 2640,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 2633,
									"end": 2637,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2629,
									"end": 2641,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 2660,
									"end": 2678,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 2650,
									"end": 2731,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "68"
								},
								{
									"begin": 2650,
									"end": 2731,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2716,
									"end": 2720,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 2708,
									"end": 2714,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2704,
									"end": 2721,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 2694,
									"end": 2721,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2694,
									"end": 2721,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2650,
									"end": 2731,
									"name": "tag",
									"source": 10,
									"value": "68"
								},
								{
									"begin": 2650,
									"end": 2731,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2778,
									"end": 2780,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 2770,
									"end": 2776,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2767,
									"end": 2781,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 2747,
									"end": 2765,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2744,
									"end": 2782,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 2741,
									"end": 2825,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2741,
									"end": 2825,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "69"
								},
								{
									"begin": 2741,
									"end": 2825,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2797,
									"end": 2815,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "70"
								},
								{
									"begin": 2797,
									"end": 2815,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "71"
								},
								{
									"begin": 2797,
									"end": 2815,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2797,
									"end": 2815,
									"name": "tag",
									"source": 10,
									"value": "70"
								},
								{
									"begin": 2797,
									"end": 2815,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2741,
									"end": 2825,
									"name": "tag",
									"source": 10,
									"value": "69"
								},
								{
									"begin": 2741,
									"end": 2825,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2562,
									"end": 2831,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2511,
									"end": 2831,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2511,
									"end": 2831,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2511,
									"end": 2831,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2511,
									"end": 2831,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 2837,
									"end": 3118,
									"name": "tag",
									"source": 10,
									"value": "54"
								},
								{
									"begin": 2837,
									"end": 3118,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2920,
									"end": 2947,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 2942,
									"end": 2946,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2920,
									"end": 2947,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "61"
								},
								{
									"begin": 2920,
									"end": 2947,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2920,
									"end": 2947,
									"name": "tag",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 2920,
									"end": 2947,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2912,
									"end": 2918,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2908,
									"end": 2948,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 3050,
									"end": 3056,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3038,
									"end": 3048,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3035,
									"end": 3057,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 3014,
									"end": 3032,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3002,
									"end": 3012,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2999,
									"end": 3033,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 2996,
									"end": 3058,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 2993,
									"end": 3081,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2993,
									"end": 3081,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "74"
								},
								{
									"begin": 2993,
									"end": 3081,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 3061,
									"end": 3079,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "75"
								},
								{
									"begin": 3061,
									"end": 3079,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "59"
								},
								{
									"begin": 3061,
									"end": 3079,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 3061,
									"end": 3079,
									"name": "tag",
									"source": 10,
									"value": "75"
								},
								{
									"begin": 3061,
									"end": 3079,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2993,
									"end": 3081,
									"name": "tag",
									"source": 10,
									"value": "74"
								},
								{
									"begin": 2993,
									"end": 3081,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3101,
									"end": 3111,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3097,
									"end": 3099,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 3090,
									"end": 3112,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2880,
									"end": 3118,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2837,
									"end": 3118,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2837,
									"end": 3118,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2837,
									"end": 3118,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 3124,
									"end": 3304,
									"name": "tag",
									"source": 10,
									"value": "71"
								},
								{
									"begin": 3124,
									"end": 3304,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3172,
									"end": 3249,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3169,
									"end": 3170,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3162,
									"end": 3250,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3269,
									"end": 3273,
									"name": "PUSH",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 3266,
									"end": 3267,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 3259,
									"end": 3274,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3293,
									"end": 3297,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 3290,
									"end": 3291,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3283,
									"end": 3298,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 3310,
									"end": 3490,
									"name": "tag",
									"source": 10,
									"value": "59"
								},
								{
									"begin": 3310,
									"end": 3490,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3358,
									"end": 3435,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3355,
									"end": 3356,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3348,
									"end": 3436,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3455,
									"end": 3459,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 3452,
									"end": 3453,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 3445,
									"end": 3460,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3479,
									"end": 3483,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 3476,
									"end": 3477,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3469,
									"end": 3484,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 3496,
									"end": 3613,
									"name": "tag",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 3496,
									"end": 3613,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3605,
									"end": 3606,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3602,
									"end": 3603,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3595,
									"end": 3607,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 3619,
									"end": 3736,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 3619,
									"end": 3736,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3728,
									"end": 3729,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3725,
									"end": 3726,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3718,
									"end": 3730,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 3742,
									"end": 3859,
									"name": "tag",
									"source": 10,
									"value": "45"
								},
								{
									"begin": 3742,
									"end": 3859,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3851,
									"end": 3852,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3848,
									"end": 3849,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3841,
									"end": 3853,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 3865,
									"end": 3982,
									"name": "tag",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 3865,
									"end": 3982,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3974,
									"end": 3975,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3971,
									"end": 3972,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3964,
									"end": 3976,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 3988,
									"end": 4090,
									"name": "tag",
									"source": 10,
									"value": "61"
								},
								{
									"begin": 3988,
									"end": 4090,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4029,
									"end": 4035,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 4080,
									"end": 4082,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 4076,
									"end": 4083,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 4071,
									"end": 4073,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 4064,
									"end": 4069,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 4060,
									"end": 4074,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 4056,
									"end": 4084,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 4046,
									"end": 4084,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 4046,
									"end": 4084,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3988,
									"end": 4090,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 3988,
									"end": 4090,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3988,
									"end": 4090,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3988,
									"end": 4090,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 17166,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220639bf997794e95899aedc434283166317868d2eda58b67d712c4444cc7c27eaa64736f6c63430008070033",
									".code": [
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "6352211E"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "A22CB465"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "A22CB465"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "B88D4FDE"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "C87B56DD"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "E985E9C5"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "6352211E"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "1FFC9A7"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "81812FC"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "42842E0E"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 628,
											"end": 17166,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1672,
											"end": 1676,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1722,
											"end": 1747,
											"name": "PUSH",
											"source": 0,
											"value": "80AC58CD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1718,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1747,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1778,
											"end": 1811,
											"name": "PUSH",
											"source": 0,
											"value": "5B5E139F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1774,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1763,
											"end": 1811,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1707,
											"end": 1811,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1827,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1851,
											"end": 1862,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1827,
											"end": 1850,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 1827,
											"end": 1863,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1827,
											"end": 1863,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1827,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1707,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1688,
											"end": 1863,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1688,
											"end": 1863,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1570,
											"end": 1870,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2538,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2557,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2471,
											"end": 2569,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4011,
											"end": 4018,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4030,
											"end": 4053,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4030,
											"end": 4044,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 4030,
											"end": 4053,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4030,
											"end": 4053,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 4030,
											"end": 4053,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4086,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4087,
											"end": 4094,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4071,
											"end": 4095,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4064,
											"end": 4095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4064,
											"end": 4095,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3935,
											"end": 4102,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3548,
											"end": 3561,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3564,
											"end": 3587,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 3579,
											"end": 3586,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3564,
											"end": 3578,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 3564,
											"end": 3587,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3564,
											"end": 3587,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 3564,
											"end": 3587,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3548,
											"end": 3587,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3548,
											"end": 3587,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3611,
											"end": 3616,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3607,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3616,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 3597,
											"end": 3654,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3702,
											"end": 3707,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 3686,
											"end": 3696,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 3686,
											"end": 3698,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3686,
											"end": 3698,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 3686,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3707,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3711,
											"end": 3748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 3728,
											"end": 3733,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3735,
											"end": 3747,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3735,
											"end": 3745,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 3735,
											"end": 3747,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3735,
											"end": 3747,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3735,
											"end": 3747,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3711,
											"end": 3727,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 3711,
											"end": 3748,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3711,
											"end": 3748,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 3711,
											"end": 3748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 3686,
											"end": 3748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3665,
											"end": 3835,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3846,
											"end": 3867,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 3855,
											"end": 3857,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3859,
											"end": 3866,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3846,
											"end": 3854,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 3846,
											"end": 3867,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3846,
											"end": 3867,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 3846,
											"end": 3867,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3538,
											"end": 3874,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3468,
											"end": 3874,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4801,
											"end": 4842,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 4820,
											"end": 4832,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 4820,
											"end": 4830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4820,
											"end": 4832,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4820,
											"end": 4832,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 4820,
											"end": 4832,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4841,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4801,
											"end": 4819,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 4801,
											"end": 4842,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4801,
											"end": 4842,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 4801,
											"end": 4842,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 4793,
											"end": 4892,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4903,
											"end": 4931,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 4913,
											"end": 4917,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4919,
											"end": 4921,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4923,
											"end": 4930,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4903,
											"end": 4912,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 4903,
											"end": 4931,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4903,
											"end": 4931,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 4903,
											"end": 4931,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4612,
											"end": 4938,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 5154,
											"end": 5158,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5160,
											"end": 5162,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5164,
											"end": 5171,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5137,
											"end": 5153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 5137,
											"end": 5176,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5004,
											"end": 5183,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2262,
											"end": 2269,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2281,
											"end": 2294,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2297,
											"end": 2314,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2306,
											"end": 2313,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2297,
											"end": 2305,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 2297,
											"end": 2314,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2297,
											"end": 2314,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2297,
											"end": 2314,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2314,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2314,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2350,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2332,
											"end": 2337,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2332,
											"end": 2351,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2324,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2397,
											"end": 2402,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2390,
											"end": 2402,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2390,
											"end": 2402,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2390,
											"end": 2402,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2190,
											"end": 2409,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2001,
											"end": 2008,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2045,
											"end": 2046,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2033,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2047,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 2020,
											"end": 2093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2119,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2120,
											"end": 2125,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2110,
											"end": 2126,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2103,
											"end": 2126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2103,
											"end": 2126,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 2133,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2689,
											"end": 2702,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2721,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2728,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2735,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4263,
											"end": 4315,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 4282,
											"end": 4294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 4282,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4282,
											"end": 4294,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4282,
											"end": 4294,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 4282,
											"end": 4294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4296,
											"end": 4304,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4306,
											"end": 4314,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4263,
											"end": 4281,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 4263,
											"end": 4315,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4263,
											"end": 4315,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 4263,
											"end": 4315,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4169,
											"end": 4322,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5417,
											"end": 5458,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 5436,
											"end": 5448,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 5436,
											"end": 5446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 5436,
											"end": 5448,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5436,
											"end": 5448,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 5436,
											"end": 5448,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5450,
											"end": 5457,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5417,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 5417,
											"end": 5458,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5417,
											"end": 5458,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 5417,
											"end": 5458,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 5409,
											"end": 5508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5518,
											"end": 5556,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 5532,
											"end": 5536,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5538,
											"end": 5540,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5542,
											"end": 5549,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5551,
											"end": 5555,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5518,
											"end": 5531,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 5518,
											"end": 5556,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5518,
											"end": 5556,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 5518,
											"end": 5556,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5249,
											"end": 5563,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2874,
											"end": 2887,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2899,
											"end": 2922,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2914,
											"end": 2921,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 2899,
											"end": 2922,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2899,
											"end": 2922,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2899,
											"end": 2922,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2954,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 2957,
											"end": 2965,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2967,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2967,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3008,
											"end": 3009,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2990,
											"end": 2997,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3005,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3009,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "tag",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3036,
											"end": 3043,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3045,
											"end": 3063,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 3045,
											"end": 3052,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3045,
											"end": 3061,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 3045,
											"end": 3063,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3045,
											"end": 3063,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 3045,
											"end": 3063,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "tag",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3019,
											"end": 3064,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 2984,
											"end": 3070,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2977,
											"end": 3070,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2977,
											"end": 3070,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2977,
											"end": 3070,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2801,
											"end": 3077,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4485,
											"end": 4489,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4508,
											"end": 4526,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4527,
											"end": 4532,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4508,
											"end": 4533,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4534,
											"end": 4542,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4508,
											"end": 4543,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4501,
											"end": 4543,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4501,
											"end": 4543,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4388,
											"end": 4550,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 914,
											"end": 918,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 977,
											"name": "PUSH",
											"source": 7,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 948,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 930,
											"end": 977,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 930,
											"end": 977,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 829,
											"end": 984,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13448,
											"end": 13581,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 13448,
											"end": 13581,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13529,
											"end": 13545,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 13537,
											"end": 13544,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13529,
											"end": 13536,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 13529,
											"end": 13545,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13529,
											"end": 13545,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 13529,
											"end": 13545,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 13521,
											"end": 13574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13448,
											"end": 13581,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13448,
											"end": 13581,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 12750,
											"end": 12921,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 12750,
											"end": 12921,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12853,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12839,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12840,
											"end": 12847,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12848,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12853,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12906,
											"end": 12913,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12902,
											"end": 12904,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12877,
											"end": 12900,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 12892,
											"end": 12899,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12877,
											"end": 12891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 12877,
											"end": 12900,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 12877,
											"end": 12900,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 12877,
											"end": 12900,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12868,
											"end": 12914,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 12750,
											"end": 12921,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12750,
											"end": 12921,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12750,
											"end": 12921,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7633,
											"end": 7637,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7649,
											"end": 7662,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7665,
											"end": 7688,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 7680,
											"end": 7687,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7665,
											"end": 7679,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 7665,
											"end": 7688,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7665,
											"end": 7688,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 7665,
											"end": 7688,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7649,
											"end": 7688,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7649,
											"end": 7688,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7717,
											"end": 7722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7713,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7722,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7726,
											"end": 7758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 7743,
											"end": 7748,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7750,
											"end": 7757,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7726,
											"end": 7742,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 7726,
											"end": 7758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7726,
											"end": 7758,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 7726,
											"end": 7758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 7706,
											"end": 7758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7786,
											"end": 7793,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 7774,
											"end": 7781,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7773,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 7762,
											"end": 7782,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7762,
											"end": 7782,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 7762,
											"end": 7782,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7762,
											"end": 7793,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 7706,
											"end": 7793,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7698,
											"end": 7794,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7698,
											"end": 7794,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7698,
											"end": 7794,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7801,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11411,
											"end": 12638,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 11411,
											"end": 12638,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11565,
											"end": 11569,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11538,
											"end": 11569,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11538,
											"end": 11569,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11538,
											"end": 11561,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 11553,
											"end": 11560,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11538,
											"end": 11552,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 11538,
											"end": 11561,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11538,
											"end": 11561,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 11538,
											"end": 11561,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11538,
											"end": 11569,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11538,
											"end": 11569,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11538,
											"end": 11569,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 11530,
											"end": 11611,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11643,
											"end": 11644,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11629,
											"end": 11645,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11629,
											"end": 11645,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11629,
											"end": 11631,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11629,
											"end": 11645,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11629,
											"end": 11645,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11629,
											"end": 11645,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11629,
											"end": 11645,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "tag",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 11621,
											"end": 11686,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11697,
											"end": 11736,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 11718,
											"end": 11722,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11724,
											"end": 11726,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11728,
											"end": 11735,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11697,
											"end": 11717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 11697,
											"end": 11736,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11697,
											"end": 11736,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 11697,
											"end": 11736,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11863,
											"end": 11867,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11836,
											"end": 11867,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11836,
											"end": 11867,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11836,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 11851,
											"end": 11858,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11836,
											"end": 11850,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 11836,
											"end": 11859,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11836,
											"end": 11859,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 11836,
											"end": 11859,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11836,
											"end": 11867,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11836,
											"end": 11867,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11836,
											"end": 11867,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "tag",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 11828,
											"end": 11909,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 11993,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11994,
											"end": 12001,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 11978,
											"end": 12002,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11971,
											"end": 12002,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12465,
											"end": 12466,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 12446,
											"end": 12455,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12456,
											"end": 12460,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12461,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12446,
											"end": 12466,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12497,
											"end": 12498,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 12480,
											"end": 12489,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12490,
											"end": 12492,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12493,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12480,
											"end": 12498,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12537,
											"end": 12539,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12525,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12526,
											"end": 12533,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12534,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12518,
											"end": 12539,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12574,
											"end": 12581,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12570,
											"end": 12572,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12564,
											"end": 12568,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12555,
											"end": 12582,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 12593,
											"end": 12631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 12613,
											"end": 12617,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12619,
											"end": 12621,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12623,
											"end": 12630,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12593,
											"end": 12612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 12593,
											"end": 12631,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 12593,
											"end": 12631,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 12593,
											"end": 12631,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11411,
											"end": 12638,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11411,
											"end": 12638,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11411,
											"end": 12638,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11411,
											"end": 12638,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6904,
											"end": 6911,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6930,
											"end": 6937,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6938,
											"end": 6945,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6930,
											"end": 6946,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6923,
											"end": 6946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6923,
											"end": 6946,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6838,
											"end": 6953,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 13057,
											"end": 13364,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 13057,
											"end": 13364,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13207,
											"end": 13215,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13198,
											"end": 13215,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13198,
											"end": 13215,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13198,
											"end": 13203,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13198,
											"end": 13215,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13198,
											"end": 13215,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13198,
											"end": 13215,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 13198,
											"end": 13215,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "tag",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "tag",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 13190,
											"end": 13245,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13293,
											"end": 13301,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13273,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13274,
											"end": 13279,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13255,
											"end": 13280,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13281,
											"end": 13289,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13290,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 13255,
											"end": 13301,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13338,
											"end": 13346,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13331,
											"end": 13336,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "PUSH",
											"source": 0,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 13348,
											"end": 13356,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13316,
											"end": 13357,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 13057,
											"end": 13364,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13057,
											"end": 13364,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13057,
											"end": 13364,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13057,
											"end": 13364,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6574,
											"end": 6602,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 6584,
											"end": 6588,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6590,
											"end": 6592,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6594,
											"end": 6601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6574,
											"end": 6583,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 6574,
											"end": 6602,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6574,
											"end": 6602,
											"name": "tag",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 6574,
											"end": 6602,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6620,
											"end": 6667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 6643,
											"end": 6647,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6649,
											"end": 6651,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6653,
											"end": 6660,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6662,
											"end": 6666,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6620,
											"end": 6642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 6620,
											"end": 6667,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6620,
											"end": 6667,
											"name": "tag",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 6620,
											"end": 6667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "tag",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "tag",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 6612,
											"end": 6722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6729,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3319,
											"end": 3411,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 3319,
											"end": 3411,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3395,
											"end": 3404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3411,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 471,
											"end": 484,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 520,
											"end": 534,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 558,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 548,
											"end": 553,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 537,
											"end": 547,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "tag",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 537,
											"end": 558,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 520,
											"end": 558,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 520,
											"end": 558,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 572,
											"end": 592,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 606,
											"end": 612,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "tag",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "tag",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "tag",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 595,
											"end": 613,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 572,
											"end": 613,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 572,
											"end": 613,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 627,
											"end": 638,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 759,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 749,
											"end": 751,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 745,
											"end": 760,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 737,
											"end": 743,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 733,
											"end": 761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 726,
											"end": 761,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 726,
											"end": 761,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 795,
											"end": 799,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 819,
											"end": 824,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 819,
											"end": 824,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 819,
											"end": 824,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 819,
											"end": 824,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 819,
											"end": 824,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 819,
											"end": 824,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 819,
											"end": 824,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 819,
											"end": 824,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 958,
											"end": 966,
											"name": "PUSH",
											"source": 6,
											"value": "3031323334353637383961626364656600000000000000000000000000000000"
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 946,
											"end": 951,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 942,
											"end": 956,
											"name": "MOD",
											"source": 6
										},
										{
											"begin": 937,
											"end": 967,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 932,
											"end": 935,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 924,
											"end": 968,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": 1012,
											"end": 1014,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1045,
											"end": 1046,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1036,
											"end": 1041,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1046,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1048,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 1048,
											"end": 1053,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "tag",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1088,
											"end": 1094,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1081,
											"end": 1094,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7321,
											"end": 7325,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7373,
											"end": 7374,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 7353,
											"end": 7360,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 7344,
											"end": 7361,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7344,
											"end": 7361,
											"name": "tag",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 7344,
											"end": 7361,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 7344,
											"end": 7375,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7337,
											"end": 7375,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7337,
											"end": 7375,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7256,
											"end": 7382,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 15568,
											"end": 15690,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 15568,
											"end": 15690,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15568,
											"end": 15690,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15568,
											"end": 15690,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15568,
											"end": 15690,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15568,
											"end": 15690,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 16109,
											"end": 16230,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 16109,
											"end": 16230,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16109,
											"end": 16230,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16109,
											"end": 16230,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16109,
											"end": 16230,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16109,
											"end": 16230,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14282,
											"end": 14286,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14302,
											"end": 14317,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 14302,
											"end": 14304,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 14302,
											"end": 14315,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14302,
											"end": 14315,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14302,
											"end": 14315,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 14302,
											"end": 14317,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14302,
											"end": 14317,
											"name": "tag",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 14302,
											"end": 14317,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14298,
											"end": 14958,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14298,
											"end": 14958,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 14298,
											"end": 14958,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14353,
											"end": 14355,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14373,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14337,
											"end": 14373,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14373,
											"name": "PUSH",
											"source": 0,
											"value": "150B7A02"
										},
										{
											"begin": 14374,
											"end": 14386,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 14374,
											"end": 14384,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 14374,
											"end": 14386,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14374,
											"end": 14386,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 14374,
											"end": 14386,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14388,
											"end": 14392,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 14394,
											"end": 14401,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 14403,
											"end": 14407,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "tag",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "tag",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "tag",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 14337,
											"end": 14408,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "tag",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14592,
											"end": 14593,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14575,
											"end": 14581,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14575,
											"end": 14588,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14575,
											"end": 14593,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 14571,
											"end": 14892,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 14571,
											"end": 14892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 14571,
											"end": 14892,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14617,
											"end": 14677,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 14571,
											"end": 14892,
											"name": "tag",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 14571,
											"end": 14892,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14844,
											"end": 14850,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14838,
											"end": 14851,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14829,
											"end": 14835,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14825,
											"end": 14827,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14821,
											"end": 14836,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14814,
											"end": 14852,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "tag",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 14333,
											"end": 14906,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14468,
											"end": 14509,
											"name": "PUSH",
											"source": 0,
											"value": "150B7A02"
										},
										{
											"begin": 14468,
											"end": 14509,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 14468,
											"end": 14509,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 14458,
											"end": 14509,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14458,
											"end": 14509,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 14458,
											"end": 14509,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14458,
											"end": 14464,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14458,
											"end": 14509,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14458,
											"end": 14509,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 14458,
											"end": 14509,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14458,
											"end": 14509,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 14451,
											"end": 14509,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14451,
											"end": 14509,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14451,
											"end": 14509,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14451,
											"end": 14509,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 14451,
											"end": 14509,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14298,
											"end": 14958,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 14298,
											"end": 14958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14943,
											"end": 14947,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 14936,
											"end": 14947,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14936,
											"end": 14947,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14133,
											"end": 14964,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "tag",
											"source": 9,
											"value": "200"
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9942,
											"end": 9949,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9961,
											"end": 9975,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9978,
											"end": 9979,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9961,
											"end": 9979,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9961,
											"end": 9979,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10026,
											"end": 10032,
											"name": "PUSH",
											"source": 9,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 10017,
											"end": 10022,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10017,
											"end": 10032,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10061,
											"end": 10067,
											"name": "PUSH",
											"source": 9,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "tag",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "tag",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10095,
											"end": 10097,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "tag",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10138,
											"end": 10144,
											"name": "PUSH",
											"source": 9,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10129,
											"end": 10134,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10129,
											"end": 10144,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "241"
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10173,
											"end": 10179,
											"name": "PUSH",
											"source": 9,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "242"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "tag",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "tag",
											"source": 9,
											"value": "242"
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10207,
											"end": 10209,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "tag",
											"source": 9,
											"value": "241"
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10250,
											"end": 10256,
											"name": "PUSH",
											"source": 9,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10241,
											"end": 10246,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10241,
											"end": 10256,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10285,
											"end": 10291,
											"name": "PUSH",
											"source": 9,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "tag",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "tag",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10319,
											"end": 10321,
											"name": "PUSH",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "tag",
											"source": 9,
											"value": "244"
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10362,
											"end": 10367,
											"name": "PUSH",
											"source": 9,
											"value": "5F5E100"
										},
										{
											"begin": 10353,
											"end": 10358,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10353,
											"end": 10367,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10396,
											"end": 10401,
											"name": "PUSH",
											"source": 9,
											"value": "5F5E100"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "248"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "tag",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "tag",
											"source": 9,
											"value": "248"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10429,
											"end": 10430,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "tag",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10471,
											"end": 10476,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 10462,
											"end": 10467,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10462,
											"end": 10476,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "250"
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10505,
											"end": 10510,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "tag",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "tag",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10538,
											"end": 10539,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "tag",
											"source": 9,
											"value": "250"
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10580,
											"end": 10585,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10571,
											"end": 10576,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10571,
											"end": 10585,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10614,
											"end": 10619,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "254"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "255"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "tag",
											"source": 9,
											"value": "255"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "tag",
											"source": 9,
											"value": "254"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10647,
											"end": 10648,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "tag",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10689,
											"end": 10694,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 10680,
											"end": 10685,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10680,
											"end": 10694,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10724,
											"end": 10725,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "tag",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10766,
											"end": 10772,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10759,
											"end": 10772,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10759,
											"end": 10772,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10759,
											"end": 10772,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 4,
											"value": "217"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1487,
											"end": 1488,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1472,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 417,
											"name": "tag",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 7,
											"end": 417,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 84,
											"end": 89,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 166,
											"end": 172,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 125,
											"end": 173,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 125,
											"end": 173,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 109,
											"end": 174,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 109,
											"end": 174,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 100,
											"end": 174,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 100,
											"end": 174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 197,
											"end": 203,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 190,
											"end": 195,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 183,
											"end": 204,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 235,
											"end": 239,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 228,
											"end": 233,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 224,
											"end": 240,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 273,
											"end": 276,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 264,
											"end": 270,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 259,
											"end": 262,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 255,
											"end": 271,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 252,
											"end": 277,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 249,
											"end": 361,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 249,
											"end": 361,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 249,
											"end": 361,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 280,
											"end": 359,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 280,
											"end": 359,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 249,
											"end": 361,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 249,
											"end": 361,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 370,
											"end": 411,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 404,
											"end": 410,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 399,
											"end": 402,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 394,
											"end": 397,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 370,
											"end": 411,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 370,
											"end": 411,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 90,
											"end": 417,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 417,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7,
											"end": 417,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 417,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 417,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 423,
											"end": 562,
											"name": "tag",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 423,
											"end": 562,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 469,
											"end": 474,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 507,
											"end": 513,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 494,
											"end": 514,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 485,
											"end": 514,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 485,
											"end": 514,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 523,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 523,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "tag",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 523,
											"end": 556,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 423,
											"end": 562,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 423,
											"end": 562,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 423,
											"end": 562,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 423,
											"end": 562,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 423,
											"end": 562,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 568,
											"end": 701,
											"name": "tag",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 568,
											"end": 701,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 611,
											"end": 616,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 649,
											"end": 655,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 636,
											"end": 656,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 627,
											"end": 656,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 627,
											"end": 656,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 665,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 665,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 665,
											"end": 695,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 665,
											"end": 695,
											"name": "tag",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 665,
											"end": 695,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 568,
											"end": 701,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 568,
											"end": 701,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 568,
											"end": 701,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 568,
											"end": 701,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 568,
											"end": 701,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 707,
											"end": 844,
											"name": "tag",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 707,
											"end": 844,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 752,
											"end": 757,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 790,
											"end": 796,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 777,
											"end": 797,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 768,
											"end": 797,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 768,
											"end": 797,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 832,
											"end": 837,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 707,
											"end": 844,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 707,
											"end": 844,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 707,
											"end": 844,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 707,
											"end": 844,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 707,
											"end": 844,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 850,
											"end": 991,
											"name": "tag",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 850,
											"end": 991,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 906,
											"end": 911,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 937,
											"end": 943,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 931,
											"end": 944,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 922,
											"end": 944,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 922,
											"end": 944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 953,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 979,
											"end": 984,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 953,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 953,
											"end": 985,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 953,
											"end": 985,
											"name": "tag",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 953,
											"end": 985,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 850,
											"end": 991,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 850,
											"end": 991,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 850,
											"end": 991,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 850,
											"end": 991,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 850,
											"end": 991,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1010,
											"end": 1348,
											"name": "tag",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 1010,
											"end": 1348,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1065,
											"end": 1070,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1117,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1107,
											"end": 1111,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1099,
											"end": 1105,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1095,
											"end": 1112,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1091,
											"end": 1118,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1081,
											"end": 1203,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 1081,
											"end": 1203,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1122,
											"end": 1201,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 1122,
											"end": 1201,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 1122,
											"end": 1201,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1122,
											"end": 1201,
											"name": "tag",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 1122,
											"end": 1201,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1081,
											"end": 1203,
											"name": "tag",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 1081,
											"end": 1203,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1239,
											"end": 1245,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1226,
											"end": 1246,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1264,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 1338,
											"end": 1341,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1330,
											"end": 1336,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1323,
											"end": 1327,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1321,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1311,
											"end": 1328,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1264,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 1264,
											"end": 1342,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1264,
											"end": 1342,
											"name": "tag",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 1264,
											"end": 1342,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 1342,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 1342,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1071,
											"end": 1348,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1010,
											"end": 1348,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1010,
											"end": 1348,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1010,
											"end": 1348,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1010,
											"end": 1348,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1010,
											"end": 1348,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1354,
											"end": 1493,
											"name": "tag",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 1354,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1400,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1438,
											"end": 1444,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1425,
											"end": 1445,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1416,
											"end": 1445,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1416,
											"end": 1445,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1454,
											"end": 1487,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 1481,
											"end": 1486,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1454,
											"end": 1487,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 1454,
											"end": 1487,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1454,
											"end": 1487,
											"name": "tag",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 1454,
											"end": 1487,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1354,
											"end": 1493,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1354,
											"end": 1493,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1354,
											"end": 1493,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1354,
											"end": 1493,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1354,
											"end": 1493,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1499,
											"end": 1828,
											"name": "tag",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 1499,
											"end": 1828,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1558,
											"end": 1564,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1607,
											"end": 1609,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1595,
											"end": 1604,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1586,
											"end": 1593,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1582,
											"end": 1605,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1578,
											"end": 1610,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1575,
											"end": 1694,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1575,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 1575,
											"end": 1694,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1613,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "297"
										},
										{
											"begin": 1613,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 1613,
											"end": 1692,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1613,
											"end": 1692,
											"name": "tag",
											"source": 10,
											"value": "297"
										},
										{
											"begin": 1613,
											"end": 1692,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1575,
											"end": 1694,
											"name": "tag",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 1575,
											"end": 1694,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1733,
											"end": 1734,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 1803,
											"end": 1810,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1794,
											"end": 1800,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1783,
											"end": 1792,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1801,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "tag",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1748,
											"end": 1811,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1748,
											"end": 1811,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1704,
											"end": 1821,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1499,
											"end": 1828,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1499,
											"end": 1828,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1499,
											"end": 1828,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1499,
											"end": 1828,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1499,
											"end": 1828,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1834,
											"end": 2308,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 1834,
											"end": 2308,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1908,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1910,
											"end": 1916,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1959,
											"end": 1961,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1947,
											"end": 1956,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1938,
											"end": 1945,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1934,
											"end": 1957,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1930,
											"end": 1962,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1927,
											"end": 2046,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1927,
											"end": 2046,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "301"
										},
										{
											"begin": 1927,
											"end": 2046,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1965,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 1965,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 1965,
											"end": 2044,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1965,
											"end": 2044,
											"name": "tag",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 1965,
											"end": 2044,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1927,
											"end": 2046,
											"name": "tag",
											"source": 10,
											"value": "301"
										},
										{
											"begin": 1927,
											"end": 2046,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2085,
											"end": 2086,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2110,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 2155,
											"end": 2162,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2146,
											"end": 2152,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2135,
											"end": 2144,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2131,
											"end": 2153,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2110,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 2110,
											"end": 2163,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2110,
											"end": 2163,
											"name": "tag",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 2110,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2100,
											"end": 2163,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2100,
											"end": 2163,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2056,
											"end": 2173,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2212,
											"end": 2214,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2238,
											"end": 2291,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "304"
										},
										{
											"begin": 2283,
											"end": 2290,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2274,
											"end": 2280,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2263,
											"end": 2272,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2259,
											"end": 2281,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2238,
											"end": 2291,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 2238,
											"end": 2291,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2238,
											"end": 2291,
											"name": "tag",
											"source": 10,
											"value": "304"
										},
										{
											"begin": 2238,
											"end": 2291,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2228,
											"end": 2291,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2228,
											"end": 2291,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2183,
											"end": 2301,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1834,
											"end": 2308,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1834,
											"end": 2308,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1834,
											"end": 2308,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1834,
											"end": 2308,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1834,
											"end": 2308,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1834,
											"end": 2308,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2314,
											"end": 2933,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2314,
											"end": 2933,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2391,
											"end": 2397,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2399,
											"end": 2405,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2407,
											"end": 2413,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2456,
											"end": 2458,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2444,
											"end": 2453,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2435,
											"end": 2442,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2431,
											"end": 2454,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2427,
											"end": 2459,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2424,
											"end": 2543,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2424,
											"end": 2543,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "306"
										},
										{
											"begin": 2424,
											"end": 2543,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2462,
											"end": 2541,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "307"
										},
										{
											"begin": 2462,
											"end": 2541,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 2462,
											"end": 2541,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2462,
											"end": 2541,
											"name": "tag",
											"source": 10,
											"value": "307"
										},
										{
											"begin": 2462,
											"end": 2541,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2424,
											"end": 2543,
											"name": "tag",
											"source": 10,
											"value": "306"
										},
										{
											"begin": 2424,
											"end": 2543,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2582,
											"end": 2583,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2607,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 2652,
											"end": 2659,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2643,
											"end": 2649,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 2641,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2607,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 2607,
											"end": 2660,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2607,
											"end": 2660,
											"name": "tag",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 2607,
											"end": 2660,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2597,
											"end": 2660,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2597,
											"end": 2660,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2553,
											"end": 2670,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2709,
											"end": 2711,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2735,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "309"
										},
										{
											"begin": 2780,
											"end": 2787,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2771,
											"end": 2777,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2760,
											"end": 2769,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2756,
											"end": 2778,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2735,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 2735,
											"end": 2788,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2735,
											"end": 2788,
											"name": "tag",
											"source": 10,
											"value": "309"
										},
										{
											"begin": 2735,
											"end": 2788,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2680,
											"end": 2798,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2837,
											"end": 2839,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 2908,
											"end": 2915,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2899,
											"end": 2905,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2888,
											"end": 2897,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2884,
											"end": 2906,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "tag",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2853,
											"end": 2916,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2853,
											"end": 2916,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2808,
											"end": 2926,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2314,
											"end": 2933,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2314,
											"end": 2933,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2314,
											"end": 2933,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2314,
											"end": 2933,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2314,
											"end": 2933,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2314,
											"end": 2933,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3034,
											"end": 3040,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3042,
											"end": 3048,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3050,
											"end": 3056,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3058,
											"end": 3064,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3107,
											"end": 3110,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3095,
											"end": 3104,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3086,
											"end": 3093,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3082,
											"end": 3105,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3078,
											"end": 3111,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3075,
											"end": 3195,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3075,
											"end": 3195,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 3075,
											"end": 3195,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3114,
											"end": 3193,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "313"
										},
										{
											"begin": 3114,
											"end": 3193,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 3114,
											"end": 3193,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3114,
											"end": 3193,
											"name": "tag",
											"source": 10,
											"value": "313"
										},
										{
											"begin": 3114,
											"end": 3193,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3075,
											"end": 3195,
											"name": "tag",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 3075,
											"end": 3195,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3234,
											"end": 3235,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3259,
											"end": 3312,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 3304,
											"end": 3311,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3295,
											"end": 3301,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3284,
											"end": 3293,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3280,
											"end": 3302,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3259,
											"end": 3312,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 3259,
											"end": 3312,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3259,
											"end": 3312,
											"name": "tag",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 3259,
											"end": 3312,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3249,
											"end": 3312,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3249,
											"end": 3312,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3205,
											"end": 3322,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3361,
											"end": 3363,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3387,
											"end": 3440,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 3432,
											"end": 3439,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3423,
											"end": 3429,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3412,
											"end": 3421,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3408,
											"end": 3430,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3387,
											"end": 3440,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 3387,
											"end": 3440,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3387,
											"end": 3440,
											"name": "tag",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 3387,
											"end": 3440,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3377,
											"end": 3440,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3377,
											"end": 3440,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3332,
											"end": 3450,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3489,
											"end": 3491,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3515,
											"end": 3568,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 3560,
											"end": 3567,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3551,
											"end": 3557,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3540,
											"end": 3549,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3536,
											"end": 3558,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3515,
											"end": 3568,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 3515,
											"end": 3568,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3515,
											"end": 3568,
											"name": "tag",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 3515,
											"end": 3568,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3505,
											"end": 3568,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3505,
											"end": 3568,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3460,
											"end": 3578,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3645,
											"end": 3647,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3634,
											"end": 3643,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3630,
											"end": 3648,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3617,
											"end": 3649,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3676,
											"end": 3694,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3668,
											"end": 3674,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3665,
											"end": 3695,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3662,
											"end": 3779,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3662,
											"end": 3779,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 3662,
											"end": 3779,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3698,
											"end": 3777,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 3698,
											"end": 3777,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 3698,
											"end": 3777,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3698,
											"end": 3777,
											"name": "tag",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 3698,
											"end": 3777,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3662,
											"end": 3779,
											"name": "tag",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 3662,
											"end": 3779,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 3865,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 3857,
											"end": 3864,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3848,
											"end": 3854,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3837,
											"end": 3846,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3833,
											"end": 3855,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 3865,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 3803,
											"end": 3865,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3803,
											"end": 3865,
											"name": "tag",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 3803,
											"end": 3865,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3865,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3865,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3588,
											"end": 3875,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2939,
											"end": 3882,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3888,
											"end": 4356,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3888,
											"end": 4356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3953,
											"end": 3959,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3961,
											"end": 3967,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4010,
											"end": 4012,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3998,
											"end": 4007,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3989,
											"end": 3996,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3985,
											"end": 4008,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3981,
											"end": 4013,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3978,
											"end": 4097,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3978,
											"end": 4097,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 3978,
											"end": 4097,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4016,
											"end": 4095,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 4016,
											"end": 4095,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 4016,
											"end": 4095,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4016,
											"end": 4095,
											"name": "tag",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 4016,
											"end": 4095,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3978,
											"end": 4097,
											"name": "tag",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 3978,
											"end": 4097,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4136,
											"end": 4137,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 4206,
											"end": 4213,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4197,
											"end": 4203,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4186,
											"end": 4195,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4182,
											"end": 4204,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "tag",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4151,
											"end": 4214,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4151,
											"end": 4214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4107,
											"end": 4224,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4263,
											"end": 4265,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4289,
											"end": 4339,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 4331,
											"end": 4338,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4322,
											"end": 4328,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4311,
											"end": 4320,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4307,
											"end": 4329,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4289,
											"end": 4339,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 4289,
											"end": 4339,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4289,
											"end": 4339,
											"name": "tag",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 4289,
											"end": 4339,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4279,
											"end": 4339,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4279,
											"end": 4339,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4234,
											"end": 4349,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3888,
											"end": 4356,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3888,
											"end": 4356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3888,
											"end": 4356,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3888,
											"end": 4356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3888,
											"end": 4356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3888,
											"end": 4356,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4362,
											"end": 4836,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 4362,
											"end": 4836,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4430,
											"end": 4436,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4438,
											"end": 4444,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4487,
											"end": 4489,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4475,
											"end": 4484,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4466,
											"end": 4473,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4485,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4458,
											"end": 4490,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 4455,
											"end": 4574,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4455,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 4455,
											"end": 4574,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4493,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 4493,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 4493,
											"end": 4572,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4493,
											"end": 4572,
											"name": "tag",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 4493,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4455,
											"end": 4574,
											"name": "tag",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 4455,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4613,
											"end": 4614,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4638,
											"end": 4691,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "329"
										},
										{
											"begin": 4683,
											"end": 4690,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4674,
											"end": 4680,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4663,
											"end": 4672,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4659,
											"end": 4681,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4638,
											"end": 4691,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 4638,
											"end": 4691,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4638,
											"end": 4691,
											"name": "tag",
											"source": 10,
											"value": "329"
										},
										{
											"begin": 4638,
											"end": 4691,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4628,
											"end": 4691,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4628,
											"end": 4691,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4584,
											"end": 4701,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4740,
											"end": 4742,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4766,
											"end": 4819,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 4811,
											"end": 4818,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4802,
											"end": 4808,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4791,
											"end": 4800,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4787,
											"end": 4809,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4766,
											"end": 4819,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 4766,
											"end": 4819,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4766,
											"end": 4819,
											"name": "tag",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 4766,
											"end": 4819,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4756,
											"end": 4819,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4756,
											"end": 4819,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4711,
											"end": 4829,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4362,
											"end": 4836,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4362,
											"end": 4836,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4362,
											"end": 4836,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4362,
											"end": 4836,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4362,
											"end": 4836,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4362,
											"end": 4836,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4842,
											"end": 5169,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4842,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4900,
											"end": 4906,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4949,
											"end": 4951,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4937,
											"end": 4946,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4928,
											"end": 4935,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4924,
											"end": 4947,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4920,
											"end": 4952,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 4917,
											"end": 5036,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4917,
											"end": 5036,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 4917,
											"end": 5036,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4955,
											"end": 5034,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 4955,
											"end": 5034,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 4955,
											"end": 5034,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4955,
											"end": 5034,
											"name": "tag",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 4955,
											"end": 5034,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4917,
											"end": 5036,
											"name": "tag",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 4917,
											"end": 5036,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5075,
											"end": 5076,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 5144,
											"end": 5151,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5135,
											"end": 5141,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5124,
											"end": 5133,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5120,
											"end": 5142,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "tag",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5090,
											"end": 5152,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5090,
											"end": 5152,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5046,
											"end": 5162,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4842,
											"end": 5169,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4842,
											"end": 5169,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4842,
											"end": 5169,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4842,
											"end": 5169,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4842,
											"end": 5169,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5175,
											"end": 5524,
											"name": "tag",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 5175,
											"end": 5524,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5244,
											"end": 5250,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5293,
											"end": 5295,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5281,
											"end": 5290,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5272,
											"end": 5279,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5268,
											"end": 5291,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5264,
											"end": 5296,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 5261,
											"end": 5380,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5261,
											"end": 5380,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "336"
										},
										{
											"begin": 5261,
											"end": 5380,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5299,
											"end": 5378,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 5299,
											"end": 5378,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 5299,
											"end": 5378,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5299,
											"end": 5378,
											"name": "tag",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 5299,
											"end": 5378,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5261,
											"end": 5380,
											"name": "tag",
											"source": 10,
											"value": "336"
										},
										{
											"begin": 5261,
											"end": 5380,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5419,
											"end": 5420,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5444,
											"end": 5507,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "338"
										},
										{
											"begin": 5499,
											"end": 5506,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5496,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5479,
											"end": 5488,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5475,
											"end": 5497,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5444,
											"end": 5507,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 5444,
											"end": 5507,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5444,
											"end": 5507,
											"name": "tag",
											"source": 10,
											"value": "338"
										},
										{
											"begin": 5444,
											"end": 5507,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5434,
											"end": 5507,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5434,
											"end": 5507,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5390,
											"end": 5517,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5175,
											"end": 5524,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5175,
											"end": 5524,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5175,
											"end": 5524,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5175,
											"end": 5524,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5175,
											"end": 5524,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5530,
											"end": 5859,
											"name": "tag",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 5530,
											"end": 5859,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5589,
											"end": 5595,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5638,
											"end": 5640,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5626,
											"end": 5635,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5617,
											"end": 5624,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5613,
											"end": 5636,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5609,
											"end": 5641,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 5606,
											"end": 5725,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5606,
											"end": 5725,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 5606,
											"end": 5725,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5644,
											"end": 5723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 5644,
											"end": 5723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 5644,
											"end": 5723,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5644,
											"end": 5723,
											"name": "tag",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 5644,
											"end": 5723,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5606,
											"end": 5725,
											"name": "tag",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 5606,
											"end": 5725,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5764,
											"end": 5765,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5789,
											"end": 5842,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "342"
										},
										{
											"begin": 5834,
											"end": 5841,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5825,
											"end": 5831,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5814,
											"end": 5823,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5810,
											"end": 5832,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5789,
											"end": 5842,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 5789,
											"end": 5842,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5789,
											"end": 5842,
											"name": "tag",
											"source": 10,
											"value": "342"
										},
										{
											"begin": 5789,
											"end": 5842,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5779,
											"end": 5842,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5779,
											"end": 5842,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5735,
											"end": 5852,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5530,
											"end": 5859,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5530,
											"end": 5859,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5530,
											"end": 5859,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5530,
											"end": 5859,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5530,
											"end": 5859,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5865,
											"end": 5983,
											"name": "tag",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 5865,
											"end": 5983,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5952,
											"end": 5976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 5970,
											"end": 5975,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5952,
											"end": 5976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 5952,
											"end": 5976,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5952,
											"end": 5976,
											"name": "tag",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 5952,
											"end": 5976,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5947,
											"end": 5950,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5940,
											"end": 5977,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5865,
											"end": 5983,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5865,
											"end": 5983,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5865,
											"end": 5983,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5989,
											"end": 6098,
											"name": "tag",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 5989,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6070,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 6085,
											"end": 6090,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6070,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 6070,
											"end": 6091,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6070,
											"end": 6091,
											"name": "tag",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 6070,
											"end": 6091,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6065,
											"end": 6068,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6058,
											"end": 6092,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5989,
											"end": 6098,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5989,
											"end": 6098,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5989,
											"end": 6098,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6104,
											"end": 6464,
											"name": "tag",
											"source": 10,
											"value": "351"
										},
										{
											"begin": 6104,
											"end": 6464,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6190,
											"end": 6193,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6218,
											"end": 6256,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 6250,
											"end": 6255,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6218,
											"end": 6256,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "354"
										},
										{
											"begin": 6218,
											"end": 6256,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6218,
											"end": 6256,
											"name": "tag",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 6218,
											"end": 6256,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6342,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 6335,
											"end": 6341,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6330,
											"end": 6333,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6342,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "356"
										},
										{
											"begin": 6272,
											"end": 6342,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6272,
											"end": 6342,
											"name": "tag",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 6272,
											"end": 6342,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6265,
											"end": 6342,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6265,
											"end": 6342,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6351,
											"end": 6403,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 6396,
											"end": 6402,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6391,
											"end": 6394,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6384,
											"end": 6388,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6377,
											"end": 6382,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 6373,
											"end": 6389,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6351,
											"end": 6403,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 6351,
											"end": 6403,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6351,
											"end": 6403,
											"name": "tag",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 6351,
											"end": 6403,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6428,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 6450,
											"end": 6456,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6428,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 6428,
											"end": 6457,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6428,
											"end": 6457,
											"name": "tag",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 6428,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6423,
											"end": 6426,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6419,
											"end": 6458,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6412,
											"end": 6458,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6412,
											"end": 6458,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6194,
											"end": 6464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6104,
											"end": 6464,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6104,
											"end": 6464,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6104,
											"end": 6464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6104,
											"end": 6464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6104,
											"end": 6464,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6470,
											"end": 6834,
											"name": "tag",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 6470,
											"end": 6834,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6558,
											"end": 6561,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6586,
											"end": 6625,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "363"
										},
										{
											"begin": 6619,
											"end": 6624,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6586,
											"end": 6625,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 6586,
											"end": 6625,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6586,
											"end": 6625,
											"name": "tag",
											"source": 10,
											"value": "363"
										},
										{
											"begin": 6586,
											"end": 6625,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6641,
											"end": 6712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 6705,
											"end": 6711,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6700,
											"end": 6703,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6641,
											"end": 6712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 6641,
											"end": 6712,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6641,
											"end": 6712,
											"name": "tag",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 6641,
											"end": 6712,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6634,
											"end": 6712,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6634,
											"end": 6712,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6721,
											"end": 6773,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 6766,
											"end": 6772,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6761,
											"end": 6764,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6754,
											"end": 6758,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6747,
											"end": 6752,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 6743,
											"end": 6759,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6721,
											"end": 6773,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 6721,
											"end": 6773,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6721,
											"end": 6773,
											"name": "tag",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 6721,
											"end": 6773,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6798,
											"end": 6827,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 6820,
											"end": 6826,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6798,
											"end": 6827,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 6798,
											"end": 6827,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6798,
											"end": 6827,
											"name": "tag",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 6798,
											"end": 6827,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6793,
											"end": 6796,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6789,
											"end": 6828,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6782,
											"end": 6828,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6782,
											"end": 6828,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6562,
											"end": 6834,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6470,
											"end": 6834,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6470,
											"end": 6834,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6470,
											"end": 6834,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6470,
											"end": 6834,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6470,
											"end": 6834,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6840,
											"end": 7217,
											"name": "tag",
											"source": 10,
											"value": "369"
										},
										{
											"begin": 6840,
											"end": 7217,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6946,
											"end": 6949,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6974,
											"end": 7013,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 7007,
											"end": 7012,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6974,
											"end": 7013,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 6974,
											"end": 7013,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6974,
											"end": 7013,
											"name": "tag",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 6974,
											"end": 7013,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7029,
											"end": 7118,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "372"
										},
										{
											"begin": 7111,
											"end": 7117,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7106,
											"end": 7109,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7029,
											"end": 7118,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 7029,
											"end": 7118,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7029,
											"end": 7118,
											"name": "tag",
											"source": 10,
											"value": "372"
										},
										{
											"begin": 7029,
											"end": 7118,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7022,
											"end": 7118,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7022,
											"end": 7118,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7127,
											"end": 7179,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "374"
										},
										{
											"begin": 7172,
											"end": 7178,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7167,
											"end": 7170,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7160,
											"end": 7164,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7153,
											"end": 7158,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 7149,
											"end": 7165,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7127,
											"end": 7179,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 7127,
											"end": 7179,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7127,
											"end": 7179,
											"name": "tag",
											"source": 10,
											"value": "374"
										},
										{
											"begin": 7127,
											"end": 7179,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7204,
											"end": 7210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7199,
											"end": 7202,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7195,
											"end": 7211,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7188,
											"end": 7211,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7188,
											"end": 7211,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6950,
											"end": 7217,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6840,
											"end": 7217,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6840,
											"end": 7217,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6840,
											"end": 7217,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6840,
											"end": 7217,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6840,
											"end": 7217,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7223,
											"end": 7589,
											"name": "tag",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 7223,
											"end": 7589,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7365,
											"end": 7368,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7386,
											"end": 7453,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 7450,
											"end": 7452,
											"name": "PUSH",
											"source": 10,
											"value": "2D"
										},
										{
											"begin": 7445,
											"end": 7448,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7386,
											"end": 7453,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 7386,
											"end": 7453,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7386,
											"end": 7453,
											"name": "tag",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 7386,
											"end": 7453,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7379,
											"end": 7453,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7379,
											"end": 7453,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7462,
											"end": 7555,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "378"
										},
										{
											"begin": 7551,
											"end": 7554,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7462,
											"end": 7555,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "379"
										},
										{
											"begin": 7462,
											"end": 7555,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7462,
											"end": 7555,
											"name": "tag",
											"source": 10,
											"value": "378"
										},
										{
											"begin": 7462,
											"end": 7555,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7580,
											"end": 7582,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7575,
											"end": 7578,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7571,
											"end": 7583,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7564,
											"end": 7583,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7564,
											"end": 7583,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7223,
											"end": 7589,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7223,
											"end": 7589,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7223,
											"end": 7589,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7223,
											"end": 7589,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7595,
											"end": 7961,
											"name": "tag",
											"source": 10,
											"value": "380"
										},
										{
											"begin": 7595,
											"end": 7961,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7737,
											"end": 7740,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7758,
											"end": 7825,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "382"
										},
										{
											"begin": 7822,
											"end": 7824,
											"name": "PUSH",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 7817,
											"end": 7820,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7758,
											"end": 7825,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 7758,
											"end": 7825,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7758,
											"end": 7825,
											"name": "tag",
											"source": 10,
											"value": "382"
										},
										{
											"begin": 7758,
											"end": 7825,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7751,
											"end": 7825,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7751,
											"end": 7825,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7834,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "383"
										},
										{
											"begin": 7923,
											"end": 7926,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7834,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "384"
										},
										{
											"begin": 7834,
											"end": 7927,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7834,
											"end": 7927,
											"name": "tag",
											"source": 10,
											"value": "383"
										},
										{
											"begin": 7834,
											"end": 7927,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7952,
											"end": 7954,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7947,
											"end": 7950,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7943,
											"end": 7955,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7936,
											"end": 7955,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7936,
											"end": 7955,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7595,
											"end": 7961,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7595,
											"end": 7961,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7595,
											"end": 7961,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7595,
											"end": 7961,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7967,
											"end": 8333,
											"name": "tag",
											"source": 10,
											"value": "385"
										},
										{
											"begin": 7967,
											"end": 8333,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8109,
											"end": 8112,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8130,
											"end": 8197,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "387"
										},
										{
											"begin": 8194,
											"end": 8196,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 8189,
											"end": 8192,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8130,
											"end": 8197,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 8130,
											"end": 8197,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8130,
											"end": 8197,
											"name": "tag",
											"source": 10,
											"value": "387"
										},
										{
											"begin": 8130,
											"end": 8197,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8123,
											"end": 8197,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8123,
											"end": 8197,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8206,
											"end": 8299,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "388"
										},
										{
											"begin": 8295,
											"end": 8298,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8206,
											"end": 8299,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "389"
										},
										{
											"begin": 8206,
											"end": 8299,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8206,
											"end": 8299,
											"name": "tag",
											"source": 10,
											"value": "388"
										},
										{
											"begin": 8206,
											"end": 8299,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8324,
											"end": 8326,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8319,
											"end": 8322,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8315,
											"end": 8327,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8308,
											"end": 8327,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8308,
											"end": 8327,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7967,
											"end": 8333,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7967,
											"end": 8333,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7967,
											"end": 8333,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7967,
											"end": 8333,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8339,
											"end": 8705,
											"name": "tag",
											"source": 10,
											"value": "390"
										},
										{
											"begin": 8339,
											"end": 8705,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8481,
											"end": 8484,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8502,
											"end": 8569,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "392"
										},
										{
											"begin": 8566,
											"end": 8568,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8561,
											"end": 8564,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8502,
											"end": 8569,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 8502,
											"end": 8569,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8502,
											"end": 8569,
											"name": "tag",
											"source": 10,
											"value": "392"
										},
										{
											"begin": 8502,
											"end": 8569,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8495,
											"end": 8569,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8495,
											"end": 8569,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8578,
											"end": 8671,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "393"
										},
										{
											"begin": 8667,
											"end": 8670,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8578,
											"end": 8671,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "394"
										},
										{
											"begin": 8578,
											"end": 8671,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8578,
											"end": 8671,
											"name": "tag",
											"source": 10,
											"value": "393"
										},
										{
											"begin": 8578,
											"end": 8671,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8696,
											"end": 8698,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8691,
											"end": 8694,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8687,
											"end": 8699,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8680,
											"end": 8699,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8680,
											"end": 8699,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8339,
											"end": 8705,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8339,
											"end": 8705,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8339,
											"end": 8705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8339,
											"end": 8705,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8711,
											"end": 9077,
											"name": "tag",
											"source": 10,
											"value": "395"
										},
										{
											"begin": 8711,
											"end": 9077,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8853,
											"end": 8856,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8874,
											"end": 8941,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "397"
										},
										{
											"begin": 8938,
											"end": 8940,
											"name": "PUSH",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 8933,
											"end": 8936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8874,
											"end": 8941,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 8874,
											"end": 8941,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8874,
											"end": 8941,
											"name": "tag",
											"source": 10,
											"value": "397"
										},
										{
											"begin": 8874,
											"end": 8941,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8867,
											"end": 8941,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8867,
											"end": 8941,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8950,
											"end": 9043,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "398"
										},
										{
											"begin": 9039,
											"end": 9042,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8950,
											"end": 9043,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 8950,
											"end": 9043,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8950,
											"end": 9043,
											"name": "tag",
											"source": 10,
											"value": "398"
										},
										{
											"begin": 8950,
											"end": 9043,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9068,
											"end": 9070,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9063,
											"end": 9066,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9059,
											"end": 9071,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9052,
											"end": 9071,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9052,
											"end": 9071,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8711,
											"end": 9077,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8711,
											"end": 9077,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8711,
											"end": 9077,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8711,
											"end": 9077,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9083,
											"end": 9449,
											"name": "tag",
											"source": 10,
											"value": "400"
										},
										{
											"begin": 9083,
											"end": 9449,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9228,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9246,
											"end": 9313,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "402"
										},
										{
											"begin": 9310,
											"end": 9312,
											"name": "PUSH",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 9305,
											"end": 9308,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9246,
											"end": 9313,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 9246,
											"end": 9313,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9246,
											"end": 9313,
											"name": "tag",
											"source": 10,
											"value": "402"
										},
										{
											"begin": 9246,
											"end": 9313,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9239,
											"end": 9313,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9239,
											"end": 9313,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9415,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 9411,
											"end": 9414,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9415,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "404"
										},
										{
											"begin": 9322,
											"end": 9415,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9322,
											"end": 9415,
											"name": "tag",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 9322,
											"end": 9415,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9440,
											"end": 9442,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9435,
											"end": 9438,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9431,
											"end": 9443,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9424,
											"end": 9443,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9424,
											"end": 9443,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9083,
											"end": 9449,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9083,
											"end": 9449,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9083,
											"end": 9449,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9083,
											"end": 9449,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9455,
											"end": 9821,
											"name": "tag",
											"source": 10,
											"value": "405"
										},
										{
											"begin": 9455,
											"end": 9821,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9597,
											"end": 9600,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9618,
											"end": 9685,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "407"
										},
										{
											"begin": 9682,
											"end": 9684,
											"name": "PUSH",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 9677,
											"end": 9680,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9618,
											"end": 9685,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 9618,
											"end": 9685,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9618,
											"end": 9685,
											"name": "tag",
											"source": 10,
											"value": "407"
										},
										{
											"begin": 9618,
											"end": 9685,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9611,
											"end": 9685,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9611,
											"end": 9685,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9694,
											"end": 9787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "408"
										},
										{
											"begin": 9783,
											"end": 9786,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9694,
											"end": 9787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 9694,
											"end": 9787,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9694,
											"end": 9787,
											"name": "tag",
											"source": 10,
											"value": "408"
										},
										{
											"begin": 9694,
											"end": 9787,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9812,
											"end": 9814,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9807,
											"end": 9810,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9803,
											"end": 9815,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9796,
											"end": 9815,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9796,
											"end": 9815,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9455,
											"end": 9821,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9455,
											"end": 9821,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9455,
											"end": 9821,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9455,
											"end": 9821,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9827,
											"end": 10193,
											"name": "tag",
											"source": 10,
											"value": "410"
										},
										{
											"begin": 9827,
											"end": 10193,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9969,
											"end": 9972,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9990,
											"end": 10057,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "412"
										},
										{
											"begin": 10054,
											"end": 10056,
											"name": "PUSH",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 10049,
											"end": 10052,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9990,
											"end": 10057,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 9990,
											"end": 10057,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9990,
											"end": 10057,
											"name": "tag",
											"source": 10,
											"value": "412"
										},
										{
											"begin": 9990,
											"end": 10057,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9983,
											"end": 10057,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9983,
											"end": 10057,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10066,
											"end": 10159,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "413"
										},
										{
											"begin": 10155,
											"end": 10158,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10066,
											"end": 10159,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "414"
										},
										{
											"begin": 10066,
											"end": 10159,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10066,
											"end": 10159,
											"name": "tag",
											"source": 10,
											"value": "413"
										},
										{
											"begin": 10066,
											"end": 10159,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10184,
											"end": 10186,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 10179,
											"end": 10182,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10187,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10168,
											"end": 10187,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10168,
											"end": 10187,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9827,
											"end": 10193,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9827,
											"end": 10193,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9827,
											"end": 10193,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9827,
											"end": 10193,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10199,
											"end": 10565,
											"name": "tag",
											"source": 10,
											"value": "415"
										},
										{
											"begin": 10199,
											"end": 10565,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10341,
											"end": 10344,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10362,
											"end": 10429,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "417"
										},
										{
											"begin": 10426,
											"end": 10428,
											"name": "PUSH",
											"source": 10,
											"value": "3D"
										},
										{
											"begin": 10421,
											"end": 10424,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10362,
											"end": 10429,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 10362,
											"end": 10429,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10362,
											"end": 10429,
											"name": "tag",
											"source": 10,
											"value": "417"
										},
										{
											"begin": 10362,
											"end": 10429,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10355,
											"end": 10429,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10355,
											"end": 10429,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10438,
											"end": 10531,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 10527,
											"end": 10530,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10438,
											"end": 10531,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "419"
										},
										{
											"begin": 10438,
											"end": 10531,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10438,
											"end": 10531,
											"name": "tag",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 10438,
											"end": 10531,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10556,
											"end": 10558,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 10551,
											"end": 10554,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10547,
											"end": 10559,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10540,
											"end": 10559,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10540,
											"end": 10559,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10199,
											"end": 10565,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10199,
											"end": 10565,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10199,
											"end": 10565,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10199,
											"end": 10565,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10571,
											"end": 10689,
											"name": "tag",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 10571,
											"end": 10689,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10658,
											"end": 10682,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "422"
										},
										{
											"begin": 10676,
											"end": 10681,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10658,
											"end": 10682,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "423"
										},
										{
											"begin": 10658,
											"end": 10682,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10658,
											"end": 10682,
											"name": "tag",
											"source": 10,
											"value": "422"
										},
										{
											"begin": 10658,
											"end": 10682,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10653,
											"end": 10656,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10646,
											"end": 10683,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10571,
											"end": 10689,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10571,
											"end": 10689,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10571,
											"end": 10689,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10695,
											"end": 11130,
											"name": "tag",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 10695,
											"end": 11130,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10875,
											"end": 10878,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10897,
											"end": 10992,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "425"
										},
										{
											"begin": 10988,
											"end": 10991,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10979,
											"end": 10985,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10897,
											"end": 10992,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "369"
										},
										{
											"begin": 10897,
											"end": 10992,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10897,
											"end": 10992,
											"name": "tag",
											"source": 10,
											"value": "425"
										},
										{
											"begin": 10897,
											"end": 10992,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10890,
											"end": 10992,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10890,
											"end": 10992,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11009,
											"end": 11104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "426"
										},
										{
											"begin": 11100,
											"end": 11103,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11091,
											"end": 11097,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11009,
											"end": 11104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "369"
										},
										{
											"begin": 11009,
											"end": 11104,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11009,
											"end": 11104,
											"name": "tag",
											"source": 10,
											"value": "426"
										},
										{
											"begin": 11009,
											"end": 11104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11002,
											"end": 11104,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11002,
											"end": 11104,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11121,
											"end": 11124,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11114,
											"end": 11124,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11114,
											"end": 11124,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10695,
											"end": 11130,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 10695,
											"end": 11130,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10695,
											"end": 11130,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10695,
											"end": 11130,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10695,
											"end": 11130,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10695,
											"end": 11130,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11136,
											"end": 11358,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 11136,
											"end": 11358,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11229,
											"end": 11233,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11267,
											"end": 11269,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11256,
											"end": 11265,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11252,
											"end": 11270,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11244,
											"end": 11270,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11244,
											"end": 11270,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11280,
											"end": 11351,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "428"
										},
										{
											"begin": 11348,
											"end": 11349,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11337,
											"end": 11346,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11333,
											"end": 11350,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11324,
											"end": 11330,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11280,
											"end": 11351,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 11280,
											"end": 11351,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11280,
											"end": 11351,
											"name": "tag",
											"source": 10,
											"value": "428"
										},
										{
											"begin": 11280,
											"end": 11351,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11136,
											"end": 11358,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11136,
											"end": 11358,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11136,
											"end": 11358,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11136,
											"end": 11358,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11136,
											"end": 11358,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "tag",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11559,
											"end": 11563,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11597,
											"end": 11600,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 11586,
											"end": 11595,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11582,
											"end": 11601,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11574,
											"end": 11601,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11574,
											"end": 11601,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11611,
											"end": 11682,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "430"
										},
										{
											"begin": 11679,
											"end": 11680,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11668,
											"end": 11677,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11664,
											"end": 11681,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11655,
											"end": 11661,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 11611,
											"end": 11682,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 11611,
											"end": 11682,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11611,
											"end": 11682,
											"name": "tag",
											"source": 10,
											"value": "430"
										},
										{
											"begin": 11611,
											"end": 11682,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11692,
											"end": 11764,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "431"
										},
										{
											"begin": 11760,
											"end": 11762,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11749,
											"end": 11758,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11745,
											"end": 11763,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11736,
											"end": 11742,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 11692,
											"end": 11764,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 11692,
											"end": 11764,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11692,
											"end": 11764,
											"name": "tag",
											"source": 10,
											"value": "431"
										},
										{
											"begin": 11692,
											"end": 11764,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11774,
											"end": 11846,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "432"
										},
										{
											"begin": 11842,
											"end": 11844,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 11831,
											"end": 11840,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11827,
											"end": 11845,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11818,
											"end": 11824,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 11774,
											"end": 11846,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 11774,
											"end": 11846,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11774,
											"end": 11846,
											"name": "tag",
											"source": 10,
											"value": "432"
										},
										{
											"begin": 11774,
											"end": 11846,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11893,
											"end": 11902,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11887,
											"end": 11891,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11883,
											"end": 11903,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 11878,
											"end": 11880,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 11867,
											"end": 11876,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11863,
											"end": 11881,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11856,
											"end": 11904,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11921,
											"end": 11997,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "433"
										},
										{
											"begin": 11992,
											"end": 11996,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11983,
											"end": 11989,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11921,
											"end": 11997,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "351"
										},
										{
											"begin": 11921,
											"end": 11997,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11921,
											"end": 11997,
											"name": "tag",
											"source": 10,
											"value": "433"
										},
										{
											"begin": 11921,
											"end": 11997,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11913,
											"end": 11997,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11913,
											"end": 11997,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11364,
											"end": 12004,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12010,
											"end": 12220,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 12010,
											"end": 12220,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12097,
											"end": 12101,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12135,
											"end": 12137,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12124,
											"end": 12133,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12120,
											"end": 12138,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12112,
											"end": 12138,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12112,
											"end": 12138,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12148,
											"end": 12213,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "435"
										},
										{
											"begin": 12210,
											"end": 12211,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12199,
											"end": 12208,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12195,
											"end": 12212,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12186,
											"end": 12192,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12148,
											"end": 12213,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 12148,
											"end": 12213,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12148,
											"end": 12213,
											"name": "tag",
											"source": 10,
											"value": "435"
										},
										{
											"begin": 12148,
											"end": 12213,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12010,
											"end": 12220,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 12010,
											"end": 12220,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12010,
											"end": 12220,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12010,
											"end": 12220,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12010,
											"end": 12220,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12226,
											"end": 12539,
											"name": "tag",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 12226,
											"end": 12539,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12339,
											"end": 12343,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12377,
											"end": 12379,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12366,
											"end": 12375,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12362,
											"end": 12380,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12354,
											"end": 12380,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12354,
											"end": 12380,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12426,
											"end": 12435,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12420,
											"end": 12424,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12416,
											"end": 12436,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 12412,
											"end": 12413,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12401,
											"end": 12410,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12397,
											"end": 12414,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12390,
											"end": 12437,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12454,
											"end": 12532,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "437"
										},
										{
											"begin": 12527,
											"end": 12531,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12518,
											"end": 12524,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12454,
											"end": 12532,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 12454,
											"end": 12532,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12454,
											"end": 12532,
											"name": "tag",
											"source": 10,
											"value": "437"
										},
										{
											"begin": 12454,
											"end": 12532,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12446,
											"end": 12532,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12446,
											"end": 12532,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12226,
											"end": 12539,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 12226,
											"end": 12539,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12226,
											"end": 12539,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12226,
											"end": 12539,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12226,
											"end": 12539,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12545,
											"end": 12964,
											"name": "tag",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 12545,
											"end": 12964,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12711,
											"end": 12715,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12749,
											"end": 12751,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12738,
											"end": 12747,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12734,
											"end": 12752,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12726,
											"end": 12752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12726,
											"end": 12752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12798,
											"end": 12807,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12792,
											"end": 12796,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12788,
											"end": 12808,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 12784,
											"end": 12785,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12773,
											"end": 12782,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12769,
											"end": 12786,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12762,
											"end": 12809,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12826,
											"end": 12957,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "439"
										},
										{
											"begin": 12952,
											"end": 12956,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12826,
											"end": 12957,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 12826,
											"end": 12957,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12826,
											"end": 12957,
											"name": "tag",
											"source": 10,
											"value": "439"
										},
										{
											"begin": 12826,
											"end": 12957,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12818,
											"end": 12957,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12818,
											"end": 12957,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12545,
											"end": 12964,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12545,
											"end": 12964,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12545,
											"end": 12964,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12545,
											"end": 12964,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12970,
											"end": 13389,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 12970,
											"end": 13389,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13136,
											"end": 13140,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13174,
											"end": 13176,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13163,
											"end": 13172,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13159,
											"end": 13177,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13151,
											"end": 13177,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13151,
											"end": 13177,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13223,
											"end": 13232,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13217,
											"end": 13221,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13213,
											"end": 13233,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 13209,
											"end": 13210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13198,
											"end": 13207,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13194,
											"end": 13211,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13187,
											"end": 13234,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13251,
											"end": 13382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "441"
										},
										{
											"begin": 13377,
											"end": 13381,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13251,
											"end": 13382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "380"
										},
										{
											"begin": 13251,
											"end": 13382,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13251,
											"end": 13382,
											"name": "tag",
											"source": 10,
											"value": "441"
										},
										{
											"begin": 13251,
											"end": 13382,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13243,
											"end": 13382,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13243,
											"end": 13382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12970,
											"end": 13389,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12970,
											"end": 13389,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12970,
											"end": 13389,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12970,
											"end": 13389,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 13395,
											"end": 13814,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 13395,
											"end": 13814,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13561,
											"end": 13565,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13599,
											"end": 13601,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13588,
											"end": 13597,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13584,
											"end": 13602,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13576,
											"end": 13602,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13576,
											"end": 13602,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13648,
											"end": 13657,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13642,
											"end": 13646,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13638,
											"end": 13658,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 13634,
											"end": 13635,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13623,
											"end": 13632,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13619,
											"end": 13636,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13612,
											"end": 13659,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13676,
											"end": 13807,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "443"
										},
										{
											"begin": 13802,
											"end": 13806,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13676,
											"end": 13807,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "385"
										},
										{
											"begin": 13676,
											"end": 13807,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13676,
											"end": 13807,
											"name": "tag",
											"source": 10,
											"value": "443"
										},
										{
											"begin": 13676,
											"end": 13807,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13668,
											"end": 13807,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13668,
											"end": 13807,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13395,
											"end": 13814,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13395,
											"end": 13814,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13395,
											"end": 13814,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13395,
											"end": 13814,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 13820,
											"end": 14239,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 13820,
											"end": 14239,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13986,
											"end": 13990,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14024,
											"end": 14026,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14013,
											"end": 14022,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14009,
											"end": 14027,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14001,
											"end": 14027,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14001,
											"end": 14027,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14073,
											"end": 14082,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14067,
											"end": 14071,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14063,
											"end": 14083,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 14059,
											"end": 14060,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14048,
											"end": 14057,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14044,
											"end": 14061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14037,
											"end": 14084,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14101,
											"end": 14232,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "445"
										},
										{
											"begin": 14227,
											"end": 14231,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14101,
											"end": 14232,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "390"
										},
										{
											"begin": 14101,
											"end": 14232,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14101,
											"end": 14232,
											"name": "tag",
											"source": 10,
											"value": "445"
										},
										{
											"begin": 14101,
											"end": 14232,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14093,
											"end": 14232,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14093,
											"end": 14232,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13820,
											"end": 14239,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13820,
											"end": 14239,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13820,
											"end": 14239,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13820,
											"end": 14239,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14245,
											"end": 14664,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 14245,
											"end": 14664,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14411,
											"end": 14415,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14449,
											"end": 14451,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14438,
											"end": 14447,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14434,
											"end": 14452,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14426,
											"end": 14452,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14426,
											"end": 14452,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14498,
											"end": 14507,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14492,
											"end": 14496,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14488,
											"end": 14508,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 14484,
											"end": 14485,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14473,
											"end": 14482,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14469,
											"end": 14486,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14462,
											"end": 14509,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14526,
											"end": 14657,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "447"
										},
										{
											"begin": 14652,
											"end": 14656,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14526,
											"end": 14657,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "395"
										},
										{
											"begin": 14526,
											"end": 14657,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14526,
											"end": 14657,
											"name": "tag",
											"source": 10,
											"value": "447"
										},
										{
											"begin": 14526,
											"end": 14657,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14518,
											"end": 14657,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14518,
											"end": 14657,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14245,
											"end": 14664,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14245,
											"end": 14664,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14245,
											"end": 14664,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14245,
											"end": 14664,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14670,
											"end": 15089,
											"name": "tag",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 14670,
											"end": 15089,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14836,
											"end": 14840,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14874,
											"end": 14876,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14863,
											"end": 14872,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14859,
											"end": 14877,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14851,
											"end": 14877,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14851,
											"end": 14877,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14923,
											"end": 14932,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14917,
											"end": 14921,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14913,
											"end": 14933,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 14909,
											"end": 14910,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14898,
											"end": 14907,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14894,
											"end": 14911,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14887,
											"end": 14934,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14951,
											"end": 15082,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "449"
										},
										{
											"begin": 15077,
											"end": 15081,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14951,
											"end": 15082,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "400"
										},
										{
											"begin": 14951,
											"end": 15082,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14951,
											"end": 15082,
											"name": "tag",
											"source": 10,
											"value": "449"
										},
										{
											"begin": 14951,
											"end": 15082,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14943,
											"end": 15082,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14943,
											"end": 15082,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14670,
											"end": 15089,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14670,
											"end": 15089,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14670,
											"end": 15089,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14670,
											"end": 15089,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15095,
											"end": 15514,
											"name": "tag",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 15095,
											"end": 15514,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15261,
											"end": 15265,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15299,
											"end": 15301,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 15288,
											"end": 15297,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15284,
											"end": 15302,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15276,
											"end": 15302,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15276,
											"end": 15302,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15348,
											"end": 15357,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15342,
											"end": 15346,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15338,
											"end": 15358,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 15334,
											"end": 15335,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15323,
											"end": 15332,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 15319,
											"end": 15336,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15312,
											"end": 15359,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15376,
											"end": 15507,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "451"
										},
										{
											"begin": 15502,
											"end": 15506,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15376,
											"end": 15507,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "405"
										},
										{
											"begin": 15376,
											"end": 15507,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15376,
											"end": 15507,
											"name": "tag",
											"source": 10,
											"value": "451"
										},
										{
											"begin": 15376,
											"end": 15507,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15368,
											"end": 15507,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15368,
											"end": 15507,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15095,
											"end": 15514,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15095,
											"end": 15514,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15095,
											"end": 15514,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15095,
											"end": 15514,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15520,
											"end": 15939,
											"name": "tag",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 15520,
											"end": 15939,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15686,
											"end": 15690,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15724,
											"end": 15726,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 15713,
											"end": 15722,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15709,
											"end": 15727,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15701,
											"end": 15727,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15701,
											"end": 15727,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15773,
											"end": 15782,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15767,
											"end": 15771,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15763,
											"end": 15783,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 15759,
											"end": 15760,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15748,
											"end": 15757,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 15744,
											"end": 15761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15737,
											"end": 15784,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15801,
											"end": 15932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "453"
										},
										{
											"begin": 15927,
											"end": 15931,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15801,
											"end": 15932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "410"
										},
										{
											"begin": 15801,
											"end": 15932,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15801,
											"end": 15932,
											"name": "tag",
											"source": 10,
											"value": "453"
										},
										{
											"begin": 15801,
											"end": 15932,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15793,
											"end": 15932,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15793,
											"end": 15932,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15520,
											"end": 15939,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15520,
											"end": 15939,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15520,
											"end": 15939,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15520,
											"end": 15939,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15945,
											"end": 16364,
											"name": "tag",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 15945,
											"end": 16364,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16111,
											"end": 16115,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16149,
											"end": 16151,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 16138,
											"end": 16147,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16134,
											"end": 16152,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16126,
											"end": 16152,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16126,
											"end": 16152,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16198,
											"end": 16207,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16192,
											"end": 16196,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16188,
											"end": 16208,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 16184,
											"end": 16185,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16173,
											"end": 16182,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 16169,
											"end": 16186,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16162,
											"end": 16209,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16226,
											"end": 16357,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "455"
										},
										{
											"begin": 16352,
											"end": 16356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 16226,
											"end": 16357,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "415"
										},
										{
											"begin": 16226,
											"end": 16357,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16226,
											"end": 16357,
											"name": "tag",
											"source": 10,
											"value": "455"
										},
										{
											"begin": 16226,
											"end": 16357,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16218,
											"end": 16357,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16218,
											"end": 16357,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15945,
											"end": 16364,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15945,
											"end": 16364,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15945,
											"end": 16364,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15945,
											"end": 16364,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 16370,
											"end": 16592,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 16370,
											"end": 16592,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16463,
											"end": 16467,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16501,
											"end": 16503,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 16490,
											"end": 16499,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16486,
											"end": 16504,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16478,
											"end": 16504,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16478,
											"end": 16504,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16514,
											"end": 16585,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "457"
										},
										{
											"begin": 16582,
											"end": 16583,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16571,
											"end": 16580,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 16567,
											"end": 16584,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16558,
											"end": 16564,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 16514,
											"end": 16585,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 16514,
											"end": 16585,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16514,
											"end": 16585,
											"name": "tag",
											"source": 10,
											"value": "457"
										},
										{
											"begin": 16514,
											"end": 16585,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16370,
											"end": 16592,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 16370,
											"end": 16592,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16370,
											"end": 16592,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16370,
											"end": 16592,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16370,
											"end": 16592,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 16598,
											"end": 16727,
											"name": "tag",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 16598,
											"end": 16727,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16632,
											"end": 16638,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16659,
											"end": 16679,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "459"
										},
										{
											"begin": 16659,
											"end": 16679,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "460"
										},
										{
											"begin": 16659,
											"end": 16679,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16659,
											"end": 16679,
											"name": "tag",
											"source": 10,
											"value": "459"
										},
										{
											"begin": 16659,
											"end": 16679,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16649,
											"end": 16679,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16649,
											"end": 16679,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16688,
											"end": 16721,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "461"
										},
										{
											"begin": 16716,
											"end": 16720,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16708,
											"end": 16714,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16688,
											"end": 16721,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "462"
										},
										{
											"begin": 16688,
											"end": 16721,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16688,
											"end": 16721,
											"name": "tag",
											"source": 10,
											"value": "461"
										},
										{
											"begin": 16688,
											"end": 16721,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16598,
											"end": 16727,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16598,
											"end": 16727,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16598,
											"end": 16727,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16598,
											"end": 16727,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 16733,
											"end": 16808,
											"name": "tag",
											"source": 10,
											"value": "460"
										},
										{
											"begin": 16733,
											"end": 16808,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16766,
											"end": 16772,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16799,
											"end": 16801,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 16793,
											"end": 16802,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 16783,
											"end": 16802,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16783,
											"end": 16802,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16733,
											"end": 16808,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16733,
											"end": 16808,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 16814,
											"end": 17121,
											"name": "tag",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 16814,
											"end": 17121,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16875,
											"end": 16879,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16965,
											"end": 16983,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16957,
											"end": 16963,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16954,
											"end": 16984,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 16951,
											"end": 17007,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 16951,
											"end": 17007,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "465"
										},
										{
											"begin": 16951,
											"end": 17007,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 16987,
											"end": 17005,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "466"
										},
										{
											"begin": 16987,
											"end": 17005,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 16987,
											"end": 17005,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16987,
											"end": 17005,
											"name": "tag",
											"source": 10,
											"value": "466"
										},
										{
											"begin": 16987,
											"end": 17005,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16951,
											"end": 17007,
											"name": "tag",
											"source": 10,
											"value": "465"
										},
										{
											"begin": 16951,
											"end": 17007,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17025,
											"end": 17054,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "467"
										},
										{
											"begin": 17047,
											"end": 17053,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17025,
											"end": 17054,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 17025,
											"end": 17054,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 17025,
											"end": 17054,
											"name": "tag",
											"source": 10,
											"value": "467"
										},
										{
											"begin": 17025,
											"end": 17054,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17017,
											"end": 17054,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17017,
											"end": 17054,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17109,
											"end": 17113,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 17103,
											"end": 17107,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 17099,
											"end": 17114,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17091,
											"end": 17114,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17091,
											"end": 17114,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16814,
											"end": 17121,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16814,
											"end": 17121,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16814,
											"end": 17121,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16814,
											"end": 17121,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17127,
											"end": 17225,
											"name": "tag",
											"source": 10,
											"value": "354"
										},
										{
											"begin": 17127,
											"end": 17225,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17178,
											"end": 17184,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17212,
											"end": 17217,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 17206,
											"end": 17218,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 17196,
											"end": 17218,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17196,
											"end": 17218,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17127,
											"end": 17225,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17127,
											"end": 17225,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17127,
											"end": 17225,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17127,
											"end": 17225,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17231,
											"end": 17330,
											"name": "tag",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 17231,
											"end": 17330,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17283,
											"end": 17289,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17317,
											"end": 17322,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 17311,
											"end": 17323,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 17301,
											"end": 17323,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17301,
											"end": 17323,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17231,
											"end": 17330,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17231,
											"end": 17330,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17231,
											"end": 17330,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17231,
											"end": 17330,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17336,
											"end": 17504,
											"name": "tag",
											"source": 10,
											"value": "356"
										},
										{
											"begin": 17336,
											"end": 17504,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17419,
											"end": 17430,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17453,
											"end": 17459,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17448,
											"end": 17451,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17441,
											"end": 17460,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17493,
											"end": 17497,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 17488,
											"end": 17491,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17484,
											"end": 17498,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17469,
											"end": 17498,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17469,
											"end": 17498,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17336,
											"end": 17504,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 17336,
											"end": 17504,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17336,
											"end": 17504,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17336,
											"end": 17504,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17336,
											"end": 17504,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17510,
											"end": 17679,
											"name": "tag",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 17510,
											"end": 17679,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17594,
											"end": 17605,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17628,
											"end": 17634,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17623,
											"end": 17626,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17616,
											"end": 17635,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17668,
											"end": 17672,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 17663,
											"end": 17666,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17659,
											"end": 17673,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17644,
											"end": 17673,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17644,
											"end": 17673,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17510,
											"end": 17679,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 17510,
											"end": 17679,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17510,
											"end": 17679,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17510,
											"end": 17679,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17510,
											"end": 17679,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17685,
											"end": 17833,
											"name": "tag",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 17685,
											"end": 17833,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17787,
											"end": 17798,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17824,
											"end": 17827,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 17809,
											"end": 17827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17809,
											"end": 17827,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17685,
											"end": 17833,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 17685,
											"end": 17833,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17685,
											"end": 17833,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17685,
											"end": 17833,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17685,
											"end": 17833,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17839,
											"end": 17935,
											"name": "tag",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 17839,
											"end": 17935,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17876,
											"end": 17883,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17905,
											"end": 17929,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "474"
										},
										{
											"begin": 17923,
											"end": 17928,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17905,
											"end": 17929,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "475"
										},
										{
											"begin": 17905,
											"end": 17929,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 17905,
											"end": 17929,
											"name": "tag",
											"source": 10,
											"value": "474"
										},
										{
											"begin": 17905,
											"end": 17929,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17894,
											"end": 17929,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17894,
											"end": 17929,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17839,
											"end": 17935,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17839,
											"end": 17935,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17839,
											"end": 17935,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17839,
											"end": 17935,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17941,
											"end": 18031,
											"name": "tag",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 17941,
											"end": 18031,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17975,
											"end": 17982,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18018,
											"end": 18023,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18011,
											"end": 18024,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 18004,
											"end": 18025,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 17993,
											"end": 18025,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17993,
											"end": 18025,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17941,
											"end": 18031,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17941,
											"end": 18031,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17941,
											"end": 18031,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17941,
											"end": 18031,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18037,
											"end": 18186,
											"name": "tag",
											"source": 10,
											"value": "477"
										},
										{
											"begin": 18037,
											"end": 18186,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18073,
											"end": 18080,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18113,
											"end": 18179,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 18106,
											"end": 18111,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18102,
											"end": 18180,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 18091,
											"end": 18180,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18091,
											"end": 18180,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18037,
											"end": 18186,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18037,
											"end": 18186,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18037,
											"end": 18186,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18037,
											"end": 18186,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18192,
											"end": 18318,
											"name": "tag",
											"source": 10,
											"value": "475"
										},
										{
											"begin": 18192,
											"end": 18318,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18229,
											"end": 18236,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18269,
											"end": 18311,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18262,
											"end": 18267,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18258,
											"end": 18312,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 18247,
											"end": 18312,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18247,
											"end": 18312,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18192,
											"end": 18318,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18192,
											"end": 18318,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18192,
											"end": 18318,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18192,
											"end": 18318,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18324,
											"end": 18401,
											"name": "tag",
											"source": 10,
											"value": "423"
										},
										{
											"begin": 18324,
											"end": 18401,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18361,
											"end": 18368,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18390,
											"end": 18395,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18379,
											"end": 18395,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18379,
											"end": 18395,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18324,
											"end": 18401,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18324,
											"end": 18401,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18324,
											"end": 18401,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18324,
											"end": 18401,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18407,
											"end": 18561,
											"name": "tag",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 18407,
											"end": 18561,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18491,
											"end": 18497,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18486,
											"end": 18489,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18481,
											"end": 18484,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 18468,
											"end": 18498,
											"name": "CALLDATACOPY",
											"source": 10
										},
										{
											"begin": 18553,
											"end": 18554,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18544,
											"end": 18550,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 18539,
											"end": 18542,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 18535,
											"end": 18551,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18528,
											"end": 18555,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 18407,
											"end": 18561,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18407,
											"end": 18561,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18407,
											"end": 18561,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18407,
											"end": 18561,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18567,
											"end": 18874,
											"name": "tag",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 18567,
											"end": 18874,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18635,
											"end": 18636,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "tag",
											"source": 10,
											"value": "483"
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18659,
											"end": 18665,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 18656,
											"end": 18657,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18653,
											"end": 18666,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "485"
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 18744,
											"end": 18745,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 18739,
											"end": 18742,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18735,
											"end": 18746,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18729,
											"end": 18747,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 18725,
											"end": 18726,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18720,
											"end": 18723,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 18716,
											"end": 18727,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18709,
											"end": 18748,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 18681,
											"end": 18683,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 18678,
											"end": 18679,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18674,
											"end": 18684,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18669,
											"end": 18684,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18669,
											"end": 18684,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "483"
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "tag",
											"source": 10,
											"value": "485"
										},
										{
											"begin": 18645,
											"end": 18758,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18776,
											"end": 18782,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 18773,
											"end": 18774,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18770,
											"end": 18783,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 18767,
											"end": 18868,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 18767,
											"end": 18868,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "486"
										},
										{
											"begin": 18767,
											"end": 18868,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 18856,
											"end": 18857,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18847,
											"end": 18853,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 18842,
											"end": 18845,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 18838,
											"end": 18854,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 18831,
											"end": 18858,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 18767,
											"end": 18868,
											"name": "tag",
											"source": 10,
											"value": "486"
										},
										{
											"begin": 18767,
											"end": 18868,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18616,
											"end": 18874,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18567,
											"end": 18874,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18567,
											"end": 18874,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18567,
											"end": 18874,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18567,
											"end": 18874,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18880,
											"end": 19200,
											"name": "tag",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 18880,
											"end": 19200,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18924,
											"end": 18930,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18961,
											"end": 18962,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 18955,
											"end": 18959,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18951,
											"end": 18963,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 18941,
											"end": 18963,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18941,
											"end": 18963,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 19008,
											"end": 19009,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 19002,
											"end": 19006,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18998,
											"end": 19010,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 19029,
											"end": 19047,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 19019,
											"end": 19100,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "488"
										},
										{
											"begin": 19019,
											"end": 19100,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 19085,
											"end": 19089,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 19077,
											"end": 19083,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 19073,
											"end": 19090,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 19063,
											"end": 19090,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 19063,
											"end": 19090,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 19019,
											"end": 19100,
											"name": "tag",
											"source": 10,
											"value": "488"
										},
										{
											"begin": 19019,
											"end": 19100,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19147,
											"end": 19149,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 19139,
											"end": 19145,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 19136,
											"end": 19150,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 19116,
											"end": 19134,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 19113,
											"end": 19151,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 19110,
											"end": 19194,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 19110,
											"end": 19194,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "489"
										},
										{
											"begin": 19110,
											"end": 19194,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 19166,
											"end": 19184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "490"
										},
										{
											"begin": 19166,
											"end": 19184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "491"
										},
										{
											"begin": 19166,
											"end": 19184,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 19166,
											"end": 19184,
											"name": "tag",
											"source": 10,
											"value": "490"
										},
										{
											"begin": 19166,
											"end": 19184,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19110,
											"end": 19194,
											"name": "tag",
											"source": 10,
											"value": "489"
										},
										{
											"begin": 19110,
											"end": 19194,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18931,
											"end": 19200,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18880,
											"end": 19200,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 18880,
											"end": 19200,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 18880,
											"end": 19200,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18880,
											"end": 19200,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 19206,
											"end": 19487,
											"name": "tag",
											"source": 10,
											"value": "462"
										},
										{
											"begin": 19206,
											"end": 19487,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19289,
											"end": 19316,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "493"
										},
										{
											"begin": 19311,
											"end": 19315,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 19289,
											"end": 19316,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 19289,
											"end": 19316,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 19289,
											"end": 19316,
											"name": "tag",
											"source": 10,
											"value": "493"
										},
										{
											"begin": 19289,
											"end": 19316,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19281,
											"end": 19287,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 19277,
											"end": 19317,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 19419,
											"end": 19425,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 19407,
											"end": 19417,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 19404,
											"end": 19426,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 19383,
											"end": 19401,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19371,
											"end": 19381,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 19368,
											"end": 19402,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 19365,
											"end": 19427,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 19362,
											"end": 19450,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 19362,
											"end": 19450,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "494"
										},
										{
											"begin": 19362,
											"end": 19450,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 19430,
											"end": 19448,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "495"
										},
										{
											"begin": 19430,
											"end": 19448,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 19430,
											"end": 19448,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 19430,
											"end": 19448,
											"name": "tag",
											"source": 10,
											"value": "495"
										},
										{
											"begin": 19430,
											"end": 19448,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19362,
											"end": 19450,
											"name": "tag",
											"source": 10,
											"value": "494"
										},
										{
											"begin": 19362,
											"end": 19450,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19470,
											"end": 19480,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 19466,
											"end": 19468,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 19459,
											"end": 19481,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 19249,
											"end": 19487,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 19206,
											"end": 19487,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 19206,
											"end": 19487,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 19206,
											"end": 19487,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 19493,
											"end": 19673,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 19493,
											"end": 19673,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19541,
											"end": 19618,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19538,
											"end": 19539,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 19531,
											"end": 19619,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 19638,
											"end": 19642,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 19635,
											"end": 19636,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 19628,
											"end": 19643,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 19662,
											"end": 19666,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 19659,
											"end": 19660,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 19652,
											"end": 19667,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 19679,
											"end": 19859,
											"name": "tag",
											"source": 10,
											"value": "491"
										},
										{
											"begin": 19679,
											"end": 19859,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19727,
											"end": 19804,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19724,
											"end": 19725,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 19717,
											"end": 19805,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 19824,
											"end": 19828,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 19821,
											"end": 19822,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 19814,
											"end": 19829,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 19848,
											"end": 19852,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 19845,
											"end": 19846,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 19838,
											"end": 19853,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 19865,
											"end": 20045,
											"name": "tag",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 19865,
											"end": 20045,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 19913,
											"end": 19990,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19910,
											"end": 19911,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 19903,
											"end": 19991,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 20010,
											"end": 20014,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 20007,
											"end": 20008,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 20000,
											"end": 20015,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 20034,
											"end": 20038,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 20031,
											"end": 20032,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 20024,
											"end": 20039,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 20051,
											"end": 20168,
											"name": "tag",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 20051,
											"end": 20168,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 20160,
											"end": 20161,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 20157,
											"end": 20158,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 20150,
											"end": 20162,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 20174,
											"end": 20291,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 20174,
											"end": 20291,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 20283,
											"end": 20284,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 20280,
											"end": 20281,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 20273,
											"end": 20285,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 20297,
											"end": 20414,
											"name": "tag",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 20297,
											"end": 20414,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 20406,
											"end": 20407,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 20403,
											"end": 20404,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 20396,
											"end": 20408,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 20420,
											"end": 20537,
											"name": "tag",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 20420,
											"end": 20537,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 20529,
											"end": 20530,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 20526,
											"end": 20527,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 20519,
											"end": 20531,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 20543,
											"end": 20645,
											"name": "tag",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 20543,
											"end": 20645,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 20584,
											"end": 20590,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 20635,
											"end": 20637,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 20631,
											"end": 20638,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 20626,
											"end": 20628,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 20619,
											"end": 20624,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 20615,
											"end": 20629,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 20611,
											"end": 20639,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 20601,
											"end": 20639,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 20601,
											"end": 20639,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 20543,
											"end": 20645,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 20543,
											"end": 20645,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 20543,
											"end": 20645,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 20543,
											"end": 20645,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 20651,
											"end": 20883,
											"name": "tag",
											"source": 10,
											"value": "379"
										},
										{
											"begin": 20651,
											"end": 20883,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 20791,
											"end": 20825,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65"
										},
										{
											"begin": 20787,
											"end": 20788,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 20779,
											"end": 20785,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 20775,
											"end": 20789,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 20768,
											"end": 20826,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 20860,
											"end": 20875,
											"name": "PUSH",
											"source": 10,
											"value": "72206F7220617070726F76656400000000000000000000000000000000000000"
										},
										{
											"begin": 20855,
											"end": 20857,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 20847,
											"end": 20853,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 20843,
											"end": 20858,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 20836,
											"end": 20876,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 20651,
											"end": 20883,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 20651,
											"end": 20883,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 20889,
											"end": 21126,
											"name": "tag",
											"source": 10,
											"value": "384"
										},
										{
											"begin": 20889,
											"end": 21126,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 21029,
											"end": 21063,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A207472616E7366657220746F206E6F6E204552433732315265"
										},
										{
											"begin": 21025,
											"end": 21026,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 21017,
											"end": 21023,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21013,
											"end": 21027,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21006,
											"end": 21064,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 21098,
											"end": 21118,
											"name": "PUSH",
											"source": 10,
											"value": "63656976657220696D706C656D656E7465720000000000000000000000000000"
										},
										{
											"begin": 21093,
											"end": 21095,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 21085,
											"end": 21091,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21081,
											"end": 21096,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21074,
											"end": 21119,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 20889,
											"end": 21126,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 20889,
											"end": 21126,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 21132,
											"end": 21356,
											"name": "tag",
											"source": 10,
											"value": "389"
										},
										{
											"begin": 21132,
											"end": 21356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 21272,
											"end": 21306,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A207472616E736665722066726F6D20696E636F727265637420"
										},
										{
											"begin": 21268,
											"end": 21269,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 21260,
											"end": 21266,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21256,
											"end": 21270,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21249,
											"end": 21307,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 21341,
											"end": 21348,
											"name": "PUSH",
											"source": 10,
											"value": "6F776E6572000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21336,
											"end": 21338,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 21328,
											"end": 21334,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21324,
											"end": 21339,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21317,
											"end": 21349,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 21132,
											"end": 21356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 21132,
											"end": 21356,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 21362,
											"end": 21585,
											"name": "tag",
											"source": 10,
											"value": "394"
										},
										{
											"begin": 21362,
											"end": 21585,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 21502,
											"end": 21536,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A207472616E7366657220746F20746865207A65726F20616464"
										},
										{
											"begin": 21498,
											"end": 21499,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 21490,
											"end": 21496,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21486,
											"end": 21500,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21479,
											"end": 21537,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 21571,
											"end": 21577,
											"name": "PUSH",
											"source": 10,
											"value": "7265737300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21566,
											"end": 21568,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 21558,
											"end": 21564,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21554,
											"end": 21569,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21547,
											"end": 21578,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 21362,
											"end": 21585,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 21362,
											"end": 21585,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 21591,
											"end": 21766,
											"name": "tag",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 21591,
											"end": 21766,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 21731,
											"end": 21758,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A20617070726F766520746F2063616C6C657200000000000000"
										},
										{
											"begin": 21727,
											"end": 21728,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 21719,
											"end": 21725,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21715,
											"end": 21729,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21708,
											"end": 21759,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 21591,
											"end": 21766,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 21591,
											"end": 21766,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 21772,
											"end": 22000,
											"name": "tag",
											"source": 10,
											"value": "404"
										},
										{
											"begin": 21772,
											"end": 22000,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 21912,
											"end": 21946,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A2061646472657373207A65726F206973206E6F742061207661"
										},
										{
											"begin": 21908,
											"end": 21909,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 21900,
											"end": 21906,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21896,
											"end": 21910,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21889,
											"end": 21947,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 21981,
											"end": 21992,
											"name": "PUSH",
											"source": 10,
											"value": "6C6964206F776E65720000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21976,
											"end": 21978,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 21968,
											"end": 21974,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 21964,
											"end": 21979,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 21957,
											"end": 21993,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 21772,
											"end": 22000,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 21772,
											"end": 22000,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 22006,
											"end": 22180,
											"name": "tag",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 22006,
											"end": 22180,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22146,
											"end": 22172,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A20696E76616C696420746F6B656E2049440000000000000000"
										},
										{
											"begin": 22142,
											"end": 22143,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 22134,
											"end": 22140,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 22130,
											"end": 22144,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 22123,
											"end": 22173,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 22006,
											"end": 22180,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 22006,
											"end": 22180,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 22186,
											"end": 22406,
											"name": "tag",
											"source": 10,
											"value": "414"
										},
										{
											"begin": 22186,
											"end": 22406,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22326,
											"end": 22360,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A20617070726F76616C20746F2063757272656E74206F776E65"
										},
										{
											"begin": 22322,
											"end": 22323,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 22314,
											"end": 22320,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 22310,
											"end": 22324,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 22303,
											"end": 22361,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 22395,
											"end": 22398,
											"name": "PUSH",
											"source": 10,
											"value": "7200000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 22390,
											"end": 22392,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 22382,
											"end": 22388,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 22378,
											"end": 22393,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 22371,
											"end": 22399,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 22186,
											"end": 22406,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 22186,
											"end": 22406,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 22412,
											"end": 22660,
											"name": "tag",
											"source": 10,
											"value": "419"
										},
										{
											"begin": 22412,
											"end": 22660,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22552,
											"end": 22586,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F"
										},
										{
											"begin": 22548,
											"end": 22549,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 22540,
											"end": 22546,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 22536,
											"end": 22550,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 22529,
											"end": 22587,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 22621,
											"end": 22652,
											"name": "PUSH",
											"source": 10,
											"value": "6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000"
										},
										{
											"begin": 22616,
											"end": 22618,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 22608,
											"end": 22614,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 22604,
											"end": 22619,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 22597,
											"end": 22653,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 22412,
											"end": 22660,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 22412,
											"end": 22660,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 22666,
											"end": 22788,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 22666,
											"end": 22788,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22739,
											"end": 22763,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "514"
										},
										{
											"begin": 22757,
											"end": 22762,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 22739,
											"end": 22763,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 22739,
											"end": 22763,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 22739,
											"end": 22763,
											"name": "tag",
											"source": 10,
											"value": "514"
										},
										{
											"begin": 22739,
											"end": 22763,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22732,
											"end": 22737,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 22729,
											"end": 22764,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 22719,
											"end": 22782,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "515"
										},
										{
											"begin": 22719,
											"end": 22782,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 22778,
											"end": 22779,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 22775,
											"end": 22776,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 22768,
											"end": 22780,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 22719,
											"end": 22782,
											"name": "tag",
											"source": 10,
											"value": "515"
										},
										{
											"begin": 22719,
											"end": 22782,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22666,
											"end": 22788,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 22666,
											"end": 22788,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 22794,
											"end": 22910,
											"name": "tag",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 22794,
											"end": 22910,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22864,
											"end": 22885,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "517"
										},
										{
											"begin": 22879,
											"end": 22884,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 22864,
											"end": 22885,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 22864,
											"end": 22885,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 22864,
											"end": 22885,
											"name": "tag",
											"source": 10,
											"value": "517"
										},
										{
											"begin": 22864,
											"end": 22885,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22857,
											"end": 22862,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 22854,
											"end": 22886,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 22844,
											"end": 22904,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "518"
										},
										{
											"begin": 22844,
											"end": 22904,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 22900,
											"end": 22901,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 22897,
											"end": 22898,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 22890,
											"end": 22902,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 22844,
											"end": 22904,
											"name": "tag",
											"source": 10,
											"value": "518"
										},
										{
											"begin": 22844,
											"end": 22904,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22794,
											"end": 22910,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 22794,
											"end": 22910,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 22916,
											"end": 23036,
											"name": "tag",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 22916,
											"end": 23036,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22988,
											"end": 23011,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "520"
										},
										{
											"begin": 23005,
											"end": 23010,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 22988,
											"end": 23011,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "477"
										},
										{
											"begin": 22988,
											"end": 23011,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 22988,
											"end": 23011,
											"name": "tag",
											"source": 10,
											"value": "520"
										},
										{
											"begin": 22988,
											"end": 23011,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22981,
											"end": 22986,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 22978,
											"end": 23012,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 22968,
											"end": 23030,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "521"
										},
										{
											"begin": 22968,
											"end": 23030,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 23026,
											"end": 23027,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 23023,
											"end": 23024,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 23016,
											"end": 23028,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 22968,
											"end": 23030,
											"name": "tag",
											"source": 10,
											"value": "521"
										},
										{
											"begin": 22968,
											"end": 23030,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 22916,
											"end": 23036,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 22916,
											"end": 23036,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 23042,
											"end": 23164,
											"name": "tag",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 23042,
											"end": 23164,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 23115,
											"end": 23139,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "523"
										},
										{
											"begin": 23133,
											"end": 23138,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 23115,
											"end": 23139,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "423"
										},
										{
											"begin": 23115,
											"end": 23139,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 23115,
											"end": 23139,
											"name": "tag",
											"source": 10,
											"value": "523"
										},
										{
											"begin": 23115,
											"end": 23139,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 23108,
											"end": 23113,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 23105,
											"end": 23140,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 23095,
											"end": 23158,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "524"
										},
										{
											"begin": 23095,
											"end": 23158,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 23154,
											"end": 23155,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 23151,
											"end": 23152,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 23144,
											"end": 23156,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 23095,
											"end": 23158,
											"name": "tag",
											"source": 10,
											"value": "524"
										},
										{
											"begin": 23095,
											"end": 23158,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 23042,
											"end": 23164,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 23042,
											"end": 23164,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xbee20b3018855c129f2081555c21836f8f2bb8ddc88a29adaec6fefb7a0e4572\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8238d067b54561dcb33df7a446abd19501434f6b4442284e6a69861f2569b3da\",\"dweb:/ipfs/QmeyJsA96Fgx3bRwswbhnSBSTSE3bRihJatahC288LjZUh\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x086fbe904291497e1532ef340f1bd589078f49e3d4d0bbfd88f5e02fb89261eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0df1e3e965b78a0d98dda2d1d6a6acde88f515b1d3a9ad02f505e93fa7babeda\",\"dweb:/ipfs/QmW4cSbGriRAj7XRZu6zSaqspe4eyYWkF7WfJbj3rmmLbk\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ad84b5dbf40ba9e944cc25bd0a98c51bafd49cff30efe5ef5aef921a70081de\",\"dweb:/ipfs/Qme8iCeqe9VdNgWktTTsSxUfHcJEXuvPaJpshWDzoWj56V\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xbaa90c891304799f6aa4039eae4b59afc0b59ce3bcc647f3fc2bbf5a04b17f1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc3f5b077759f92f28ba4182d9410aa8fd586d7efc5f76bdd22228bf2d227f0\",\"dweb:/ipfs/QmbLPLb31LxAyB7GWir5AssC1TYVHqhBsN6R7APj2UV9fv\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x768fcac57789d8edb0b4c8e02bad17b15faeebbc3c8b2c8ec473b485cc0b59fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://422e724988089c9f08fab930fe24ae9fd593cd069d488a36084ba5a3d46fcfcf\",\"dweb:/ipfs/QmQ64LQm7jCherXKciXHZmy1Xcd6oub1Lx96WVbfZaxATP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 25,
								"contract": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_name",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 27,
								"contract": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_symbol",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 31,
								"contract": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_owners",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 35,
								"contract": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 39,
								"contract": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 45,
								"contract": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x086fbe904291497e1532ef340f1bd589078f49e3d4d0bbfd88f5e02fb89261eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0df1e3e965b78a0d98dda2d1d6a6acde88f515b1d3a9ad02f505e93fa7babeda\",\"dweb:/ipfs/QmW4cSbGriRAj7XRZu6zSaqspe4eyYWkF7WfJbj3rmmLbk\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x086fbe904291497e1532ef340f1bd589078f49e3d4d0bbfd88f5e02fb89261eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0df1e3e965b78a0d98dda2d1d6a6acde88f515b1d3a9ad02f505e93fa7babeda\",\"dweb:/ipfs/QmW4cSbGriRAj7XRZu6zSaqspe4eyYWkF7WfJbj3rmmLbk\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":194:9157  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":194:9157  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212203467c8a3e9ba0c09367836675c052dd2c8015f265514f959d132bae7d9d9d6ae64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203467c8a3e9ba0c09367836675c052dd2c8015f265514f959d132bae7d9d9d6ae64736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE PUSH8 0xC8A3E9BA0C093678 CALLDATASIZE PUSH8 0x5C052DD2C8015F26 SSTORE EQ 0xF9 MSIZE 0xD1 ORIGIN 0xBA 0xE7 0xD9 0xD9 0xD6 0xAE PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "194:8963:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203467c8a3e9ba0c09367836675c052dd2c8015f265514f959d132bae7d9d9d6ae64736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE PUSH8 0xC8A3E9BA0C093678 CALLDATASIZE PUSH8 0x5C052DD2C8015F26 SSTORE EQ 0xF9 MSIZE 0xD1 ORIGIN 0xBA 0xE7 0xD9 0xD9 0xD6 0xAE PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "194:8963:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9157,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203467c8a3e9ba0c09367836675c052dd2c8015f265514f959d132bae7d9d9d6ae64736f6c63430008070033",
									".code": [
										{
											"begin": 194,
											"end": 9157,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9157,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9157,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9157,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9157,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9157,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9157,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9157,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9157,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ad84b5dbf40ba9e944cc25bd0a98c51bafd49cff30efe5ef5aef921a70081de\",\"dweb:/ipfs/Qme8iCeqe9VdNgWktTTsSxUfHcJEXuvPaJpshWDzoWj56V\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":188:2253  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":188:2253  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fcfd7f2b5471c8391711a8c6dfa15a4a02953072e371edc31c22b69b74acbfcf64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fcfd7f2b5471c8391711a8c6dfa15a4a02953072e371edc31c22b69b74acbfcf64736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC REVERT PUSH32 0x2B5471C8391711A8C6DFA15A4A02953072E371EDC31C22B69B74ACBFCF64736F PUSH13 0x63430008070033000000000000 ",
							"sourceMap": "188:2065:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fcfd7f2b5471c8391711a8c6dfa15a4a02953072e371edc31c22b69b74acbfcf64736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC REVERT PUSH32 0x2B5471C8391711A8C6DFA15A4A02953072E371EDC31C22B69B74ACBFCF64736F PUSH13 0x63430008070033000000000000 ",
							"sourceMap": "188:2065:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fcfd7f2b5471c8391711a8c6dfa15a4a02953072e371edc31c22b69b74acbfcf64736f6c63430008070033",
									".code": [
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xbaa90c891304799f6aa4039eae4b59afc0b59ce3bcc647f3fc2bbf5a04b17f1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc3f5b077759f92f28ba4182d9410aa8fd586d7efc5f76bdd22228bf2d227f0\",\"dweb:/ipfs/QmbLPLb31LxAyB7GWir5AssC1TYVHqhBsN6R7APj2UV9fv\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x768fcac57789d8edb0b4c8e02bad17b15faeebbc3c8b2c8ec473b485cc0b59fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://422e724988089c9f08fab930fe24ae9fd593cd069d488a36084ba5a3d46fcfcf\",\"dweb:/ipfs/QmQ64LQm7jCherXKciXHZmy1Xcd6oub1Lx96WVbfZaxATP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":202:12504  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":202:12504  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209cf7bd873e30bef8e62212486eeea1431a8688f293347cc6ccc3c25c6c4340ad64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209cf7bd873e30bef8e62212486eeea1431a8688f293347cc6ccc3c25c6c4340ad64736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xF7 0xBD DUP8 RETURNDATACOPY ADDRESS 0xBE 0xF8 0xE6 0x22 SLT BASEFEE PUSH15 0xEEA1431A8688F293347CC6CCC3C25C PUSH13 0x4340AD64736F6C634300080700 CALLER ",
							"sourceMap": "202:12302:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209cf7bd873e30bef8e62212486eeea1431a8688f293347cc6ccc3c25c6c4340ad64736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xF7 0xBD DUP8 RETURNDATACOPY ADDRESS 0xBE 0xF8 0xE6 0x22 SLT BASEFEE PUSH15 0xEEA1431A8688F293347CC6CCC3C25C PUSH13 0x4340AD64736F6C634300080700 CALLER ",
							"sourceMap": "202:12302:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209cf7bd873e30bef8e62212486eeea1431a8688f293347cc6ccc3c25c6c4340ad64736f6c63430008070033",
									".code": [
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x768fcac57789d8edb0b4c8e02bad17b15faeebbc3c8b2c8ec473b485cc0b59fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://422e724988089c9f08fab930fe24ae9fd593cd069d488a36084ba5a3d46fcfcf\",\"dweb:/ipfs/QmQ64LQm7jCherXKciXHZmy1Xcd6oub1Lx96WVbfZaxATP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
					"exportedSymbols": {
						"Address": [
							1446
						],
						"Context": [
							1468
						],
						"ERC165": [
							1667
						],
						"ERC721": [
							955
						],
						"IERC165": [
							1679
						],
						"IERC721": [
							1071
						],
						"IERC721Metadata": [
							1116
						],
						"IERC721Receiver": [
							1089
						],
						"Math": [
							2544
						],
						"Strings": [
							1643
						]
					},
					"id": 956,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:0"
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 956,
							"sourceUnit": 1072,
							"src": "132:23:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "./IERC721Receiver.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 956,
							"sourceUnit": 1090,
							"src": "156:31:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "./extensions/IERC721Metadata.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 956,
							"sourceUnit": 1117,
							"src": "188:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol",
							"file": "../../utils/Address.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 956,
							"sourceUnit": 1447,
							"src": "231:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 6,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 956,
							"sourceUnit": 1469,
							"src": "265:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol",
							"file": "../../utils/Strings.sol",
							"id": 7,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 956,
							"sourceUnit": 1644,
							"src": "299:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
							"file": "../../utils/introspection/ERC165.sol",
							"id": 8,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 956,
							"sourceUnit": 1668,
							"src": "333:46:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 10,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1468,
										"src": "647:7:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "647:7:0"
								},
								{
									"baseName": {
										"id": 12,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1667,
										"src": "656:6:0"
									},
									"id": 13,
									"nodeType": "InheritanceSpecifier",
									"src": "656:6:0"
								},
								{
									"baseName": {
										"id": 14,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1071,
										"src": "664:7:0"
									},
									"id": 15,
									"nodeType": "InheritanceSpecifier",
									"src": "664:7:0"
								},
								{
									"baseName": {
										"id": 16,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1116,
										"src": "673:15:0"
									},
									"id": 17,
									"nodeType": "InheritanceSpecifier",
									"src": "673:15:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 9,
								"nodeType": "StructuredDocumentation",
								"src": "381:246:0",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
							},
							"fullyImplemented": true,
							"id": 955,
							"linearizedBaseContracts": [
								955,
								1116,
								1071,
								1667,
								1679,
								1468
							],
							"name": "ERC721",
							"nameLocation": "637:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 20,
									"libraryName": {
										"id": 18,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1446,
										"src": "701:7:0"
									},
									"nodeType": "UsingForDirective",
									"src": "695:26:0",
									"typeName": {
										"id": 19,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "713:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"id": 23,
									"libraryName": {
										"id": 21,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1643,
										"src": "732:7:0"
									},
									"nodeType": "UsingForDirective",
									"src": "726:26:0",
									"typeName": {
										"id": 22,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "744:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 25,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "791:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 955,
									"src": "776:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 24,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "776:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 27,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "838:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 955,
									"src": "823:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 26,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "823:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 31,
									"mutability": "mutable",
									"name": "_owners",
									"nameLocation": "934:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 955,
									"src": "898:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 30,
										"keyType": {
											"id": 28,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "906:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "898:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 29,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "917:7:0",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 35,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1028:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 955,
									"src": "992:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 34,
										"keyType": {
											"id": 32,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1000:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "992:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 33,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1011:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 39,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "1129:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 955,
									"src": "1093:51:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 38,
										"keyType": {
											"id": 36,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1101:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1093:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 37,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1112:7:0",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 45,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "1252:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 955,
									"src": "1199:71:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 44,
										"keyType": {
											"id": 40,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1207:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1199:44:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 43,
											"keyType": {
												"id": 41,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1226:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1218:24:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 42,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1237:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "1446:57:0",
										"statements": [
											{
												"expression": {
													"id": 55,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 53,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "1456:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 54,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "1464:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1456:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 56,
												"nodeType": "ExpressionStatement",
												"src": "1456:13:0"
											},
											{
												"expression": {
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 57,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1479:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 58,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 50,
														"src": "1489:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1479:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "1479:17:0"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1277:108:0",
										"text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
									},
									"id": 62,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1416:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1402:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 47,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1402:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1437:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1423:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 49,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1423:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1401:44:0"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1446:0:0"
									},
									"scope": 955,
									"src": "1390:113:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1666,
										1678
									],
									"body": {
										"id": 92,
										"nodeType": "Block",
										"src": "1678:192:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 85,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 73,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1707:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 75,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1071,
																			"src": "1727:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$1071_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$1071_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 74,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "1722:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 76,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1722:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$1071",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 77,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "1722:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "1707:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 84,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 79,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1763:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 81,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1116,
																			"src": "1783:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1116_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1116_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 80,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "1778:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 82,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1778:21:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$1116",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 83,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "1778:33:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "1763:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "1707:104:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 88,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1851:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 86,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "1827:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721_$955_$",
																	"typeString": "type(contract super ERC721)"
																}
															},
															"id": 87,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1666,
															"src": "1827:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 89,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1827:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1707:156:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 72,
												"id": 91,
												"nodeType": "Return",
												"src": "1688:175:0"
											}
										]
									},
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "1509:56:0",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 93,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "1579:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 69,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 67,
												"name": "ERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1667,
												"src": "1646:6:0"
											},
											{
												"id": 68,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1679,
												"src": "1654:7:0"
											}
										],
										"src": "1637:25:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "1604:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "1597:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 64,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1597:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1596:20:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "1672:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 70,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1672:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1671:6:0"
									},
									"scope": 955,
									"src": "1570:300:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										996
									],
									"body": {
										"id": 116,
										"nodeType": "Block",
										"src": "2010:123:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 103,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 96,
																"src": "2028:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 106,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2045:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 105,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2037:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 104,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2037:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 107,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2037:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2028:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572",
															"id": 109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2049:43:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																"typeString": "literal_string \"ERC721: address zero is not a valid owner\""
															},
															"value": "ERC721: address zero is not a valid owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																"typeString": "literal_string \"ERC721: address zero is not a valid owner\""
															}
														],
														"id": 102,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2020:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2020:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 111,
												"nodeType": "ExpressionStatement",
												"src": "2020:73:0"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 112,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 35,
														"src": "2110:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 114,
													"indexExpression": {
														"id": 113,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 96,
														"src": "2120:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2110:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 101,
												"id": 115,
												"nodeType": "Return",
												"src": "2103:23:0"
											}
										]
									},
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "1876:48:0",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "1938:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 98,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1983:8:0"
									},
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1956:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "1948:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 95,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1948:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1947:15:0"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "2001:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2001:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2000:9:0"
									},
									"scope": 955,
									"src": "1929:204:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1004
									],
									"body": {
										"id": 144,
										"nodeType": "Block",
										"src": "2271:138:0",
										"statements": [
											{
												"assignments": [
													127
												],
												"declarations": [
													{
														"constant": false,
														"id": 127,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "2289:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 144,
														"src": "2281:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 126,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2281:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 131,
												"initialValue": {
													"arguments": [
														{
															"id": 129,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 120,
															"src": "2306:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 128,
														"name": "_ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 427,
														"src": "2297:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2297:17:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2281:33:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 133,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 127,
																"src": "2332:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 136,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2349:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2341:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 134,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2341:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 137,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2341:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2332:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2353:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															},
															"value": "ERC721: invalid token ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															}
														],
														"id": 132,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2324:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2324:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2324:56:0"
											},
											{
												"expression": {
													"id": 142,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 127,
													"src": "2397:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 125,
												"id": 143,
												"nodeType": "Return",
												"src": "2390:12:0"
											}
										]
									},
									"documentation": {
										"id": 118,
										"nodeType": "StructuredDocumentation",
										"src": "2139:46:0",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 145,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "2199:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 122,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2244:8:0"
									},
									"parameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2215:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "2207:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2207:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2206:17:0"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "2262:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2262:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2261:9:0"
									},
									"scope": 955,
									"src": "2190:219:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1101
									],
									"body": {
										"id": 154,
										"nodeType": "Block",
										"src": "2540:29:0",
										"statements": [
											{
												"expression": {
													"id": 152,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 25,
													"src": "2557:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 151,
												"id": 153,
												"nodeType": "Return",
												"src": "2550:12:0"
											}
										]
									},
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "2415:51:0",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 155,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2480:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 148,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2507:8:0"
									},
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2484:2:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "2525:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 149,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2524:15:0"
									},
									"scope": 955,
									"src": "2471:98:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1107
									],
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "2704:31:0",
										"statements": [
											{
												"expression": {
													"id": 162,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "2721:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 161,
												"id": 163,
												"nodeType": "Return",
												"src": "2714:14:0"
											}
										]
									},
									"documentation": {
										"id": 156,
										"nodeType": "StructuredDocumentation",
										"src": "2575:53:0",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2642:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 158,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2671:8:0"
									},
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2648:2:0"
									},
									"returnParameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "2689:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 159,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2689:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2688:15:0"
									},
									"scope": 955,
									"src": "2633:102:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1115
									],
									"body": {
										"id": 203,
										"nodeType": "Block",
										"src": "2889:188:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 175,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 168,
															"src": "2914:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 174,
														"name": "_requireMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 816,
														"src": "2899:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
															"typeString": "function (uint256) view"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2899:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "2899:23:0"
											},
											{
												"assignments": [
													179
												],
												"declarations": [
													{
														"constant": false,
														"id": 179,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "2947:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 203,
														"src": "2933:21:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 178,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2933:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 182,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 180,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 213,
														"src": "2957:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2957:10:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2933:34:0"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 189,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 185,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "2990:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2984:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 183,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2984:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2984:14:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 187,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2984:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 188,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3008:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2984:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 200,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3068:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2984:86:0",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 194,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "3036:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 195,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 168,
																				"src": "3045:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 196,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1526,
																			"src": "3045:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3045:18:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 192,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "3019:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 193,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "3019:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3019:45:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 191,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3012:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 190,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "3012:6:0",
																"typeDescriptions": {}
															}
														},
														"id": 199,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3012:53:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 173,
												"id": 202,
												"nodeType": "Return",
												"src": "2977:93:0"
											}
										]
									},
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "2741:55:0",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 204,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "2810:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 170,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2856:8:0"
									},
									"parameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2827:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "2819:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2819:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2818:17:0"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "2874:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 171,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2874:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2873:15:0"
									},
									"scope": 955,
									"src": "2801:276:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "3385:26:0",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3402:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 209,
												"id": 211,
												"nodeType": "Return",
												"src": "3395:9:0"
											}
										]
									},
									"documentation": {
										"id": 205,
										"nodeType": "StructuredDocumentation",
										"src": "3083:231:0",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."
									},
									"id": 213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "3328:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3336:2:0"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "3370:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 207,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3370:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3369:15:0"
									},
									"scope": 955,
									"src": "3319:92:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1044
									],
									"body": {
										"id": 255,
										"nodeType": "Block",
										"src": "3538:336:0",
										"statements": [
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3556:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 255,
														"src": "3548:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 222,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3548:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 228,
												"initialValue": {
													"arguments": [
														{
															"id": 226,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "3579:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 224,
															"name": "ERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 955,
															"src": "3564:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721_$955_$",
																"typeString": "type(contract ERC721)"
															}
														},
														"id": 225,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "3564:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3564:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3548:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 232,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 230,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 216,
																"src": "3605:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 231,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 223,
																"src": "3611:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3605:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3618:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																"typeString": "literal_string \"ERC721: approval to current owner\""
															},
															"value": "ERC721: approval to current owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																"typeString": "literal_string \"ERC721: approval to current owner\""
															}
														],
														"id": 229,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3597:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3597:57:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 235,
												"nodeType": "ExpressionStatement",
												"src": "3597:57:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 237,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1458,
																		"src": "3686:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 238,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3686:12:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 239,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 223,
																	"src": "3702:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "3686:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 242,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 223,
																		"src": "3728:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 243,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1458,
																			"src": "3735:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 244,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3735:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 241,
																	"name": "isApprovedForAll",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 309,
																	"src": "3711:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address,address) view returns (bool)"
																	}
																},
																"id": 245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3711:37:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3686:62:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c",
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3762:63:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																"typeString": "literal_string \"ERC721: approve caller is not token owner or approved for all\""
															},
															"value": "ERC721: approve caller is not token owner or approved for all"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																"typeString": "literal_string \"ERC721: approve caller is not token owner or approved for all\""
															}
														],
														"id": 236,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3665:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3665:170:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 249,
												"nodeType": "ExpressionStatement",
												"src": "3665:170:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 251,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "3855:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 252,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "3859:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 250,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 770,
														"src": "3846:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3846:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "3846:21:0"
											}
										]
									},
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "3417:46:0",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3477:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 220,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3529:8:0"
									},
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3493:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "3485:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3485:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3505:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "3497:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3497:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3484:29:0"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3538:0:0"
									},
									"scope": 955,
									"src": "3468:406:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1060
									],
									"body": {
										"id": 273,
										"nodeType": "Block",
										"src": "4020:82:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 266,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "4045:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 265,
														"name": "_requireMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 816,
														"src": "4030:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
															"typeString": "function (uint256) view"
														}
													},
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4030:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 268,
												"nodeType": "ExpressionStatement",
												"src": "4030:23:0"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 269,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 39,
														"src": "4071:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 271,
													"indexExpression": {
														"id": 270,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 259,
														"src": "4087:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4071:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 264,
												"id": 272,
												"nodeType": "Return",
												"src": "4064:31:0"
											}
										]
									},
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "3880:50:0",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 274,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "3944:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 261,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3993:8:0"
									},
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3964:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "3956:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3956:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3955:17:0"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4011:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4011:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4010:9:0"
									},
									"scope": 955,
									"src": "3935:167:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1052
									],
									"body": {
										"id": 290,
										"nodeType": "Block",
										"src": "4253:69:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 284,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1458,
																"src": "4282:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4282:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 286,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 277,
															"src": "4296:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 287,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "4306:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 283,
														"name": "_setApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 802,
														"src": "4263:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4263:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 289,
												"nodeType": "ExpressionStatement",
												"src": "4263:52:0"
											}
										]
									},
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "4108:56:0",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4178:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 281,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4244:8:0"
									},
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4204:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "4196:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4196:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4219:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "4214:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 278,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4214:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4195:33:0"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4253:0:0"
									},
									"scope": 955,
									"src": "4169:153:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1070
									],
									"body": {
										"id": 308,
										"nodeType": "Block",
										"src": "4491:59:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 302,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "4508:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 304,
														"indexExpression": {
															"id": 303,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "4527:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4508:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 306,
													"indexExpression": {
														"id": 305,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 296,
														"src": "4534:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4508:35:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 301,
												"id": 307,
												"nodeType": "Return",
												"src": "4501:42:0"
											}
										]
									},
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "4328:55:0",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 309,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4397:16:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 298,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4467:8:0"
									},
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4422:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "4414:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4414:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4437:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "4429:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4429:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4413:33:0"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "4485:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 299,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4485:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4484:6:0"
									},
									"scope": 955,
									"src": "4388:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1036
									],
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "4731:207:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 322,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1458,
																		"src": "4820:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4820:12:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 324,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 316,
																	"src": "4834:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 321,
																"name": "_isApprovedOrOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "4801:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) view returns (bool)"
																}
															},
															"id": 325,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4801:41:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
															"id": 326,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4844:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																"typeString": "literal_string \"ERC721: caller is not token owner or approved\""
															},
															"value": "ERC721: caller is not token owner or approved"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																"typeString": "literal_string \"ERC721: caller is not token owner or approved\""
															}
														],
														"id": 320,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4793:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4793:99:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 328,
												"nodeType": "ExpressionStatement",
												"src": "4793:99:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 330,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 312,
															"src": "4913:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 331,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 314,
															"src": "4919:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 332,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "4923:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 329,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 746,
														"src": "4903:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4903:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 334,
												"nodeType": "ExpressionStatement",
												"src": "4903:28:0"
											}
										]
									},
									"documentation": {
										"id": 310,
										"nodeType": "StructuredDocumentation",
										"src": "4556:51:0",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4621:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 318,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4722:8:0"
									},
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4651:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "4643:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 311,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4643:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4673:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "4665:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4665:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4693:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "4685:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4685:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4633:73:0"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4731:0:0"
									},
									"scope": 955,
									"src": "4612:326:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1026
									],
									"body": {
										"id": 354,
										"nodeType": "Block",
										"src": "5127:56:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 348,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "5154:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 349,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "5160:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 350,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 343,
															"src": "5164:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 351,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5173:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 347,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															355,
															385
														],
														"referencedDeclaration": 385,
														"src": "5137:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 353,
												"nodeType": "ExpressionStatement",
												"src": "5137:39:0"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "4944:55:0",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "5013:16:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 345,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5118:8:0"
									},
									"parameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5047:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "5039:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5069:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "5061:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5089:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "5081:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5081:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5029:73:0"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5127:0:0"
									},
									"scope": 955,
									"src": "5004:179:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1016
									],
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "5399:164:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 370,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1458,
																		"src": "5436:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 371,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5436:12:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 372,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "5450:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 369,
																"name": "_isApprovedOrOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "5417:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) view returns (bool)"
																}
															},
															"id": 373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5417:41:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
															"id": 374,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5460:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																"typeString": "literal_string \"ERC721: caller is not token owner or approved\""
															},
															"value": "ERC721: caller is not token owner or approved"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
																"typeString": "literal_string \"ERC721: caller is not token owner or approved\""
															}
														],
														"id": 368,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5409:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5409:99:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "5409:99:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 378,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "5532:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 379,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 360,
															"src": "5538:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 380,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "5542:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 381,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "5551:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 377,
														"name": "_safeTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "5518:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5518:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 383,
												"nodeType": "ExpressionStatement",
												"src": "5518:38:0"
											}
										]
									},
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "5189:55:0",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "5258:16:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 366,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5390:8:0"
									},
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5292:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "5284:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5284:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5314:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "5306:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5306:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5334:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "5326:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5326:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5364:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "5351:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 363,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5351:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5274:100:0"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5399:0:0"
									},
									"scope": 955,
									"src": "5249:314:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 413,
										"nodeType": "Block",
										"src": "6564:165:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 398,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "6584:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 399,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "6590:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 400,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "6594:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 397,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 746,
														"src": "6574:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6574:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 402,
												"nodeType": "ExpressionStatement",
												"src": "6574:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 405,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6643:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 406,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 390,
																	"src": "6649:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 407,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 392,
																	"src": "6653:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 408,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 394,
																	"src": "6662:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 404,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 878,
																"src": "6620:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6620:47:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 410,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6669:52:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															},
															"value": "ERC721: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 403,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6612:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6612:110:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 412,
												"nodeType": "ExpressionStatement",
												"src": "6612:110:0"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "5569:850:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "6433:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6464:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "6456:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6456:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6486:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "6478:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6478:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6506:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "6498:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6498:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6536:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "6523:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 393,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6523:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6446:100:0"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6564:0:0"
									},
									"scope": 955,
									"src": "6424:305:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "6913:40:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 422,
														"name": "_owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "6930:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 424,
													"indexExpression": {
														"id": 423,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 417,
														"src": "6938:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6930:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 421,
												"id": 425,
												"nodeType": "Return",
												"src": "6923:23:0"
											}
										]
									},
									"documentation": {
										"id": 415,
										"nodeType": "StructuredDocumentation",
										"src": "6735:98:0",
										"text": " @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"
									},
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownerOf",
									"nameLocation": "6847:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6864:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "6856:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6856:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6855:17:0"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "6904:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6904:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6903:9:0"
									},
									"scope": 955,
									"src": "6838:115:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "7327:55:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 436,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 430,
																"src": "7353:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 435,
															"name": "_ownerOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "7344:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view returns (address)"
															}
														},
														"id": 437,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7344:17:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7373:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7365:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 438,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7365:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7365:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7344:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 434,
												"id": 443,
												"nodeType": "Return",
												"src": "7337:38:0"
											}
										]
									},
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "6959:292:0",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "7265:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7281:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7273:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7273:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7272:17:0"
									},
									"returnParameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7321:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 432,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7321:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7320:6:0"
									},
									"scope": 955,
									"src": "7256:126:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 478,
										"nodeType": "Block",
										"src": "7639:162:0",
										"statements": [
											{
												"assignments": [
													456
												],
												"declarations": [
													{
														"constant": false,
														"id": 456,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7657:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 478,
														"src": "7649:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 455,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7649:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 461,
												"initialValue": {
													"arguments": [
														{
															"id": 459,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 450,
															"src": "7680:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 457,
															"name": "ERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 955,
															"src": "7665:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721_$955_$",
																"typeString": "type(contract ERC721)"
															}
														},
														"id": 458,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "7665:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7665:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7649:39:0"
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 469,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 462,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 448,
																		"src": "7706:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 463,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 456,
																		"src": "7717:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "7706:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 466,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 456,
																			"src": "7743:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 467,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 448,
																			"src": "7750:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 465,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 309,
																		"src": "7726:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7726:32:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "7706:52:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 471,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 450,
																			"src": "7774:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 470,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 274,
																		"src": "7762:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 472,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7762:20:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 473,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 448,
																	"src": "7786:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "7762:31:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "7706:87:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 476,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7705:89:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 454,
												"id": 477,
												"nodeType": "Return",
												"src": "7698:96:0"
											}
										]
									},
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "7388:147:0",
										"text": " @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."
									},
									"id": 479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isApprovedOrOwner",
									"nameLocation": "7549:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7576:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "7568:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7568:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7593:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "7585:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7585:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7567:34:0"
									},
									"returnParameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "7633:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 452,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7633:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7632:6:0"
									},
									"scope": 955,
									"src": "7540:261:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 493,
										"nodeType": "Block",
										"src": "8196:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 488,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "8216:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 489,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "8220:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8229:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 487,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															494,
															523
														],
														"referencedDeclaration": 523,
														"src": "8206:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8206:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 492,
												"nodeType": "ExpressionStatement",
												"src": "8206:26:0"
											}
										]
									},
									"documentation": {
										"id": 480,
										"nodeType": "StructuredDocumentation",
										"src": "7807:319:0",
										"text": " @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "8140:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8158:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "8150:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8150:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8170:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "8162:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8162:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8149:29:0"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8196:0:0"
									},
									"scope": 955,
									"src": "8131:108:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 522,
										"nodeType": "Block",
										"src": "8574:195:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 505,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 497,
															"src": "8590:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 506,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 499,
															"src": "8594:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 504,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 598,
														"src": "8584:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8584:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 508,
												"nodeType": "ExpressionStatement",
												"src": "8584:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 513,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8664:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8656:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 511,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8656:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 514,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8656:10:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 515,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 497,
																	"src": "8668:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 516,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 499,
																	"src": "8672:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 517,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 501,
																	"src": "8681:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 510,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 878,
																"src": "8633:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8633:53:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8700:52:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															},
															"value": "ERC721: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 509,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8612:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8612:150:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 521,
												"nodeType": "ExpressionStatement",
												"src": "8612:150:0"
											}
										]
									},
									"documentation": {
										"id": 495,
										"nodeType": "StructuredDocumentation",
										"src": "8245:210:0",
										"text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
									},
									"id": 523,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "8469:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8496:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "8488:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 496,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8488:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8516:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "8508:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8508:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8546:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "8533:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 500,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8533:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8478:78:0"
									},
									"returnParameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8574:0:0"
									},
									"scope": 955,
									"src": "8460:309:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 597,
										"nodeType": "Block",
										"src": "9152:853:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 532,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 526,
																"src": "9170:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9184:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9176:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 533,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9176:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 536,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9176:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9170:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9188:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
																"typeString": "literal_string \"ERC721: mint to the zero address\""
															},
															"value": "ERC721: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
																"typeString": "literal_string \"ERC721: mint to the zero address\""
															}
														],
														"id": 531,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9162:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9162:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 540,
												"nodeType": "ExpressionStatement",
												"src": "9162:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "9241:17:0",
															"subExpression": {
																"arguments": [
																	{
																		"id": 543,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "9250:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 542,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "9242:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 544,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9242:16:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
															"id": 546,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9260:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															},
															"value": "ERC721: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															}
														],
														"id": 541,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9233:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9233:58:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 548,
												"nodeType": "ExpressionStatement",
												"src": "9233:58:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 552,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9331:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 551,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9323:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 550,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9323:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 553,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9323:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 554,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "9335:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 555,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9339:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 549,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 889,
														"src": "9302:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9302:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 557,
												"nodeType": "ExpressionStatement",
												"src": "9302:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "9442:17:0",
															"subExpression": {
																"arguments": [
																	{
																		"id": 560,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "9451:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 559,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "9443:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9443:16:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9461:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															},
															"value": "ERC721: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															}
														],
														"id": 558,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9434:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9434:58:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "9434:58:0"
											},
											{
												"id": 572,
												"nodeType": "UncheckedBlock",
												"src": "9503:360:0",
												"statements": [
													{
														"expression": {
															"id": 570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 566,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "9834:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 568,
																"indexExpression": {
																	"id": 567,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 526,
																	"src": "9844:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9834:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 569,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9851:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "9834:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 571,
														"nodeType": "ExpressionStatement",
														"src": "9834:18:0"
													}
												]
											},
											{
												"expression": {
													"id": 577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 573,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "9873:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 575,
														"indexExpression": {
															"id": 574,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9881:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9873:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 576,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 526,
														"src": "9892:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9873:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 578,
												"nodeType": "ExpressionStatement",
												"src": "9873:21:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 582,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9927:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9919:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 580,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9919:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9919:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 584,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "9931:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 585,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9935:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 579,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 970,
														"src": "9910:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 586,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9910:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 587,
												"nodeType": "EmitStatement",
												"src": "9905:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9982:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 590,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9974:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 589,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9974:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9974:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 593,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "9986:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 594,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9990:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 588,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 900,
														"src": "9954:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9954:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 596,
												"nodeType": "ExpressionStatement",
												"src": "9954:44:0"
											}
										]
									},
									"documentation": {
										"id": 524,
										"nodeType": "StructuredDocumentation",
										"src": "8775:311:0",
										"text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
									},
									"id": 598,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9100:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9114:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "9106:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9106:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9126:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "9118:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 527,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9118:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9105:29:0"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9152:0:0"
									},
									"scope": 955,
									"src": "9091:914:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 662,
										"nodeType": "Block",
										"src": "10380:707:0",
										"statements": [
											{
												"assignments": [
													605
												],
												"declarations": [
													{
														"constant": false,
														"id": 605,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "10398:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 662,
														"src": "10390:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 604,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10390:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 610,
												"initialValue": {
													"arguments": [
														{
															"id": 608,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "10421:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 606,
															"name": "ERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 955,
															"src": "10406:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721_$955_$",
																"typeString": "type(contract ERC721)"
															}
														},
														"id": 607,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "10406:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10406:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10390:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 612,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "10461:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 615,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10476:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 614,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10468:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 613,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10468:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10468:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "10480:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 611,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 889,
														"src": "10440:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10440:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 619,
												"nodeType": "ExpressionStatement",
												"src": "10440:48:0"
											},
											{
												"expression": {
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 620,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 605,
														"src": "10590:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 623,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 601,
																"src": "10613:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 621,
																"name": "ERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 955,
																"src": "10598:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ERC721_$955_$",
																	"typeString": "type(contract ERC721)"
																}
															},
															"id": 622,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "ownerOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 145,
															"src": "10598:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view returns (address)"
															}
														},
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10598:23:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10590:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 626,
												"nodeType": "ExpressionStatement",
												"src": "10590:31:0"
											},
											{
												"expression": {
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "10659:31:0",
													"subExpression": {
														"baseExpression": {
															"id": 627,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "10666:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 629,
														"indexExpression": {
															"id": 628,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "10682:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10666:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 631,
												"nodeType": "ExpressionStatement",
												"src": "10659:31:0"
											},
											{
												"id": 638,
												"nodeType": "UncheckedBlock",
												"src": "10701:237:0",
												"statements": [
													{
														"expression": {
															"id": 636,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 632,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "10906:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 634,
																"indexExpression": {
																	"id": 633,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 605,
																	"src": "10916:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10906:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 635,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10926:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10906:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 637,
														"nodeType": "ExpressionStatement",
														"src": "10906:21:0"
													}
												]
											},
											{
												"expression": {
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "10947:23:0",
													"subExpression": {
														"baseExpression": {
															"id": 639,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "10954:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 641,
														"indexExpression": {
															"id": 640,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "10962:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10954:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 643,
												"nodeType": "ExpressionStatement",
												"src": "10947:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 645,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "10995:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 648,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11010:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11002:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 646,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11002:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11002:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 650,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "11014:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 644,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 970,
														"src": "10986:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 651,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10986:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 652,
												"nodeType": "EmitStatement",
												"src": "10981:41:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 654,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "11053:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11068:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 656,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11060:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 655,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11060:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11060:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 659,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "11072:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 653,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 900,
														"src": "11033:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11033:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 661,
												"nodeType": "ExpressionStatement",
												"src": "11033:47:0"
											}
										]
									},
									"documentation": {
										"id": 599,
										"nodeType": "StructuredDocumentation",
										"src": "10011:315:0",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 663,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "10340:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10354:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "10346:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 600,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10346:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10345:17:0"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10380:0:0"
									},
									"scope": 955,
									"src": "10331:756:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 745,
										"nodeType": "Block",
										"src": "11520:1118:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 676,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 670,
																		"src": "11553:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 674,
																		"name": "ERC721",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 955,
																		"src": "11538:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ERC721_$955_$",
																			"typeString": "type(contract ERC721)"
																		}
																	},
																	"id": 675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 145,
																	"src": "11538:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 677,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11538:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 678,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 666,
																"src": "11565:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11538:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
															"id": 680,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11571:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															},
															"value": "ERC721: transfer from incorrect owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															}
														],
														"id": 673,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11530:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11530:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 682,
												"nodeType": "ExpressionStatement",
												"src": "11530:81:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 684,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 668,
																"src": "11629:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11643:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11635:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 685,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11635:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11635:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11629:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11647:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																"typeString": "literal_string \"ERC721: transfer to the zero address\""
															},
															"value": "ERC721: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																"typeString": "literal_string \"ERC721: transfer to the zero address\""
															}
														],
														"id": 683,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11621:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11621:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "11621:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 694,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "11718:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 695,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 668,
															"src": "11724:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 696,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "11728:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 693,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 889,
														"src": "11697:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11697:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 698,
												"nodeType": "ExpressionStatement",
												"src": "11697:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 702,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 670,
																		"src": "11851:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 700,
																		"name": "ERC721",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 955,
																		"src": "11836:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ERC721_$955_$",
																			"typeString": "type(contract ERC721)"
																		}
																	},
																	"id": 701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 145,
																	"src": "11836:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 703,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11836:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 704,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 666,
																"src": "11863:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11836:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11869:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															},
															"value": "ERC721: transfer from incorrect owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															}
														],
														"id": 699,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11828:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11828:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 708,
												"nodeType": "ExpressionStatement",
												"src": "11828:81:0"
											},
											{
												"expression": {
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11971:31:0",
													"subExpression": {
														"baseExpression": {
															"id": 709,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "11978:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 711,
														"indexExpression": {
															"id": 710,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "11994:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11978:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 713,
												"nodeType": "ExpressionStatement",
												"src": "11971:31:0"
											},
											{
												"id": 726,
												"nodeType": "UncheckedBlock",
												"src": "12013:496:0",
												"statements": [
													{
														"expression": {
															"id": 718,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 714,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "12446:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 716,
																"indexExpression": {
																	"id": 715,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 666,
																	"src": "12456:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "12446:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 717,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12465:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "12446:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 719,
														"nodeType": "ExpressionStatement",
														"src": "12446:20:0"
													},
													{
														"expression": {
															"id": 724,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 720,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "12480:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 722,
																"indexExpression": {
																	"id": 721,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 668,
																	"src": "12490:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "12480:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 723,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12497:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "12480:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 725,
														"nodeType": "ExpressionStatement",
														"src": "12480:18:0"
													}
												]
											},
											{
												"expression": {
													"id": 731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 727,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "12518:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 729,
														"indexExpression": {
															"id": 728,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "12526:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12518:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 730,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 668,
														"src": "12537:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12518:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 732,
												"nodeType": "ExpressionStatement",
												"src": "12518:21:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 734,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "12564:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 735,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 668,
															"src": "12570:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 736,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "12574:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 733,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 970,
														"src": "12555:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12555:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 738,
												"nodeType": "EmitStatement",
												"src": "12550:32:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 740,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "12613:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 741,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 668,
															"src": "12619:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 742,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "12623:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 739,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 900,
														"src": "12593:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12593:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 744,
												"nodeType": "ExpressionStatement",
												"src": "12593:38:0"
											}
										]
									},
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "11093:313:0",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 746,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "11420:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "11447:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "11439:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 665,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11439:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 668,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11469:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "11461:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 667,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "11489:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "11481:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11481:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11429:73:0"
									},
									"returnParameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11520:0:0"
									},
									"scope": 955,
									"src": "11411:1227:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 769,
										"nodeType": "Block",
										"src": "12814:107:0",
										"statements": [
											{
												"expression": {
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 754,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "12824:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 756,
														"indexExpression": {
															"id": 755,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "12840:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12824:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 757,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 749,
														"src": "12851:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12824:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 759,
												"nodeType": "ExpressionStatement",
												"src": "12824:29:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 763,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 751,
																	"src": "12892:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 761,
																	"name": "ERC721",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 955,
																	"src": "12877:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ERC721_$955_$",
																		"typeString": "type(contract ERC721)"
																	}
																},
																"id": 762,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "ownerOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 145,
																"src": "12877:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																	"typeString": "function (uint256) view returns (address)"
																}
															},
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12877:23:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 765,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "12902:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 766,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "12906:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 760,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 979,
														"src": "12868:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12868:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 768,
												"nodeType": "EmitStatement",
												"src": "12863:51:0"
											}
										]
									},
									"documentation": {
										"id": 747,
										"nodeType": "StructuredDocumentation",
										"src": "12644:101:0",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."
									},
									"id": 770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "12759:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12776:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "12768:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12768:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "12788:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "12780:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12780:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12767:29:0"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12814:0:0"
									},
									"scope": 955,
									"src": "12750:171:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 801,
										"nodeType": "Block",
										"src": "13180:184:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 783,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 781,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 773,
																"src": "13198:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 782,
																"name": "operator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 775,
																"src": "13207:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "13198:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
															"id": 784,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13217:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																"typeString": "literal_string \"ERC721: approve to caller\""
															},
															"value": "ERC721: approve to caller"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																"typeString": "literal_string \"ERC721: approve to caller\""
															}
														],
														"id": 780,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13190:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 785,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13190:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 786,
												"nodeType": "ExpressionStatement",
												"src": "13190:55:0"
											},
											{
												"expression": {
													"id": 793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 787,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "13255:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 790,
															"indexExpression": {
																"id": 788,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 773,
																"src": "13274:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "13255:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 791,
														"indexExpression": {
															"id": 789,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "13281:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13255:35:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 792,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "13293:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "13255:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 794,
												"nodeType": "ExpressionStatement",
												"src": "13255:46:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 796,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "13331:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 797,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "13338:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 798,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "13348:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 795,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 988,
														"src": "13316:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13316:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 800,
												"nodeType": "EmitStatement",
												"src": "13311:46:0"
											}
										]
									},
									"documentation": {
										"id": 771,
										"nodeType": "StructuredDocumentation",
										"src": "12927:125:0",
										"text": " @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."
									},
									"id": 802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setApprovalForAll",
									"nameLocation": "13066:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "13102:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "13094:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 772,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13094:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "13125:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "13117:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13117:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "13148:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "13143:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 776,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13143:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13084:78:0"
									},
									"returnParameters": {
										"id": 779,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13180:0:0"
									},
									"scope": 955,
									"src": "13057:307:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 815,
										"nodeType": "Block",
										"src": "13511:70:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 810,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 805,
																	"src": "13537:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 809,
																"name": "_exists",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "13529:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view returns (bool)"
																}
															},
															"id": 811,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13529:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
															"id": 812,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13547:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															},
															"value": "ERC721: invalid token ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															}
														],
														"id": 808,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13521:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13521:53:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 814,
												"nodeType": "ExpressionStatement",
												"src": "13521:53:0"
											}
										]
									},
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "13370:73:0",
										"text": " @dev Reverts if the `tokenId` has not been minted yet."
									},
									"id": 816,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireMinted",
									"nameLocation": "13457:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13480:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "13472:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 804,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13472:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13471:17:0"
									},
									"returnParameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13511:0:0"
									},
									"scope": 955,
									"src": "13448:133:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 877,
										"nodeType": "Block",
										"src": "14288:676:0",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 830,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 821,
															"src": "14302:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 831,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "isContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1134,
														"src": "14302:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14302:15:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 875,
													"nodeType": "Block",
													"src": "14922:36:0",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 873,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14943:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 829,
															"id": 874,
															"nodeType": "Return",
															"src": "14936:11:0"
														}
													]
												},
												"id": 876,
												"nodeType": "IfStatement",
												"src": "14298:660:0",
												"trueBody": {
													"id": 872,
													"nodeType": "Block",
													"src": "14319:597:0",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 852,
																		"nodeType": "Block",
																		"src": "14433:91:0",
																		"statements": [
																			{
																				"expression": {
																					"commonType": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					},
																					"id": 850,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 846,
																						"name": "retval",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 844,
																						"src": "14458:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"expression": {
																							"expression": {
																								"id": 847,
																								"name": "IERC721Receiver",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1089,
																								"src": "14468:15:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1089_$",
																									"typeString": "type(contract IERC721Receiver)"
																								}
																							},
																							"id": 848,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "onERC721Received",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1088,
																							"src": "14468:32:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
																								"typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
																							}
																						},
																						"id": 849,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberName": "selector",
																						"nodeType": "MemberAccess",
																						"src": "14468:41:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"src": "14458:51:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"functionReturnParameters": 829,
																				"id": 851,
																				"nodeType": "Return",
																				"src": "14451:58:0"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 853,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 845,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 844,
																				"mutability": "mutable",
																				"name": "retval",
																				"nameLocation": "14425:6:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 853,
																				"src": "14418:13:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				"typeName": {
																					"id": 843,
																					"name": "bytes4",
																					"nodeType": "ElementaryTypeName",
																					"src": "14418:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "14417:15:0"
																	},
																	"src": "14409:115:0"
																},
																{
																	"block": {
																		"id": 869,
																		"nodeType": "Block",
																		"src": "14553:353:0",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 860,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 857,
																							"name": "reason",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 855,
																							"src": "14575:6:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 858,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "length",
																						"nodeType": "MemberAccess",
																						"src": "14575:13:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"hexValue": "30",
																						"id": 859,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14592:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					},
																					"src": "14575:18:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"falseBody": {
																					"id": 867,
																					"nodeType": "Block",
																					"src": "14702:190:0",
																					"statements": [
																						{
																							"AST": {
																								"nodeType": "YulBlock",
																								"src": "14788:86:0",
																								"statements": [
																									{
																										"expression": {
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nodeType": "YulLiteral",
																															"src": "14825:2:0",
																															"type": "",
																															"value": "32"
																														},
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "14829:6:0"
																														}
																													],
																													"functionName": {
																														"name": "add",
																														"nodeType": "YulIdentifier",
																														"src": "14821:3:0"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "14821:15:0"
																												},
																												{
																													"arguments": [
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "14844:6:0"
																														}
																													],
																													"functionName": {
																														"name": "mload",
																														"nodeType": "YulIdentifier",
																														"src": "14838:5:0"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "14838:13:0"
																												}
																											],
																											"functionName": {
																												"name": "revert",
																												"nodeType": "YulIdentifier",
																												"src": "14814:6:0"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "14814:38:0"
																										},
																										"nodeType": "YulExpressionStatement",
																										"src": "14814:38:0"
																									}
																								]
																							},
																							"documentation": "@solidity memory-safe-assembly",
																							"evmVersion": "london",
																							"externalReferences": [
																								{
																									"declaration": 855,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "14829:6:0",
																									"valueSize": 1
																								},
																								{
																									"declaration": 855,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "14844:6:0",
																									"valueSize": 1
																								}
																							],
																							"id": 866,
																							"nodeType": "InlineAssembly",
																							"src": "14779:95:0"
																						}
																					]
																				},
																				"id": 868,
																				"nodeType": "IfStatement",
																				"src": "14571:321:0",
																				"trueBody": {
																					"id": 865,
																					"nodeType": "Block",
																					"src": "14595:101:0",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
																										"id": 862,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "string",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "14624:52:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																											"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
																										},
																										"value": "ERC721: transfer to non ERC721Receiver implementer"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																											"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
																										}
																									],
																									"id": 861,
																									"name": "revert",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [
																										4294967277,
																										4294967277
																									],
																									"referencedDeclaration": 4294967277,
																									"src": "14617:6:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																										"typeString": "function (string memory) pure"
																									}
																								},
																								"id": 863,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "14617:60:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 864,
																							"nodeType": "ExpressionStatement",
																							"src": "14617:60:0"
																						}
																					]
																				}
																			}
																		]
																	},
																	"errorName": "",
																	"id": 870,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 856,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 855,
																				"mutability": "mutable",
																				"name": "reason",
																				"nameLocation": "14545:6:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 870,
																				"src": "14532:19:0",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes"
																				},
																				"typeName": {
																					"id": 854,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "14532:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_storage_ptr",
																						"typeString": "bytes"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "14531:21:0"
																	},
																	"src": "14525:381:0"
																}
															],
															"externalCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 837,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1458,
																			"src": "14374:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 838,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14374:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 839,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 819,
																		"src": "14388:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 840,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 823,
																		"src": "14394:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 841,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 825,
																		"src": "14403:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 834,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 821,
																				"src": "14353:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 833,
																			"name": "IERC721Receiver",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1089,
																			"src": "14337:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1089_$",
																				"typeString": "type(contract IERC721Receiver)"
																			}
																		},
																		"id": 835,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14337:19:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721Receiver_$1089",
																			"typeString": "contract IERC721Receiver"
																		}
																	},
																	"id": 836,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "onERC721Received",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1088,
																	"src": "14337:36:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																		"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																	}
																},
																"id": 842,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14337:71:0",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"id": 871,
															"nodeType": "TryStatement",
															"src": "14333:573:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 817,
										"nodeType": "StructuredDocumentation",
										"src": "13587:541:0",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 878,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnERC721Received",
									"nameLocation": "14142:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14182:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "14174:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 818,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14174:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 821,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14204:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "14196:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 820,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14196:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14224:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "14216:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 822,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14216:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "14254:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "14241:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 824,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14241:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14164:100:0"
									},
									"returnParameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "14282:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 827,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14282:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14281:6:0"
									},
									"scope": 955,
									"src": "14133:831:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 888,
										"nodeType": "Block",
										"src": "15688:2:0",
										"statements": []
									},
									"documentation": {
										"id": 879,
										"nodeType": "StructuredDocumentation",
										"src": "14970:593:0",
										"text": " @dev Hook that is called before any (single) token transfer. This includes minting and burning.\n See {_beforeConsecutiveTokenTransfer}.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "15577:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "15615:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "15607:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15607:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 883,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15637:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "15629:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 882,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15629:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "15657:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "15649:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 884,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15649:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15597:73:0"
									},
									"returnParameters": {
										"id": 887,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15688:0:0"
									},
									"scope": 955,
									"src": "15568:122:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 899,
										"nodeType": "Block",
										"src": "16228:2:0",
										"statements": []
									},
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "15696:408:0",
										"text": " @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\n See {_afterConsecutiveTokenTransfer}.\n Calling conditions:\n - when `from` and `to` are both non-zero.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 900,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "16118:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "16155:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "16147:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16177:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "16169:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16169:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16197:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "16189:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16189:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16137:73:0"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16228:0:0"
									},
									"scope": 955,
									"src": "16109:121:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 940,
										"nodeType": "Block",
										"src": "16609:165:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 912,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "16623:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 915,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16639:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 914,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "16631:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 913,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "16631:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 916,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16631:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "16623:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 925,
												"nodeType": "IfStatement",
												"src": "16619:72:0",
												"trueBody": {
													"id": 924,
													"nodeType": "Block",
													"src": "16643:48:0",
													"statements": [
														{
															"expression": {
																"id": 922,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 918,
																		"name": "_balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 35,
																		"src": "16657:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 920,
																	"indexExpression": {
																		"id": 919,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 903,
																		"src": "16667:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "16657:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"id": 921,
																	"name": "size",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 909,
																	"src": "16676:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint96",
																		"typeString": "uint96"
																	}
																},
																"src": "16657:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 923,
															"nodeType": "ExpressionStatement",
															"src": "16657:23:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 926,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "16704:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 929,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16718:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 928,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "16710:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 927,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "16710:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 930,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16710:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "16704:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 939,
												"nodeType": "IfStatement",
												"src": "16700:68:0",
												"trueBody": {
													"id": 938,
													"nodeType": "Block",
													"src": "16722:46:0",
													"statements": [
														{
															"expression": {
																"id": 936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 932,
																		"name": "_balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 35,
																		"src": "16736:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 934,
																	"indexExpression": {
																		"id": 933,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 905,
																		"src": "16746:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "16736:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 935,
																	"name": "size",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 909,
																	"src": "16753:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint96",
																		"typeString": "uint96"
																	}
																},
																"src": "16736:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 937,
															"nodeType": "ExpressionStatement",
															"src": "16736:21:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 901,
										"nodeType": "StructuredDocumentation",
										"src": "16236:214:0",
										"text": " @dev Hook that is called before \"consecutive token transfers\" as defined in ERC2309 and implemented in\n {ERC721Consecutive}.\n Calling conditions are similar to {_beforeTokenTransfer}."
									},
									"id": 941,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeConsecutiveTokenTransfer",
									"nameLocation": "16464:31:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "16513:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "16505:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16505:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16535:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "16527:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16527:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "16547:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 906,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16547:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "size",
												"nameLocation": "16581:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "16574:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 908,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "16574:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16495:96:0"
									},
									"returnParameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16609:0:0"
									},
									"scope": 955,
									"src": "16455:319:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 953,
										"nodeType": "Block",
										"src": "17162:2:0",
										"statements": []
									},
									"documentation": {
										"id": 942,
										"nodeType": "StructuredDocumentation",
										"src": "16780:212:0",
										"text": " @dev Hook that is called after \"consecutive token transfers\" as defined in ERC2309 and implemented in\n {ERC721Consecutive}.\n Calling conditions are similar to {_afterTokenTransfer}."
									},
									"id": 954,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterConsecutiveTokenTransfer",
									"nameLocation": "17006:30:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "17046:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 943,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17046:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "17072:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 945,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17072:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "17096:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 947,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17096:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "17123:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 949,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "17123:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17036:108:0"
									},
									"returnParameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17162:0:0"
									},
									"scope": 955,
									"src": "16997:167:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 956,
							"src": "628:16538:0",
							"usedErrors": []
						}
					],
					"src": "107:17060:0"
				},
				"id": 0
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							1679
						],
						"IERC721": [
							1071
						]
					},
					"id": 1072,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 957,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 958,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1072,
							"sourceUnit": 1680,
							"src": "133:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 960,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1679,
										"src": "271:7:1"
									},
									"id": 961,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 959,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 1071,
							"linearizedBaseContracts": [
								1071,
								1679
							],
							"name": "IERC721",
							"nameLocation": "260:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 962,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 970,
									"name": "Transfer",
									"nameLocation": "384:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "393:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "415:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 965,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 968,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "435:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:1"
									},
									"src": "378:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 971,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 979,
									"name": "Approval",
									"nameLocation": "571:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "580:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 975,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "603:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 977,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "629:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 976,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:1"
									},
									"src": "565:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 980,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 988,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "803:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 981,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 984,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "826:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 983,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "852:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 985,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:1"
									},
									"src": "782:85:1"
								},
								{
									"documentation": {
										"id": 989,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 996,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "973:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:1"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "1011:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 993,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:1"
									},
									"scope": 1071,
									"src": "954:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 1004,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "1187:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 998,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:1"
									},
									"returnParameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "1227:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1001,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:1"
									},
									"scope": 1071,
									"src": "1170:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1005,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 1016,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "1844:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "1866:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1008,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "1886:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "1911:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1012,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:1"
									},
									"returnParameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:1"
									},
									"scope": 1071,
									"src": "1809:137:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1017,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 1026,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "2679:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "2701:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1020,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "2721:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:1"
									},
									"returnParameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:1"
									},
									"scope": 1071,
									"src": "2644:108:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1027,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1036,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "3526:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "3548:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1030,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "3568:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:1"
									},
									"returnParameters": {
										"id": 1035,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:1"
									},
									"scope": 1071,
									"src": "3495:104:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1037,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1044,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "4079:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "4091:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:1"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:1"
									},
									"scope": 1071,
									"src": "4062:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1045,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1052,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "4464:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1046,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "4482:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1048,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:1"
									},
									"returnParameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:1"
									},
									"scope": 1071,
									"src": "4437:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1053,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1060,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "4678:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1054,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:1"
									},
									"returnParameters": {
										"id": 1059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1058,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "4718:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1057,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:1"
									},
									"scope": 1071,
									"src": "4657:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1061,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1070,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 1070,
												"src": "4911:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1062,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1070,
												"src": "4926:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1064,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:1"
									},
									"returnParameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1070,
												"src": "4967:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1067,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:1"
									},
									"scope": 1071,
									"src": "4885:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1072,
							"src": "250:4725:1",
							"usedErrors": []
						}
					],
					"src": "108:4868:1"
				},
				"id": 1
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							1089
						]
					},
					"id": 1090,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1073,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1074,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:2",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 1089,
							"linearizedBaseContracts": [
								1089
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1075,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:2",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 1088,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "859:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1076,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1079,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "885:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1078,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1081,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "907:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1080,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "932:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1082,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:2"
									},
									"returnParameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "976:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1085,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:2"
									},
									"scope": 1089,
									"src": "824:160:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1090,
							"src": "294:692:2",
							"usedErrors": []
						}
					],
					"src": "116:871:2"
				},
				"id": 2
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							1679
						],
						"IERC721": [
							1071
						],
						"IERC721Metadata": [
							1116
						]
					},
					"id": 1117,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1091,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:3"
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 1092,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1117,
							"sourceUnit": 1072,
							"src": "137:24:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1094,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1071,
										"src": "326:7:3"
									},
									"id": 1095,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1093,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:3",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1116,
							"linearizedBaseContracts": [
								1116,
								1071,
								1679
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1096,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:3",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:3"
									},
									"returnParameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "442:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1098,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:3"
									},
									"scope": 1116,
									"src": "403:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1102,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:3",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1107,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:3"
									},
									"returnParameters": {
										"id": 1106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "569:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1104,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:3"
									},
									"scope": 1116,
									"src": "528:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1108,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:3",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1115,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1115,
												"src": "703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:3"
									},
									"returnParameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1115,
												"src": "743:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1112,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:3"
									},
									"scope": 1116,
									"src": "685:73:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1117,
							"src": "297:463:3",
							"usedErrors": []
						}
					],
					"src": "112:649:3"
				},
				"id": 3
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							1446
						]
					},
					"id": 1447,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1118,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1119,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1446,
							"linearizedBaseContracts": [
								1446
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1133,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1127,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1122,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1129,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1130,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1126,
												"id": 1132,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 1120,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1134,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1122,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1121,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 1126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1124,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 1446,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1167,
										"nodeType": "Block",
										"src": "2482:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1145,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2508:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1446",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1446",
																				"typeString": "library Address"
																			}
																		],
																		"id": 1144,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2500:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1143,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2500:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1146,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2500:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1147,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2500:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1148,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1139,
																"src": "2525:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2500:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2533:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1142,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2492:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2492:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1152,
												"nodeType": "ExpressionStatement",
												"src": "2492:73:4"
											},
											{
												"assignments": [
													1154,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1154,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2582:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 1167,
														"src": "2577:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1153,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2577:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1161,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1159,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2625:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1155,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1137,
																"src": "2595:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2595:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1158,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1157,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1139,
																"src": "2617:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2595:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2595:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2576:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1163,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1154,
															"src": "2646:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1164,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2655:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1162,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2638:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2638:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1166,
												"nodeType": "ExpressionStatement",
												"src": "2638:78:4"
											}
										]
									},
									"documentation": {
										"id": 1135,
										"nodeType": "StructuredDocumentation",
										"src": "1501:905:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2420:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2446:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "2430:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2430:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2465:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "2457:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2457:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2429:43:4"
									},
									"returnParameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2482:0:4"
									},
									"scope": 1446,
									"src": "2411:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1185,
										"nodeType": "Block",
										"src": "3554:96:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1179,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "3593:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1180,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1173,
															"src": "3601:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1181,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3607:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1182,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3610:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1178,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1226,
															1270
														],
														"referencedDeclaration": 1270,
														"src": "3571:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3571:72:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1177,
												"id": 1184,
												"nodeType": "Return",
												"src": "3564:79:4"
											}
										]
									},
									"documentation": {
										"id": 1169,
										"nodeType": "StructuredDocumentation",
										"src": "2729:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3474:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3495:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "3487:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3487:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3516:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "3503:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1172,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3503:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3486:35:4"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "3540:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1175,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3540:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3539:14:4"
									},
									"scope": 1446,
									"src": "3465:185:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1205,
										"nodeType": "Block",
										"src": "4019:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1199,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1189,
															"src": "4058:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1200,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "4066:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1201,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4072:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1202,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "4075:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1198,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1226,
															1270
														],
														"referencedDeclaration": 1270,
														"src": "4036:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4036:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1197,
												"id": 1204,
												"nodeType": "Return",
												"src": "4029:59:4"
											}
										]
									},
									"documentation": {
										"id": 1187,
										"nodeType": "StructuredDocumentation",
										"src": "3656:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1206,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3881:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3911:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3903:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3903:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3940:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3927:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1190,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3927:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3968:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3954:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1192,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3954:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:93:4"
									},
									"returnParameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "4005:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1195,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4005:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4004:14:4"
									},
									"scope": 1446,
									"src": "3872:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1225,
										"nodeType": "Block",
										"src": "4600:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1219,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1209,
															"src": "4639:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1220,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1211,
															"src": "4647:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1221,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1213,
															"src": "4653:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1222,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4660:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1218,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1226,
															1270
														],
														"referencedDeclaration": 1270,
														"src": "4617:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4617:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1217,
												"id": 1224,
												"nodeType": "Return",
												"src": "4610:94:4"
											}
										]
									},
									"documentation": {
										"id": 1207,
										"nodeType": "StructuredDocumentation",
										"src": "4101:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4466:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4505:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "4497:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4534:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "4521:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1210,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4521:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4556:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "4548:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4548:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4487:80:4"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "4586:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1215,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4586:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4585:14:4"
									},
									"scope": 1446,
									"src": "4457:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1269,
										"nodeType": "Block",
										"src": "5138:267:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1243,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5164:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1446",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1446",
																				"typeString": "library Address"
																			}
																		],
																		"id": 1242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5156:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1241,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5156:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1244,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5156:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5156:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1246,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1233,
																"src": "5181:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5156:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1248,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5188:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1240,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5148:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5148:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1250,
												"nodeType": "ExpressionStatement",
												"src": "5148:81:4"
											},
											{
												"assignments": [
													1252,
													1254
												],
												"declarations": [
													{
														"constant": false,
														"id": 1252,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5245:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "5240:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1251,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5240:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1254,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5267:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "5254:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1253,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5254:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1261,
												"initialValue": {
													"arguments": [
														{
															"id": 1259,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1231,
															"src": "5307:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1255,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1229,
																"src": "5281:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5281:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1258,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1257,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1233,
																"src": "5300:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5281:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5281:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5239:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1263,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1229,
															"src": "5356:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1264,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1252,
															"src": "5364:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1265,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1254,
															"src": "5373:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1266,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1235,
															"src": "5385:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1262,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1401,
														"src": "5329:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5329:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1239,
												"id": 1268,
												"nodeType": "Return",
												"src": "5322:76:4"
											}
										]
									},
									"documentation": {
										"id": 1227,
										"nodeType": "StructuredDocumentation",
										"src": "4717:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1270,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4968:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5007:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "4999:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4999:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5036:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "5023:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1230,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5023:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5058:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "5050:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5050:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5087:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "5073:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1234,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5073:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4989:116:4"
									},
									"returnParameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "5124:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1237,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5124:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5123:14:4"
									},
									"scope": 1446,
									"src": "4959:446:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1286,
										"nodeType": "Block",
										"src": "5682:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1281,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1273,
															"src": "5718:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1282,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "5726:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1283,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5732:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1280,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1287,
															1316
														],
														"referencedDeclaration": 1316,
														"src": "5699:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5699:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1279,
												"id": 1285,
												"nodeType": "Return",
												"src": "5692:80:4"
											}
										]
									},
									"documentation": {
										"id": 1271,
										"nodeType": "StructuredDocumentation",
										"src": "5411:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5591:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5618:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "5610:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5610:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5639:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "5626:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1274,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5626:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5609:35:4"
									},
									"returnParameters": {
										"id": 1279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1278,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "5668:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1277,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5667:14:4"
									},
									"scope": 1446,
									"src": "5582:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1315,
										"nodeType": "Block",
										"src": "6121:168:4",
										"statements": [
											{
												"assignments": [
													1300,
													1302
												],
												"declarations": [
													{
														"constant": false,
														"id": 1300,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6137:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 1315,
														"src": "6132:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1299,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6132:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1302,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6159:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 1315,
														"src": "6146:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1301,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6146:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1307,
												"initialValue": {
													"arguments": [
														{
															"id": 1305,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1292,
															"src": "6191:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1303,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1290,
															"src": "6173:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1304,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6173:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6131:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1309,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1290,
															"src": "6240:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1310,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1300,
															"src": "6248:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1311,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1302,
															"src": "6257:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1312,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1294,
															"src": "6269:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1308,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1401,
														"src": "6213:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6213:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1298,
												"id": 1314,
												"nodeType": "Return",
												"src": "6206:76:4"
											}
										]
									},
									"documentation": {
										"id": 1288,
										"nodeType": "StructuredDocumentation",
										"src": "5785:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1316,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5972:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6008:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1316,
												"src": "6000:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6000:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6037:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1316,
												"src": "6024:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1291,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6024:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1294,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6065:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1316,
												"src": "6051:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1293,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6051:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5990:93:4"
									},
									"returnParameters": {
										"id": 1298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1297,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1316,
												"src": "6107:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1296,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6107:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6106:14:4"
									},
									"scope": 1446,
									"src": "5963:326:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1332,
										"nodeType": "Block",
										"src": "6565:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1327,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1319,
															"src": "6603:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1328,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1321,
															"src": "6611:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 1329,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6617:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 1326,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1333,
															1362
														],
														"referencedDeclaration": 1362,
														"src": "6582:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6582:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1325,
												"id": 1331,
												"nodeType": "Return",
												"src": "6575:84:4"
											}
										]
									},
									"documentation": {
										"id": 1317,
										"nodeType": "StructuredDocumentation",
										"src": "6295:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1333,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6477:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6506:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1333,
												"src": "6498:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6498:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1321,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6527:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1333,
												"src": "6514:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1320,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6514:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6497:35:4"
									},
									"returnParameters": {
										"id": 1325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1333,
												"src": "6551:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1323,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6551:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6550:14:4"
									},
									"scope": 1446,
									"src": "6468:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1361,
										"nodeType": "Block",
										"src": "7007:170:4",
										"statements": [
											{
												"assignments": [
													1346,
													1348
												],
												"declarations": [
													{
														"constant": false,
														"id": 1346,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7023:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 1361,
														"src": "7018:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1345,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7018:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1348,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7045:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 1361,
														"src": "7032:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1347,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7032:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1353,
												"initialValue": {
													"arguments": [
														{
															"id": 1351,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1338,
															"src": "7079:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1349,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1336,
															"src": "7059:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7059:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7059:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7017:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1355,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1336,
															"src": "7128:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1356,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1346,
															"src": "7136:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1357,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1348,
															"src": "7145:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1358,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1340,
															"src": "7157:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1354,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1401,
														"src": "7101:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7101:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1344,
												"id": 1360,
												"nodeType": "Return",
												"src": "7094:76:4"
											}
										]
									},
									"documentation": {
										"id": 1334,
										"nodeType": "StructuredDocumentation",
										"src": "6672:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1362,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6861:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6899:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "6891:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6891:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1338,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6928:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "6915:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1337,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6915:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6956:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "6942:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1339,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6942:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6881:93:4"
									},
									"returnParameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "6993:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1342,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6993:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6992:14:4"
									},
									"scope": 1446,
									"src": "6852:325:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1400,
										"nodeType": "Block",
										"src": "7659:434:4",
										"statements": [
											{
												"condition": {
													"id": 1376,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1367,
													"src": "7673:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1398,
													"nodeType": "Block",
													"src": "8029:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1394,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1369,
																		"src": "8051:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1395,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1371,
																		"src": "8063:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1393,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1445,
																	"src": "8043:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1396,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8043:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1397,
															"nodeType": "ExpressionStatement",
															"src": "8043:33:4"
														}
													]
												},
												"id": 1399,
												"nodeType": "IfStatement",
												"src": "7669:418:4",
												"trueBody": {
													"id": 1392,
													"nodeType": "Block",
													"src": "7682:341:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1380,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1377,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1369,
																		"src": "7700:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7700:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1379,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7721:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7700:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1389,
															"nodeType": "IfStatement",
															"src": "7696:286:4",
															"trueBody": {
																"id": 1388,
																"nodeType": "Block",
																"src": "7724:258:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1383,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1365,
																							"src": "7926:6:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1382,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1134,
																						"src": "7915:10:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1384,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7915:18:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1385,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7935:31:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1381,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7907:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1386,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7907:60:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1387,
																		"nodeType": "ExpressionStatement",
																		"src": "7907:60:4"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1390,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1369,
																"src": "8002:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1375,
															"id": 1391,
															"nodeType": "Return",
															"src": "7995:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1363,
										"nodeType": "StructuredDocumentation",
										"src": "7183:277:4",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1401,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7474:26:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1365,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7518:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "7510:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1364,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7510:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7539:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "7534:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1366,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7534:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1369,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7569:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "7556:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1368,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7556:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7603:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "7589:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1370,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7589:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7500:121:4"
									},
									"returnParameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "7645:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1373,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7645:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7644:14:4"
									},
									"scope": 1446,
									"src": "7465:628:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1424,
										"nodeType": "Block",
										"src": "8474:135:4",
										"statements": [
											{
												"condition": {
													"id": 1413,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1404,
													"src": "8488:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1422,
													"nodeType": "Block",
													"src": "8545:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1418,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1406,
																		"src": "8567:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1419,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1408,
																		"src": "8579:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1417,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1445,
																	"src": "8559:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8559:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1421,
															"nodeType": "ExpressionStatement",
															"src": "8559:33:4"
														}
													]
												},
												"id": 1423,
												"nodeType": "IfStatement",
												"src": "8484:119:4",
												"trueBody": {
													"id": 1416,
													"nodeType": "Block",
													"src": "8497:42:4",
													"statements": [
														{
															"expression": {
																"id": 1414,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1406,
																"src": "8518:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1412,
															"id": 1415,
															"nodeType": "Return",
															"src": "8511:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1402,
										"nodeType": "StructuredDocumentation",
										"src": "8099:210:4",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8323:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8354:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "8349:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1403,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8349:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8384:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "8371:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1405,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8371:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8418:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "8404:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1407,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8404:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8339:97:4"
									},
									"returnParameters": {
										"id": 1412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "8460:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1410,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8460:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8459:14:4"
									},
									"scope": 1446,
									"src": "8314:295:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1444,
										"nodeType": "Block",
										"src": "8698:457:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1432,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1427,
															"src": "8774:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1433,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8774:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1434,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8794:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8774:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1442,
													"nodeType": "Block",
													"src": "9104:45:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1439,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1429,
																		"src": "9125:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1438,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9118:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9118:20:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1441,
															"nodeType": "ExpressionStatement",
															"src": "9118:20:4"
														}
													]
												},
												"id": 1443,
												"nodeType": "IfStatement",
												"src": "8770:379:4",
												"trueBody": {
													"id": 1437,
													"nodeType": "Block",
													"src": "8797:301:4",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8955:133:4",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8973:40:4",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9002:10:4"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8996:5:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8996:17:4"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8977:15:4",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9041:2:4",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9045:10:4"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9037:3:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9037:19:4"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9058:15:4"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9030:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9030:44:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9030:44:4"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 1427,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9002:10:4",
																	"valueSize": 1
																},
																{
																	"declaration": 1427,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9045:10:4",
																	"valueSize": 1
																}
															],
															"id": 1436,
															"nodeType": "InlineAssembly",
															"src": "8946:142:4"
														}
													]
												}
											}
										]
									},
									"id": 1445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8624:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1427,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8645:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "8632:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1426,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8632:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1429,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8671:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "8657:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1428,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8657:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8631:53:4"
									},
									"returnParameters": {
										"id": 1431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8698:0:4"
									},
									"scope": 1446,
									"src": "8615:540:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1447,
							"src": "194:8963:4",
							"usedErrors": []
						}
					],
					"src": "101:9057:4"
				},
				"id": 4
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1468
						]
					},
					"id": 1469,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1448,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1449,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1468,
							"linearizedBaseContracts": [
								1468
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1457,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1454,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1453,
												"id": 1456,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 1458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 1453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1458,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 1468,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1466,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1463,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1462,
												"id": 1465,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 1467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1467,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1460,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 1468,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1469,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							2544
						],
						"Strings": [
							1643
						]
					},
					"id": 1644,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1470,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:6"
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1471,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1644,
							"sourceUnit": 2545,
							"src": "126:25:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1472,
								"nodeType": "StructuredDocumentation",
								"src": "153:34:6",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1643,
							"linearizedBaseContracts": [
								1643
							],
							"name": "Strings",
							"nameLocation": "196:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1475,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "235:8:6",
									"nodeType": "VariableDeclaration",
									"scope": 1643,
									"src": "210:54:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1473,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "210:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1474,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:18:6",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1478,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "293:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 1643,
									"src": "270:43:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1476,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "270:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1477,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1525,
										"nodeType": "Block",
										"src": "486:625:6",
										"statements": [
											{
												"id": 1524,
												"nodeType": "UncheckedBlock",
												"src": "496:609:6",
												"statements": [
													{
														"assignments": [
															1487
														],
														"declarations": [
															{
																"constant": false,
																"id": 1487,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "528:6:6",
																"nodeType": "VariableDeclaration",
																"scope": 1524,
																"src": "520:14:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1486,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "520:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1494,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1490,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1481,
																		"src": "548:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1488,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2544,
																		"src": "537:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$2544_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1489,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2381,
																	"src": "537:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "537:17:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1492,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "557:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "537:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "520:38:6"
													},
													{
														"assignments": [
															1496
														],
														"declarations": [
															{
																"constant": false,
																"id": 1496,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "586:6:6",
																"nodeType": "VariableDeclaration",
																"scope": 1524,
																"src": "572:20:6",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1495,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "572:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1501,
														"initialValue": {
															"arguments": [
																{
																	"id": 1499,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1487,
																	"src": "606:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1498,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "595:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1497,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "599:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "595:18:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "572:41:6"
													},
													{
														"assignments": [
															1503
														],
														"declarations": [
															{
																"constant": false,
																"id": 1503,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "635:3:6",
																"nodeType": "VariableDeclaration",
																"scope": 1524,
																"src": "627:11:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1502,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "627:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1504,
														"nodeType": "VariableDeclarationStatement",
														"src": "627:11:6"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "708:67:6",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "726:35:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "749:2:6",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "753:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "745:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "745:15:6"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "733:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "733:28:6"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "726:3:6"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1496,
																"isOffset": false,
																"isSlot": false,
																"src": "737:6:6",
																"valueSize": 1
															},
															{
																"declaration": 1487,
																"isOffset": false,
																"isSlot": false,
																"src": "753:6:6",
																"valueSize": 1
															},
															{
																"declaration": 1503,
																"isOffset": false,
																"isSlot": false,
																"src": "726:3:6",
																"valueSize": 1
															}
														],
														"id": 1505,
														"nodeType": "InlineAssembly",
														"src": "699:76:6"
													},
													{
														"body": {
															"id": 1520,
															"nodeType": "Block",
															"src": "801:267:6",
															"statements": [
																{
																	"expression": {
																		"id": 1508,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "819:5:6",
																		"subExpression": {
																			"id": 1507,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1503,
																			"src": "819:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1509,
																	"nodeType": "ExpressionStatement",
																	"src": "819:5:6"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "902:84:6",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "932:3:6"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "946:5:6"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "953:2:6",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "942:3:6"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "942:14:6"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "958:8:6"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "937:4:6"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "937:30:6"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "924:7:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "924:44:6"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "924:44:6"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "london",
																	"externalReferences": [
																		{
																			"declaration": 1475,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "958:8:6",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1503,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "932:3:6",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1481,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "946:5:6",
																			"valueSize": 1
																		}
																	],
																	"id": 1510,
																	"nodeType": "InlineAssembly",
																	"src": "893:93:6"
																},
																{
																	"expression": {
																		"id": 1513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1511,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1481,
																			"src": "1003:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1512,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1012:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1003:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1514,
																	"nodeType": "ExpressionStatement",
																	"src": "1003:11:6"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1517,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1515,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1481,
																			"src": "1036:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1516,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1045:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1036:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1519,
																	"nodeType": "IfStatement",
																	"src": "1032:21:6",
																	"trueBody": {
																		"id": 1518,
																		"nodeType": "Break",
																		"src": "1048:5:6"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1506,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "795:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1521,
														"nodeType": "WhileStatement",
														"src": "788:280:6"
													},
													{
														"expression": {
															"id": 1522,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1496,
															"src": "1088:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1485,
														"id": 1523,
														"nodeType": "Return",
														"src": "1081:13:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1479,
										"nodeType": "StructuredDocumentation",
										"src": "320:90:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1526,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "424:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1481,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "441:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "433:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "432:15:6"
									},
									"returnParameters": {
										"id": 1485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1484,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "471:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1483,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "471:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:15:6"
									},
									"scope": 1643,
									"src": "415:696:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1545,
										"nodeType": "Block",
										"src": "1290:100:6",
										"statements": [
											{
												"id": 1544,
												"nodeType": "UncheckedBlock",
												"src": "1300:84:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1535,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1529,
																	"src": "1343:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1541,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1538,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1529,
																				"src": "1362:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1536,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2544,
																				"src": "1350:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$2544_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1537,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2504,
																			"src": "1350:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1350:18:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1371:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1350:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1534,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1546,
																	1622,
																	1642
																],
																"referencedDeclaration": 1622,
																"src": "1331:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1542,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1331:42:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1533,
														"id": 1543,
														"nodeType": "Return",
														"src": "1324:49:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1527,
										"nodeType": "StructuredDocumentation",
										"src": "1117:94:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1225:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1245:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1546,
												"src": "1237:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:15:6"
									},
									"returnParameters": {
										"id": 1533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1546,
												"src": "1275:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1531,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1275:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:15:6"
									},
									"scope": 1643,
									"src": "1216:174:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1621,
										"nodeType": "Block",
										"src": "1603:347:6",
										"statements": [
											{
												"assignments": [
													1557
												],
												"declarations": [
													{
														"constant": false,
														"id": 1557,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1626:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1621,
														"src": "1613:19:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1556,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1613:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1566,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1564,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1562,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1560,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1645:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1561,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1551,
																	"src": "1649:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1645:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1563,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1658:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1645:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1559,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1635:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1558,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1639:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1635:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1613:47:6"
											},
											{
												"expression": {
													"id": 1571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1567,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1557,
															"src": "1670:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1569,
														"indexExpression": {
															"hexValue": "30",
															"id": 1568,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1677:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1670:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1570,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1682:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1670:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1572,
												"nodeType": "ExpressionStatement",
												"src": "1670:15:6"
											},
											{
												"expression": {
													"id": 1577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1573,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1557,
															"src": "1695:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1575,
														"indexExpression": {
															"hexValue": "31",
															"id": 1574,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1702:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1695:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1576,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1707:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1695:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1578,
												"nodeType": "ExpressionStatement",
												"src": "1695:15:6"
											},
											{
												"body": {
													"id": 1607,
													"nodeType": "Block",
													"src": "1765:83:6",
													"statements": [
														{
															"expression": {
																"id": 1601,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1593,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1557,
																		"src": "1779:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1595,
																	"indexExpression": {
																		"id": 1594,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1580,
																		"src": "1786:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1779:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1596,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1475,
																		"src": "1791:8:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1600,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1597,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "1800:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1598,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1808:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1800:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1791:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1779:33:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1602,
															"nodeType": "ExpressionStatement",
															"src": "1779:33:6"
														},
														{
															"expression": {
																"id": 1605,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1603,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1549,
																	"src": "1826:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1836:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1826:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1606,
															"nodeType": "ExpressionStatement",
															"src": "1826:11:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1587,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1580,
														"src": "1753:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1588,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1753:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1608,
												"initializationExpression": {
													"assignments": [
														1580
													],
													"declarations": [
														{
															"constant": false,
															"id": 1580,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1733:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 1608,
															"src": "1725:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1579,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1725:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1586,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1585,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1737:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1582,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1551,
																"src": "1741:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1737:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1750:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1737:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1725:26:6"
												},
												"loopExpression": {
													"expression": {
														"id": 1591,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1760:3:6",
														"subExpression": {
															"id": 1590,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1580,
															"src": "1762:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1592,
													"nodeType": "ExpressionStatement",
													"src": "1760:3:6"
												},
												"nodeType": "ForStatement",
												"src": "1720:128:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1612,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1610,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1549,
																"src": "1865:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1611,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1874:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1865:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1613,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1877:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1609,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1857:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1857:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1615,
												"nodeType": "ExpressionStatement",
												"src": "1857:55:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1618,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1557,
															"src": "1936:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1617,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1929:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1616,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1929:6:6",
															"typeDescriptions": {}
														}
													},
													"id": 1619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:14:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1555,
												"id": 1620,
												"nodeType": "Return",
												"src": "1922:21:6"
											}
										]
									},
									"documentation": {
										"id": 1547,
										"nodeType": "StructuredDocumentation",
										"src": "1396:112:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1522:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1549,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1542:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "1534:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1534:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1557:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "1549:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1549:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1533:31:6"
									},
									"returnParameters": {
										"id": 1555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1554,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "1588:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1553,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1588:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1587:15:6"
									},
									"scope": 1643,
									"src": "1513:437:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1641,
										"nodeType": "Block",
										"src": "2175:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1635,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1625,
																			"src": "2220:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1634,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2212:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1633,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2212:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1636,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2212:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1632,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2204:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1631,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2204:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2204:22:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1638,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1478,
															"src": "2228:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1630,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1546,
															1622,
															1642
														],
														"referencedDeclaration": 1622,
														"src": "2192:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2192:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1629,
												"id": 1640,
												"nodeType": "Return",
												"src": "2185:59:6"
											}
										]
									},
									"documentation": {
										"id": 1623,
										"nodeType": "StructuredDocumentation",
										"src": "1956:141:6",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 1642,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2111:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1625,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2131:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1642,
												"src": "2123:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2123:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2122:14:6"
									},
									"returnParameters": {
										"id": 1629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1642,
												"src": "2160:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1627,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2160:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2159:15:6"
									},
									"scope": 1643,
									"src": "2102:149:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1644,
							"src": "188:2065:6",
							"usedErrors": []
						}
					],
					"src": "101:2153:6"
				},
				"id": 6
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							1667
						],
						"IERC165": [
							1679
						]
					},
					"id": 1668,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1645,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:7"
						},
						{
							"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 1646,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1668,
							"sourceUnit": 1680,
							"src": "124:23:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1648,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1679,
										"src": "754:7:7"
									},
									"id": 1649,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:7"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1647,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:7",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 1667,
							"linearizedBaseContracts": [
								1667,
								1679
							],
							"name": "ERC165",
							"nameLocation": "744:6:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1678
									],
									"body": {
										"id": 1665,
										"nodeType": "Block",
										"src": "920:64:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 1663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1658,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1652,
														"src": "937:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1660,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1679,
																	"src": "957:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1679_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1679_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 1659,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1661,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$1679",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 1662,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1657,
												"id": 1664,
												"nodeType": "Return",
												"src": "930:47:7"
											}
										]
									},
									"documentation": {
										"id": 1650,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:7",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1654,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:7"
									},
									"parameters": {
										"id": 1653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1652,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "856:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1651,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:7"
									},
									"returnParameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1656,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "914:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1655,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:7"
									},
									"scope": 1667,
									"src": "829:155:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1668,
							"src": "726:260:7",
							"usedErrors": []
						}
					],
					"src": "99:888:7"
				},
				"id": 7
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1679
						]
					},
					"id": 1680,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1669,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1670,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1679,
							"linearizedBaseContracts": [
								1679
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1671,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1678,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1673,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1672,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1675,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 1679,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1680,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": ".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							2544
						]
					},
					"id": 2545,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1681,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1682,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:9",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2544,
							"linearizedBaseContracts": [
								2544
							],
							"name": "Math",
							"nameLocation": "210:4:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 1686,
									"members": [
										{
											"id": 1683,
											"name": "Down",
											"nameLocation": "245:4:9",
											"nodeType": "EnumValue",
											"src": "245:4:9"
										},
										{
											"id": 1684,
											"name": "Up",
											"nameLocation": "287:2:9",
											"nodeType": "EnumValue",
											"src": "287:2:9"
										},
										{
											"id": 1685,
											"name": "Zero",
											"nameLocation": "318:4:9",
											"nodeType": "EnumValue",
											"src": "318:4:9"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:9",
									"nodeType": "EnumDefinition",
									"src": "221:122:9"
								},
								{
									"body": {
										"id": 1703,
										"nodeType": "Block",
										"src": "480:37:9",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1696,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1689,
															"src": "497:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1697,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1691,
															"src": "501:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1700,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1691,
														"src": "509:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1701,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:9",
													"trueExpression": {
														"id": 1699,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1689,
														"src": "505:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1695,
												"id": 1702,
												"nodeType": "Return",
												"src": "490:20:9"
											}
										]
									},
									"documentation": {
										"id": 1687,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:9",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 1704,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "426:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "437:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:9"
									},
									"returnParameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "471:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:9"
									},
									"scope": 2544,
									"src": "413:104:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1721,
										"nodeType": "Block",
										"src": "655:37:9",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1716,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1714,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1707,
															"src": "672:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1715,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1709,
															"src": "676:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1718,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1709,
														"src": "684:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:9",
													"trueExpression": {
														"id": 1717,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1707,
														"src": "680:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1713,
												"id": 1720,
												"nodeType": "Return",
												"src": "665:20:9"
											}
										]
									},
									"documentation": {
										"id": 1705,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:9",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 1722,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1707,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1722,
												"src": "601:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1706,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1709,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1722,
												"src": "612:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1708,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:9"
									},
									"returnParameters": {
										"id": 1713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1712,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1722,
												"src": "646:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:9"
									},
									"scope": 2544,
									"src": "588:104:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1744,
										"nodeType": "Block",
										"src": "876:82:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1732,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1725,
																	"src": "931:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1733,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1727,
																	"src": "935:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1735,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1741,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1736,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1725,
																		"src": "941:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 1737,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1727,
																		"src": "945:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1739,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 1740,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1731,
												"id": 1743,
												"nodeType": "Return",
												"src": "923:28:9"
											}
										]
									},
									"documentation": {
										"id": 1723,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:9",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 1745,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1728,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1725,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1745,
												"src": "822:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1724,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1727,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1745,
												"src": "833:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1726,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:9"
									},
									"returnParameters": {
										"id": 1731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1730,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1745,
												"src": "867:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:9"
									},
									"scope": 2544,
									"src": "805:153:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1769,
										"nodeType": "Block",
										"src": "1228:123:9",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1757,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1755,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1748,
															"src": "1316:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1756,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1766,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1761,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1759,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1748,
																			"src": "1330:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1760,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1762,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1763,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1750,
																"src": "1339:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1765,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:9",
													"trueExpression": {
														"hexValue": "30",
														"id": 1758,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1754,
												"id": 1768,
												"nodeType": "Return",
												"src": "1309:35:9"
											}
										]
									},
									"documentation": {
										"id": 1746,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:9",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 1770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1748,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1770,
												"src": "1174:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1747,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1750,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1770,
												"src": "1185:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:9"
									},
									"returnParameters": {
										"id": 1754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1770,
												"src": "1219:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1752,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:9"
									},
									"scope": 2544,
									"src": "1157:194:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1891,
										"nodeType": "Block",
										"src": "1795:3797:9",
										"statements": [
											{
												"id": 1890,
												"nodeType": "UncheckedBlock",
												"src": "1805:3781:9",
												"statements": [
													{
														"assignments": [
															1783
														],
														"declarations": [
															{
																"constant": false,
																"id": 1783,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2134:5:9",
																"nodeType": "VariableDeclaration",
																"scope": 1890,
																"src": "2126:13:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1782,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2126:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1784,
														"nodeType": "VariableDeclarationStatement",
														"src": "2126:13:9"
													},
													{
														"assignments": [
															1786
														],
														"declarations": [
															{
																"constant": false,
																"id": 1786,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2206:5:9",
																"nodeType": "VariableDeclaration",
																"scope": 1890,
																"src": "2198:13:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1785,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2198:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1787,
														"nodeType": "VariableDeclarationStatement",
														"src": "2198:13:9"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2278:157:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2296:30:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2313:1:9"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2316:1:9"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2323:1:9",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2319:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2319:6:9"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2306:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2306:20:9"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2300:2:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2343:18:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2356:1:9"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2359:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2352:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2352:9:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2343:5:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2378:43:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2395:2:9"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2399:5:9"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2391:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2391:14:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2410:2:9"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2414:5:9"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2407:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2407:13:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2387:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2387:34:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2378:5:9"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "2343:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "2399:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "2414:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1786,
																"isOffset": false,
																"isSlot": false,
																"src": "2378:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1773,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:1:9",
																"valueSize": 1
															},
															{
																"declaration": 1773,
																"isOffset": false,
																"isSlot": false,
																"src": "2356:1:9",
																"valueSize": 1
															},
															{
																"declaration": 1775,
																"isOffset": false,
																"isSlot": false,
																"src": "2316:1:9",
																"valueSize": 1
															},
															{
																"declaration": 1775,
																"isOffset": false,
																"isSlot": false,
																"src": "2359:1:9",
																"valueSize": 1
															}
														],
														"id": 1788,
														"nodeType": "InlineAssembly",
														"src": "2269:166:9"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1791,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1789,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1786,
																"src": "2516:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1790,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2525:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2516:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1797,
														"nodeType": "IfStatement",
														"src": "2512:75:9",
														"trueBody": {
															"id": 1796,
															"nodeType": "Block",
															"src": "2528:59:9",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1794,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1792,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1783,
																			"src": "2553:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 1793,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1777,
																			"src": "2561:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2553:19:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1781,
																	"id": 1795,
																	"nodeType": "Return",
																	"src": "2546:26:9"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1799,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1777,
																		"src": "2697:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 1800,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1786,
																		"src": "2711:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2697:19:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 1798,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2689:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																	"typeString": "function (bool) pure"
																}
															},
															"id": 1802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2689:28:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1803,
														"nodeType": "ExpressionStatement",
														"src": "2689:28:9"
													},
													{
														"assignments": [
															1805
														],
														"declarations": [
															{
																"constant": false,
																"id": 1805,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "2981:9:9",
																"nodeType": "VariableDeclaration",
																"scope": 1890,
																"src": "2973:17:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1804,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2973:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1806,
														"nodeType": "VariableDeclarationStatement",
														"src": "2973:17:9"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3013:291:9",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3082:38:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3102:1:9"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3105:1:9"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3108:11:9"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3095:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3095:25:9"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3082:9:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3202:41:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3215:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3225:9:9"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3236:5:9"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3222:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3222:20:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3211:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3211:32:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3202:5:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3260:30:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3273:5:9"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3280:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3269:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3269:21:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3260:5:9"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1777,
																"isOffset": false,
																"isSlot": false,
																"src": "3108:11:9",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "3236:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "3260:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "3273:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1786,
																"isOffset": false,
																"isSlot": false,
																"src": "3202:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1786,
																"isOffset": false,
																"isSlot": false,
																"src": "3215:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1805,
																"isOffset": false,
																"isSlot": false,
																"src": "3082:9:9",
																"valueSize": 1
															},
															{
																"declaration": 1805,
																"isOffset": false,
																"isSlot": false,
																"src": "3225:9:9",
																"valueSize": 1
															},
															{
																"declaration": 1805,
																"isOffset": false,
																"isSlot": false,
																"src": "3280:9:9",
																"valueSize": 1
															},
															{
																"declaration": 1773,
																"isOffset": false,
																"isSlot": false,
																"src": "3102:1:9",
																"valueSize": 1
															},
															{
																"declaration": 1775,
																"isOffset": false,
																"isSlot": false,
																"src": "3105:1:9",
																"valueSize": 1
															}
														],
														"id": 1807,
														"nodeType": "InlineAssembly",
														"src": "3004:300:9"
													},
													{
														"assignments": [
															1809
														],
														"declarations": [
															{
																"constant": false,
																"id": 1809,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3619:4:9",
																"nodeType": "VariableDeclaration",
																"scope": 1890,
																"src": "3611:12:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1808,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3611:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1817,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1810,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1777,
																"src": "3626:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1812,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3641:12:9",
																			"subExpression": {
																				"id": 1811,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1777,
																				"src": "3642:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1813,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3656:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3641:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1815,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3640:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3626:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3611:47:9"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3681:362:9",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3746:37:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3765:11:9"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3778:4:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3761:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3761:22:9"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "3746:11:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3850:25:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3863:5:9"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3870:4:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3859:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3859:16:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3850:5:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3990:39:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4010:1:9",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4013:4:9"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4006:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4006:12:9"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4020:4:9"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4002:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4002:23:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4027:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3998:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3998:31:9"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "3990:4:9"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1777,
																"isOffset": false,
																"isSlot": false,
																"src": "3746:11:9",
																"valueSize": 1
															},
															{
																"declaration": 1777,
																"isOffset": false,
																"isSlot": false,
																"src": "3765:11:9",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "3850:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "3863:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1809,
																"isOffset": false,
																"isSlot": false,
																"src": "3778:4:9",
																"valueSize": 1
															},
															{
																"declaration": 1809,
																"isOffset": false,
																"isSlot": false,
																"src": "3870:4:9",
																"valueSize": 1
															},
															{
																"declaration": 1809,
																"isOffset": false,
																"isSlot": false,
																"src": "3990:4:9",
																"valueSize": 1
															},
															{
																"declaration": 1809,
																"isOffset": false,
																"isSlot": false,
																"src": "4013:4:9",
																"valueSize": 1
															},
															{
																"declaration": 1809,
																"isOffset": false,
																"isSlot": false,
																"src": "4020:4:9",
																"valueSize": 1
															}
														],
														"id": 1818,
														"nodeType": "InlineAssembly",
														"src": "3672:371:9"
													},
													{
														"expression": {
															"id": 1823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1819,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1783,
																"src": "4109:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1822,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1820,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1786,
																	"src": "4118:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1821,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1809,
																	"src": "4126:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4118:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4109:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1824,
														"nodeType": "ExpressionStatement",
														"src": "4109:21:9"
													},
													{
														"assignments": [
															1826
														],
														"declarations": [
															{
																"constant": false,
																"id": 1826,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4456:7:9",
																"nodeType": "VariableDeclaration",
																"scope": 1890,
																"src": "4448:15:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1825,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4448:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1833,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 1827,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4467:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1828,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1777,
																			"src": "4471:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4467:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1830,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4466:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 1831,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4486:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4466:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4448:39:9"
													},
													{
														"expression": {
															"id": 1840,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1834,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "4704:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1835,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4715:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1836,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1777,
																		"src": "4719:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1837,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1826,
																		"src": "4733:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4719:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4715:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4704:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1841,
														"nodeType": "ExpressionStatement",
														"src": "4704:36:9"
													},
													{
														"expression": {
															"id": 1848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1842,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "4773:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1847,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1843,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4784:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1846,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1844,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1777,
																		"src": "4788:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1845,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1826,
																		"src": "4802:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4788:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4784:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4773:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1849,
														"nodeType": "ExpressionStatement",
														"src": "4773:36:9"
													},
													{
														"expression": {
															"id": 1856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1850,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "4843:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1855,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4854:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1854,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1852,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1777,
																		"src": "4858:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1853,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1826,
																		"src": "4872:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4858:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4854:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4843:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1857,
														"nodeType": "ExpressionStatement",
														"src": "4843:36:9"
													},
													{
														"expression": {
															"id": 1864,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1858,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "4913:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1863,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1859,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4924:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1860,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1777,
																		"src": "4928:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1861,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1826,
																		"src": "4942:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4928:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4924:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4913:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1865,
														"nodeType": "ExpressionStatement",
														"src": "4913:36:9"
													},
													{
														"expression": {
															"id": 1872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1866,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "4983:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1871,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1867,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4994:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1868,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1777,
																		"src": "4998:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1869,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1826,
																		"src": "5012:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4998:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4994:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4983:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1873,
														"nodeType": "ExpressionStatement",
														"src": "4983:36:9"
													},
													{
														"expression": {
															"id": 1880,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1874,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "5054:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1879,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5065:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1878,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1876,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1777,
																		"src": "5069:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1877,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1826,
																		"src": "5083:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5069:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5065:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5054:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1881,
														"nodeType": "ExpressionStatement",
														"src": "5054:36:9"
													},
													{
														"expression": {
															"id": 1886,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1882,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1780,
																"src": "5524:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1885,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1883,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1783,
																	"src": "5533:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1884,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1826,
																	"src": "5541:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5533:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5524:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1887,
														"nodeType": "ExpressionStatement",
														"src": "5524:24:9"
													},
													{
														"expression": {
															"id": 1888,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1780,
															"src": "5569:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1781,
														"id": 1889,
														"nodeType": "Return",
														"src": "5562:13:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1771,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:9",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 1892,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1773,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1700:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1892,
												"src": "1692:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1772,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1775,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1719:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1892,
												"src": "1711:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1774,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1711:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1777,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1738:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1892,
												"src": "1730:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1730:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:73:9"
									},
									"returnParameters": {
										"id": 1781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1780,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1787:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1892,
												"src": "1779:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1779,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1778:16:9"
									},
									"scope": 2544,
									"src": "1667:3925:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1935,
										"nodeType": "Block",
										"src": "5872:189:9",
										"statements": [
											{
												"assignments": [
													1908
												],
												"declarations": [
													{
														"constant": false,
														"id": 1908,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "5890:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1935,
														"src": "5882:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1907,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5882:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1914,
												"initialValue": {
													"arguments": [
														{
															"id": 1910,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1895,
															"src": "5906:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1911,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1897,
															"src": "5909:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1912,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1899,
															"src": "5912:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1909,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1892,
															1936
														],
														"referencedDeclaration": 1892,
														"src": "5899:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5899:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5882:42:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1926,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$1686",
															"typeString": "enum Math.Rounding"
														},
														"id": 1918,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1915,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1902,
															"src": "5938:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$1686",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1916,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1686,
																"src": "5950:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$1686_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1917,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1684,
															"src": "5950:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$1686",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "5938:23:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1925,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1920,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1895,
																	"src": "5972:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1921,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1897,
																	"src": "5975:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1922,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1899,
																	"src": "5978:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1919,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "5965:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5965:25:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1924,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5993:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5965:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5938:56:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1932,
												"nodeType": "IfStatement",
												"src": "5934:98:9",
												"trueBody": {
													"id": 1931,
													"nodeType": "Block",
													"src": "5996:36:9",
													"statements": [
														{
															"expression": {
																"id": 1929,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1927,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "6010:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1928,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6020:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6010:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1930,
															"nodeType": "ExpressionStatement",
															"src": "6010:11:9"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1933,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1908,
													"src": "6048:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1906,
												"id": 1934,
												"nodeType": "Return",
												"src": "6041:13:9"
											}
										]
									},
									"documentation": {
										"id": 1893,
										"nodeType": "StructuredDocumentation",
										"src": "5598:121:9",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 1936,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "5733:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1895,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "5757:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1936,
												"src": "5749:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1894,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1897,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "5776:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1936,
												"src": "5768:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5768:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "5795:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1936,
												"src": "5787:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "5825:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1936,
												"src": "5816:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1686",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1901,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1900,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1686,
														"src": "5816:8:9"
													},
													"referencedDeclaration": 1686,
													"src": "5816:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1686",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5739:100:9"
									},
									"returnParameters": {
										"id": 1906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1905,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1936,
												"src": "5863:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5863:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5862:9:9"
									},
									"scope": 2544,
									"src": "5724:337:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2047,
										"nodeType": "Block",
										"src": "6337:1585:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1944,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1939,
														"src": "6351:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1945,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6356:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6351:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1950,
												"nodeType": "IfStatement",
												"src": "6347:45:9",
												"trueBody": {
													"id": 1949,
													"nodeType": "Block",
													"src": "6359:33:9",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1947,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6380:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1943,
															"id": 1948,
															"nodeType": "Return",
															"src": "6373:8:9"
														}
													]
												}
											},
											{
												"assignments": [
													1952
												],
												"declarations": [
													{
														"constant": false,
														"id": 1952,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7079:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 2047,
														"src": "7071:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1951,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7071:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1961,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 1953,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7088:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1955,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1939,
																			"src": "7099:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1954,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2216,
																			2252
																		],
																		"referencedDeclaration": 2216,
																		"src": "7094:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1956,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7094:7:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7105:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7094:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1959,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7093:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7088:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7071:36:9"
											},
											{
												"id": 2046,
												"nodeType": "UncheckedBlock",
												"src": "7508:408:9",
												"statements": [
													{
														"expression": {
															"id": 1971,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1962,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1952,
																"src": "7532:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1970,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1967,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1963,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1952,
																				"src": "7542:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1966,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1964,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1939,
																					"src": "7551:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1965,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1952,
																					"src": "7555:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7551:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7542:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1968,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7541:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1969,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7566:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7541:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7532:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1972,
														"nodeType": "ExpressionStatement",
														"src": "7532:35:9"
													},
													{
														"expression": {
															"id": 1982,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1973,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1952,
																"src": "7581:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1981,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1978,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1974,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1952,
																				"src": "7591:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1977,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1975,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1939,
																					"src": "7600:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1976,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1952,
																					"src": "7604:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7600:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7591:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1979,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7590:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1980,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7615:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7590:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7581:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1983,
														"nodeType": "ExpressionStatement",
														"src": "7581:35:9"
													},
													{
														"expression": {
															"id": 1993,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1984,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1952,
																"src": "7630:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1992,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1989,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1985,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1952,
																				"src": "7640:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1988,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1986,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1939,
																					"src": "7649:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1987,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1952,
																					"src": "7653:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7649:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7640:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1990,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7639:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1991,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7664:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7639:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7630:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1994,
														"nodeType": "ExpressionStatement",
														"src": "7630:35:9"
													},
													{
														"expression": {
															"id": 2004,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1995,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1952,
																"src": "7679:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2003,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2000,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1996,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1952,
																				"src": "7689:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1999,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1997,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1939,
																					"src": "7698:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1998,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1952,
																					"src": "7702:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7698:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7689:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2001,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7688:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7713:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7688:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7679:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2005,
														"nodeType": "ExpressionStatement",
														"src": "7679:35:9"
													},
													{
														"expression": {
															"id": 2015,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2006,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1952,
																"src": "7728:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2014,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2011,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2007,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1952,
																				"src": "7738:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2010,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2008,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1939,
																					"src": "7747:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2009,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1952,
																					"src": "7751:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7747:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7738:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2012,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7737:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2013,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7762:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7737:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7728:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2016,
														"nodeType": "ExpressionStatement",
														"src": "7728:35:9"
													},
													{
														"expression": {
															"id": 2026,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2017,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1952,
																"src": "7777:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2025,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2022,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2018,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1952,
																				"src": "7787:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2021,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2019,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1939,
																					"src": "7796:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2020,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1952,
																					"src": "7800:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7796:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7787:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2023,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7786:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7811:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7786:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7777:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2027,
														"nodeType": "ExpressionStatement",
														"src": "7777:35:9"
													},
													{
														"expression": {
															"id": 2037,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2028,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1952,
																"src": "7826:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2036,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2033,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2029,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1952,
																				"src": "7836:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2032,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2030,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1939,
																					"src": "7845:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2031,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1952,
																					"src": "7849:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7845:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7836:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2034,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7835:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2035,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7860:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7835:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7826:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2038,
														"nodeType": "ExpressionStatement",
														"src": "7826:35:9"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2040,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1952,
																	"src": "7886:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2043,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2041,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1939,
																		"src": "7894:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2042,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1952,
																		"src": "7898:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7894:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2039,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1722,
																"src": "7882:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2044,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7882:23:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1943,
														"id": 2045,
														"nodeType": "Return",
														"src": "7875:30:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1937,
										"nodeType": "StructuredDocumentation",
										"src": "6067:208:9",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2048,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6289:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1939,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6302:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 2048,
												"src": "6294:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1938,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6294:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6293:11:9"
									},
									"returnParameters": {
										"id": 1943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1942,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2048,
												"src": "6328:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6328:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6327:9:9"
									},
									"scope": 2544,
									"src": "6280:1642:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2083,
										"nodeType": "Block",
										"src": "8098:161:9",
										"statements": [
											{
												"id": 2082,
												"nodeType": "UncheckedBlock",
												"src": "8108:145:9",
												"statements": [
													{
														"assignments": [
															2060
														],
														"declarations": [
															{
																"constant": false,
																"id": 2060,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8140:6:9",
																"nodeType": "VariableDeclaration",
																"scope": 2082,
																"src": "8132:14:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2059,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8132:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2064,
														"initialValue": {
															"arguments": [
																{
																	"id": 2062,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2051,
																	"src": "8154:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2061,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2048,
																	2084
																],
																"referencedDeclaration": 2048,
																"src": "8149:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2063,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8149:7:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8132:24:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2080,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2065,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2060,
																"src": "8177:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2075,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1686",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2069,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2066,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2054,
																					"src": "8187:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1686",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2067,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1686,
																						"src": "8199:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1686_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2068,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1684,
																					"src": "8199:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1686",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8187:23:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2074,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2072,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2070,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2060,
																						"src": "8214:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2071,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2060,
																						"src": "8223:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8214:15:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2073,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2051,
																					"src": "8232:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8214:19:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8187:46:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2077,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8240:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2078,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8187:54:9",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2076,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8236:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2079,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8186:56:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8177:65:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2058,
														"id": 2081,
														"nodeType": "Return",
														"src": "8170:72:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2049,
										"nodeType": "StructuredDocumentation",
										"src": "7928:89:9",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2084,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8031:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2051,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8044:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "8036:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2050,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8036:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2054,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8056:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "8047:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1686",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2053,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2052,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1686,
														"src": "8047:8:9"
													},
													"referencedDeclaration": 1686,
													"src": "8047:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1686",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8035:30:9"
									},
									"returnParameters": {
										"id": 2058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "8089:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8088:9:9"
									},
									"scope": 2544,
									"src": "8022:237:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2215,
										"nodeType": "Block",
										"src": "8444:922:9",
										"statements": [
											{
												"assignments": [
													2093
												],
												"declarations": [
													{
														"constant": false,
														"id": 2093,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8462:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 2215,
														"src": "8454:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2092,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8454:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2095,
												"initialValue": {
													"hexValue": "30",
													"id": 2094,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8471:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8454:18:9"
											},
											{
												"id": 2212,
												"nodeType": "UncheckedBlock",
												"src": "8482:855:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2098,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2096,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "8510:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2097,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8519:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8510:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2099,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8525:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8510:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2110,
														"nodeType": "IfStatement",
														"src": "8506:99:9",
														"trueBody": {
															"id": 2109,
															"nodeType": "Block",
															"src": "8528:77:9",
															"statements": [
																{
																	"expression": {
																		"id": 2103,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2101,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2087,
																			"src": "8546:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2102,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8556:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8546:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2104,
																	"nodeType": "ExpressionStatement",
																	"src": "8546:13:9"
																},
																{
																	"expression": {
																		"id": 2107,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2105,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2093,
																			"src": "8577:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2106,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8587:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8577:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2108,
																	"nodeType": "ExpressionStatement",
																	"src": "8577:13:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2113,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2111,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "8622:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2112,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8631:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8622:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2114,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8636:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8622:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2125,
														"nodeType": "IfStatement",
														"src": "8618:96:9",
														"trueBody": {
															"id": 2124,
															"nodeType": "Block",
															"src": "8639:75:9",
															"statements": [
																{
																	"expression": {
																		"id": 2118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2116,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2087,
																			"src": "8657:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2117,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8667:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8657:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2119,
																	"nodeType": "ExpressionStatement",
																	"src": "8657:12:9"
																},
																{
																	"expression": {
																		"id": 2122,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2120,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2093,
																			"src": "8687:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2121,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8697:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8687:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2123,
																	"nodeType": "ExpressionStatement",
																	"src": "8687:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2126,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "8731:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8740:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8731:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2129,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8745:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8731:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2140,
														"nodeType": "IfStatement",
														"src": "8727:96:9",
														"trueBody": {
															"id": 2139,
															"nodeType": "Block",
															"src": "8748:75:9",
															"statements": [
																{
																	"expression": {
																		"id": 2133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2131,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2087,
																			"src": "8766:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8776:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8766:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2134,
																	"nodeType": "ExpressionStatement",
																	"src": "8766:12:9"
																},
																{
																	"expression": {
																		"id": 2137,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2135,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2093,
																			"src": "8796:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2136,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8796:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2138,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2143,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2141,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "8840:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2142,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8849:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "8840:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2144,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8854:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8840:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2155,
														"nodeType": "IfStatement",
														"src": "8836:96:9",
														"trueBody": {
															"id": 2154,
															"nodeType": "Block",
															"src": "8857:75:9",
															"statements": [
																{
																	"expression": {
																		"id": 2148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2146,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2087,
																			"src": "8875:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2147,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8885:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8875:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2149,
																	"nodeType": "ExpressionStatement",
																	"src": "8875:12:9"
																},
																{
																	"expression": {
																		"id": 2152,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2150,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2093,
																			"src": "8905:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2151,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8915:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8905:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2153,
																	"nodeType": "ExpressionStatement",
																	"src": "8905:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2156,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "8949:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8958:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "8949:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2159,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8962:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8949:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2170,
														"nodeType": "IfStatement",
														"src": "8945:93:9",
														"trueBody": {
															"id": 2169,
															"nodeType": "Block",
															"src": "8965:73:9",
															"statements": [
																{
																	"expression": {
																		"id": 2163,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2161,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2087,
																			"src": "8983:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2162,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8993:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "8983:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2164,
																	"nodeType": "ExpressionStatement",
																	"src": "8983:11:9"
																},
																{
																	"expression": {
																		"id": 2167,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2165,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2093,
																			"src": "9012:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2166,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9022:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9012:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2168,
																	"nodeType": "ExpressionStatement",
																	"src": "9012:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2175,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2173,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2171,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "9055:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2172,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9064:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9055:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2174,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9068:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9055:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2185,
														"nodeType": "IfStatement",
														"src": "9051:93:9",
														"trueBody": {
															"id": 2184,
															"nodeType": "Block",
															"src": "9071:73:9",
															"statements": [
																{
																	"expression": {
																		"id": 2178,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2176,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2087,
																			"src": "9089:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2177,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9099:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9089:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2179,
																	"nodeType": "ExpressionStatement",
																	"src": "9089:11:9"
																},
																{
																	"expression": {
																		"id": 2182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2180,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2093,
																			"src": "9118:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2181,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9128:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9118:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2183,
																	"nodeType": "ExpressionStatement",
																	"src": "9118:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2190,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2186,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "9161:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2187,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9170:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9161:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2189,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9174:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9161:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2200,
														"nodeType": "IfStatement",
														"src": "9157:93:9",
														"trueBody": {
															"id": 2199,
															"nodeType": "Block",
															"src": "9177:73:9",
															"statements": [
																{
																	"expression": {
																		"id": 2193,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2191,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2087,
																			"src": "9195:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2192,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9205:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9195:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2194,
																	"nodeType": "ExpressionStatement",
																	"src": "9195:11:9"
																},
																{
																	"expression": {
																		"id": 2197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2195,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2093,
																			"src": "9224:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2196,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9234:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9224:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2198,
																	"nodeType": "ExpressionStatement",
																	"src": "9224:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2203,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2201,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "9267:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2202,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9276:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9267:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2204,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9280:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9267:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2211,
														"nodeType": "IfStatement",
														"src": "9263:64:9",
														"trueBody": {
															"id": 2210,
															"nodeType": "Block",
															"src": "9283:44:9",
															"statements": [
																{
																	"expression": {
																		"id": 2208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2206,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2093,
																			"src": "9301:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2207,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9311:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9301:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2209,
																	"nodeType": "ExpressionStatement",
																	"src": "9301:11:9"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2213,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2093,
													"src": "9353:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2091,
												"id": 2214,
												"nodeType": "Return",
												"src": "9346:13:9"
											}
										]
									},
									"documentation": {
										"id": 2085,
										"nodeType": "StructuredDocumentation",
										"src": "8265:113:9",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8392:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2087,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8405:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2216,
												"src": "8397:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8397:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8396:15:9"
									},
									"returnParameters": {
										"id": 2091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2216,
												"src": "8435:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8435:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8434:9:9"
									},
									"scope": 2544,
									"src": "8383:983:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2251,
										"nodeType": "Block",
										"src": "9599:165:9",
										"statements": [
											{
												"id": 2250,
												"nodeType": "UncheckedBlock",
												"src": "9609:149:9",
												"statements": [
													{
														"assignments": [
															2228
														],
														"declarations": [
															{
																"constant": false,
																"id": 2228,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9641:6:9",
																"nodeType": "VariableDeclaration",
																"scope": 2250,
																"src": "9633:14:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2227,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9633:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2232,
														"initialValue": {
															"arguments": [
																{
																	"id": 2230,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2219,
																	"src": "9655:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2229,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2216,
																	2252
																],
																"referencedDeclaration": 2216,
																"src": "9650:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9650:11:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9633:28:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2233,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2228,
																"src": "9682:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2243,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1686",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2237,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2234,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2222,
																					"src": "9692:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1686",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2235,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1686,
																						"src": "9704:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1686_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2236,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1684,
																					"src": "9704:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1686",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9692:23:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2242,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2240,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2238,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9719:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2239,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2228,
																						"src": "9724:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9719:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2241,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2219,
																					"src": "9733:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9719:19:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9692:46:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2245,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9745:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2246,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9692:54:9",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2244,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9741:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2247,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9691:56:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9682:65:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2226,
														"id": 2249,
														"nodeType": "Return",
														"src": "9675:72:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2217,
										"nodeType": "StructuredDocumentation",
										"src": "9372:142:9",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2252,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9528:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2219,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9541:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2252,
												"src": "9533:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9533:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2222,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9557:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2252,
												"src": "9548:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1686",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2221,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2220,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1686,
														"src": "9548:8:9"
													},
													"referencedDeclaration": 1686,
													"src": "9548:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1686",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9532:34:9"
									},
									"returnParameters": {
										"id": 2226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2225,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2252,
												"src": "9590:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9590:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9589:9:9"
									},
									"scope": 2544,
									"src": "9519:245:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2380,
										"nodeType": "Block",
										"src": "9951:828:9",
										"statements": [
											{
												"assignments": [
													2261
												],
												"declarations": [
													{
														"constant": false,
														"id": 2261,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9969:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 2380,
														"src": "9961:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2260,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9961:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2263,
												"initialValue": {
													"hexValue": "30",
													"id": 2262,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9978:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9961:18:9"
											},
											{
												"id": 2377,
												"nodeType": "UncheckedBlock",
												"src": "9989:761:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2264,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2255,
																"src": "10017:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2265,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10026:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2266,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10030:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10026:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10017:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2280,
														"nodeType": "IfStatement",
														"src": "10013:99:9",
														"trueBody": {
															"id": 2279,
															"nodeType": "Block",
															"src": "10034:78:9",
															"statements": [
																{
																	"expression": {
																		"id": 2273,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2269,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2255,
																			"src": "10052:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2272,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2270,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10061:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2271,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10065:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10061:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10052:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2274,
																	"nodeType": "ExpressionStatement",
																	"src": "10052:15:9"
																},
																{
																	"expression": {
																		"id": 2277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2275,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2261,
																			"src": "10085:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2276,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10095:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10085:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2278,
																	"nodeType": "ExpressionStatement",
																	"src": "10085:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2281,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2255,
																"src": "10129:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10138:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2283,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10142:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10138:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10129:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2297,
														"nodeType": "IfStatement",
														"src": "10125:99:9",
														"trueBody": {
															"id": 2296,
															"nodeType": "Block",
															"src": "10146:78:9",
															"statements": [
																{
																	"expression": {
																		"id": 2290,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2286,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2255,
																			"src": "10164:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2287,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10173:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2288,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10177:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10173:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10164:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2291,
																	"nodeType": "ExpressionStatement",
																	"src": "10164:15:9"
																},
																{
																	"expression": {
																		"id": 2294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2292,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2261,
																			"src": "10197:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10207:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10197:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2295,
																	"nodeType": "ExpressionStatement",
																	"src": "10197:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2302,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2298,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2255,
																"src": "10241:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2301,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2299,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10250:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10254:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10250:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10241:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2314,
														"nodeType": "IfStatement",
														"src": "10237:99:9",
														"trueBody": {
															"id": 2313,
															"nodeType": "Block",
															"src": "10258:78:9",
															"statements": [
																{
																	"expression": {
																		"id": 2307,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2303,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2255,
																			"src": "10276:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2306,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2304,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10285:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2305,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10289:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10285:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10276:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2308,
																	"nodeType": "ExpressionStatement",
																	"src": "10276:15:9"
																},
																{
																	"expression": {
																		"id": 2311,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2309,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2261,
																			"src": "10309:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2310,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10319:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10309:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2312,
																	"nodeType": "ExpressionStatement",
																	"src": "10309:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2315,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2255,
																"src": "10353:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10362:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10366:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10362:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10353:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2331,
														"nodeType": "IfStatement",
														"src": "10349:96:9",
														"trueBody": {
															"id": 2330,
															"nodeType": "Block",
															"src": "10369:76:9",
															"statements": [
																{
																	"expression": {
																		"id": 2324,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2320,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2255,
																			"src": "10387:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2323,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2321,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10396:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2322,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10400:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10396:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10387:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2325,
																	"nodeType": "ExpressionStatement",
																	"src": "10387:14:9"
																},
																{
																	"expression": {
																		"id": 2328,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2326,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2261,
																			"src": "10419:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2327,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10429:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10419:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2329,
																	"nodeType": "ExpressionStatement",
																	"src": "10419:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2332,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2255,
																"src": "10462:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2335,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10471:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10475:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10471:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10462:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2348,
														"nodeType": "IfStatement",
														"src": "10458:96:9",
														"trueBody": {
															"id": 2347,
															"nodeType": "Block",
															"src": "10478:76:9",
															"statements": [
																{
																	"expression": {
																		"id": 2341,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2337,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2255,
																			"src": "10496:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2340,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2338,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10505:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2339,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10509:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10505:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10496:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2342,
																	"nodeType": "ExpressionStatement",
																	"src": "10496:14:9"
																},
																{
																	"expression": {
																		"id": 2345,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2343,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2261,
																			"src": "10528:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2344,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10538:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10528:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2346,
																	"nodeType": "ExpressionStatement",
																	"src": "10528:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2353,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2349,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2255,
																"src": "10571:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 2352,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10580:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2351,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10584:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10580:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10571:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2365,
														"nodeType": "IfStatement",
														"src": "10567:96:9",
														"trueBody": {
															"id": 2364,
															"nodeType": "Block",
															"src": "10587:76:9",
															"statements": [
																{
																	"expression": {
																		"id": 2358,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2354,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2255,
																			"src": "10605:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 2357,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2355,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10614:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 2356,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10618:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10614:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10605:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2359,
																	"nodeType": "ExpressionStatement",
																	"src": "10605:14:9"
																},
																{
																	"expression": {
																		"id": 2362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2360,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2261,
																			"src": "10637:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2361,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10647:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10637:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2363,
																	"nodeType": "ExpressionStatement",
																	"src": "10637:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2370,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2366,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2255,
																"src": "10680:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 2369,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10689:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10693:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10689:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10680:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2376,
														"nodeType": "IfStatement",
														"src": "10676:64:9",
														"trueBody": {
															"id": 2375,
															"nodeType": "Block",
															"src": "10696:44:9",
															"statements": [
																{
																	"expression": {
																		"id": 2373,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2371,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2261,
																			"src": "10714:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2372,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10724:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10714:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2374,
																	"nodeType": "ExpressionStatement",
																	"src": "10714:11:9"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2378,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2261,
													"src": "10766:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2259,
												"id": 2379,
												"nodeType": "Return",
												"src": "10759:13:9"
											}
										]
									},
									"documentation": {
										"id": 2253,
										"nodeType": "StructuredDocumentation",
										"src": "9770:114:9",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "9898:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2255,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9912:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2381,
												"src": "9904:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2254,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9904:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9903:15:9"
									},
									"returnParameters": {
										"id": 2259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2258,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2381,
												"src": "9942:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9942:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9941:9:9"
									},
									"scope": 2544,
									"src": "9889:890:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2416,
										"nodeType": "Block",
										"src": "11014:165:9",
										"statements": [
											{
												"id": 2415,
												"nodeType": "UncheckedBlock",
												"src": "11024:149:9",
												"statements": [
													{
														"assignments": [
															2393
														],
														"declarations": [
															{
																"constant": false,
																"id": 2393,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11056:6:9",
																"nodeType": "VariableDeclaration",
																"scope": 2415,
																"src": "11048:14:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2392,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11048:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2397,
														"initialValue": {
															"arguments": [
																{
																	"id": 2395,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2384,
																	"src": "11071:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2394,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2381,
																	2417
																],
																"referencedDeclaration": 2381,
																"src": "11065:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11065:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11048:29:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2398,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2393,
																"src": "11098:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2408,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1686",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2402,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2399,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2387,
																					"src": "11108:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1686",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2400,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1686,
																						"src": "11120:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1686_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2401,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1684,
																					"src": "11120:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1686",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11108:23:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2407,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2405,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 2403,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11135:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 2404,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2393,
																						"src": "11139:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11135:10:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2406,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2384,
																					"src": "11148:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11135:18:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11108:45:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2410,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11160:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11108:53:9",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11156:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2412,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11107:55:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11098:64:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2391,
														"id": 2414,
														"nodeType": "Return",
														"src": "11091:71:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2382,
										"nodeType": "StructuredDocumentation",
										"src": "10785:143:9",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2417,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10942:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2384,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10956:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2417,
												"src": "10948:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2383,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10948:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2387,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10972:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2417,
												"src": "10963:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1686",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2386,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2385,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1686,
														"src": "10963:8:9"
													},
													"referencedDeclaration": 1686,
													"src": "10963:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1686",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10947:34:9"
									},
									"returnParameters": {
										"id": 2391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2390,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2417,
												"src": "11005:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11005:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11004:9:9"
									},
									"scope": 2544,
									"src": "10933:246:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2503,
										"nodeType": "Block",
										"src": "11493:600:9",
										"statements": [
											{
												"assignments": [
													2426
												],
												"declarations": [
													{
														"constant": false,
														"id": 2426,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11511:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 2503,
														"src": "11503:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2425,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11503:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2428,
												"initialValue": {
													"hexValue": "30",
													"id": 2427,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11520:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11503:18:9"
											},
											{
												"id": 2500,
												"nodeType": "UncheckedBlock",
												"src": "11531:533:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2429,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2420,
																	"src": "11559:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11568:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11559:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11574:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11559:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2443,
														"nodeType": "IfStatement",
														"src": "11555:98:9",
														"trueBody": {
															"id": 2442,
															"nodeType": "Block",
															"src": "11577:76:9",
															"statements": [
																{
																	"expression": {
																		"id": 2436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2434,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2420,
																			"src": "11595:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2435,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11605:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11595:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2437,
																	"nodeType": "ExpressionStatement",
																	"src": "11595:13:9"
																},
																{
																	"expression": {
																		"id": 2440,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2438,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2426,
																			"src": "11626:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2439,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11636:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11626:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2441,
																	"nodeType": "ExpressionStatement",
																	"src": "11626:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2446,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2444,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2420,
																	"src": "11670:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11679:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11670:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11684:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11670:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2458,
														"nodeType": "IfStatement",
														"src": "11666:95:9",
														"trueBody": {
															"id": 2457,
															"nodeType": "Block",
															"src": "11687:74:9",
															"statements": [
																{
																	"expression": {
																		"id": 2451,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2449,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2420,
																			"src": "11705:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2450,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11715:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11705:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2452,
																	"nodeType": "ExpressionStatement",
																	"src": "11705:12:9"
																},
																{
																	"expression": {
																		"id": 2455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2453,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2426,
																			"src": "11735:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2454,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11745:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11735:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2456,
																	"nodeType": "ExpressionStatement",
																	"src": "11735:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2459,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2420,
																	"src": "11778:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11787:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11778:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2462,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11792:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11778:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2473,
														"nodeType": "IfStatement",
														"src": "11774:95:9",
														"trueBody": {
															"id": 2472,
															"nodeType": "Block",
															"src": "11795:74:9",
															"statements": [
																{
																	"expression": {
																		"id": 2466,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2464,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2420,
																			"src": "11813:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2465,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11823:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11813:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2467,
																	"nodeType": "ExpressionStatement",
																	"src": "11813:12:9"
																},
																{
																	"expression": {
																		"id": 2470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2468,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2426,
																			"src": "11843:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2469,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11853:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11843:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2471,
																	"nodeType": "ExpressionStatement",
																	"src": "11843:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2478,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2476,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2474,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2420,
																	"src": "11886:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2475,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11895:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11886:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2477,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11900:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11886:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2488,
														"nodeType": "IfStatement",
														"src": "11882:95:9",
														"trueBody": {
															"id": 2487,
															"nodeType": "Block",
															"src": "11903:74:9",
															"statements": [
																{
																	"expression": {
																		"id": 2481,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2479,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2420,
																			"src": "11921:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2480,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11931:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11921:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2482,
																	"nodeType": "ExpressionStatement",
																	"src": "11921:12:9"
																},
																{
																	"expression": {
																		"id": 2485,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2483,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2426,
																			"src": "11951:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2484,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11961:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11951:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2486,
																	"nodeType": "ExpressionStatement",
																	"src": "11951:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2489,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2420,
																	"src": "11994:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12003:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11994:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2492,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12007:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11994:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2499,
														"nodeType": "IfStatement",
														"src": "11990:64:9",
														"trueBody": {
															"id": 2498,
															"nodeType": "Block",
															"src": "12010:44:9",
															"statements": [
																{
																	"expression": {
																		"id": 2496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2494,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2426,
																			"src": "12028:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2495,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12038:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12028:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2497,
																	"nodeType": "ExpressionStatement",
																	"src": "12028:11:9"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2501,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2426,
													"src": "12080:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2424,
												"id": 2502,
												"nodeType": "Return",
												"src": "12073:13:9"
											}
										]
									},
									"documentation": {
										"id": 2418,
										"nodeType": "StructuredDocumentation",
										"src": "11185:240:9",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 2504,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11439:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2420,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11454:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "11446:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11446:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11445:15:9"
									},
									"returnParameters": {
										"id": 2424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2423,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "11484:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11484:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11483:9:9"
									},
									"scope": 2544,
									"src": "11430:663:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2542,
										"nodeType": "Block",
										"src": "12329:173:9",
										"statements": [
											{
												"id": 2541,
												"nodeType": "UncheckedBlock",
												"src": "12339:157:9",
												"statements": [
													{
														"assignments": [
															2516
														],
														"declarations": [
															{
																"constant": false,
																"id": 2516,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12371:6:9",
																"nodeType": "VariableDeclaration",
																"scope": 2541,
																"src": "12363:14:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2515,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12363:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2520,
														"initialValue": {
															"arguments": [
																{
																	"id": 2518,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2507,
																	"src": "12387:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2517,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2504,
																	2543
																],
																"referencedDeclaration": 2504,
																"src": "12380:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12380:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12363:30:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2521,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2516,
																"src": "12414:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2534,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1686",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2525,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2522,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2510,
																					"src": "12424:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1686",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2523,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1686,
																						"src": "12436:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1686_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2524,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1684,
																					"src": "12436:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1686",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12424:23:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2533,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2531,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2526,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12451:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2529,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2527,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2516,
																									"src": "12457:6:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "38",
																									"id": 2528,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12466:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_8_by_1",
																										"typeString": "int_const 8"
																									},
																									"value": "8"
																								},
																								"src": "12457:10:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 2530,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12456:12:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12451:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2532,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2507,
																					"src": "12471:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12451:25:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12424:52:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2536,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12483:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2537,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12424:60:9",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2535,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12479:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2538,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12423:62:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12414:71:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2514,
														"id": 2540,
														"nodeType": "Return",
														"src": "12407:78:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2505,
										"nodeType": "StructuredDocumentation",
										"src": "12099:143:9",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2543,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12256:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2507,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12271:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2543,
												"src": "12263:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12263:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2510,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12287:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2543,
												"src": "12278:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1686",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2509,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2508,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1686,
														"src": "12278:8:9"
													},
													"referencedDeclaration": 1686,
													"src": "12278:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1686",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12262:34:9"
									},
									"returnParameters": {
										"id": 2514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2513,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2543,
												"src": "12320:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12320:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12319:9:9"
									},
									"scope": 2544,
									"src": "12247:255:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2545,
							"src": "202:12302:9",
							"usedErrors": []
						}
					],
					"src": "103:12402:9"
				},
				"id": 9
			}
		}
	}
}